{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.9", "generated_at": "2025-05-25T10:16:06.545716Z", "invocation_id": "61054c78-ada0-404b-9eef-eeda8d626e73", "env": {}, "project_name": "kns_dbt", "project_id": "885e4ec986242798e804fa318a31a14c", "user_id": "1ec01125-d80b-444c-839a-7e6a541e3299", "send_anonymous_usage_stats": true, "adapter_type": "sqlserver"}, "nodes": {"model.kns_dbt.int_marketing__SourcesMapped": {"database": "KNSDevDbt", "schema": "dbt_prod_intermediate", "name": "int_marketing__SourcesMapped", "resource_type": "model", "package_name": "kns_dbt", "path": "intermediate\\marketing\\int_marketing__SourcesMapped.sql", "original_file_path": "models\\intermediate\\marketing\\int_marketing__SourcesMapped.sql", "unique_id": "model.kns_dbt.int_marketing__SourcesMapped", "fqn": ["kns_dbt", "intermediate", "marketing", "int_marketing__SourcesMapped"], "alias": "int_marketing__SourcesMapped", "checksum": {"name": "sha256", "checksum": "69195db4c87c510d9df4d71384e27927145592fb71623638ac79e69cf1df2286"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This view pulls the unioned marketing sources and joins it to our mapping table for rows with the old naming convention", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\intermediate\\marketing\\_marketing__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_intermediate", "materialized": "view"}, "created_at": 1748168169.6862774, "relation_name": "\"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_marketing__SourcesMapped\"", "raw_code": "with\r\n\r\nsources as (\r\n    select * from {{ ref('int_marketing__SourcesUnioned')}}\r\n),\r\n\r\n-- THIS IS WHERE WE WILL JOIN THE MAPPING TABLE AND FILL IN EMPTY VALUES\r\n\r\n-- Step 1: Extract the first token from Campaign (up to the first space, or the whole Campaign)\r\nbase_campaign as (\r\n\r\n    select \r\n        *,\r\n        case \r\n            when charindex(' ', Campaign) > 0 \r\n                then left(Campaign, charindex(' ', Campaign) - 1)\r\n            else Campaign\r\n        end as FirstSegment\r\n    from sources\r\n\r\n),\r\n\r\n-- Step 2: Count the number of periods in FirstSegment\r\ncampaign_with_count as (\r\n\r\n    select *,\r\n           len(FirstSegment) - len(replace(FirstSegment, '.', '')) as PeriodCount\r\n    from base_campaign\r\n\r\n),\r\n\r\n-- Step 3: Convert FirstSegment into XML to enable splitting\r\ncampaign_xml as (\r\n\r\n    select *,\r\n           cast('<i>' + \r\n\t\t\t replace(\r\n\t\t\t\t replace(\r\n\t\t\t\t\t replace(\r\n\t\t\t\t\t\t replace(FirstSegment, '&', '&amp;'), \r\n\t\t\t\t\t '<', '&lt;'), \r\n\t\t\t\t '>', '&gt;'), \r\n\t\t\t '.', '</i><i>') \r\n\t\t\t + '</i>' as xml) as XMLParts\r\n    from campaign_with_count\r\n\r\n),\r\n\r\n-- Step 4: Parse out each dot-delimited part from the XML\r\nparsed_campaign as (\r\n\r\n    select \r\n      Date, AdName, AdSet, Campaign, TradingPartnerId, Platform, Channel, Type,\r\n      Spend, ClickThrough, Impressions, Conversions, SalesDollars, SalesUnits,\r\n      XMLParts, PeriodCount, FirstSegment,\r\n      XMLParts.value('(/i)[1]', 'varchar(100)') as Part1,  -- Expecting the brand letter (J, T, V)\r\n      XMLParts.value('(/i)[2]', 'varchar(100)') as Part2,\r\n      XMLParts.value('(/i)[3]', 'varchar(100)') as Part3,  -- Code for Objective mapping\r\n      XMLParts.value('(/i)[4]', 'varchar(100)') as Part4,  -- Code for LandingPage mapping\r\n      XMLParts.value('(/i)[5]', 'varchar(100)') as Part5,  -- (Optional) Channel from parsed string if needed\r\n      XMLParts.value('(/i)[6]', 'varchar(100)') as Part6,  -- Class1\r\n      XMLParts.value('(/i)[7]', 'varchar(100)') as Part7,  -- Class2\r\n      XMLParts.value('(/i)[8]', 'varchar(100)') as Part8,  -- Class3\r\n      XMLParts.value('(/i)[9]', 'varchar(100)') as Part9   -- Extra (not used)\r\n    from campaign_xml\r\n\r\n),\r\n\r\n-- Step 5: Apply your mapping rules if PeriodCount = 8 (i.e. 9 parts)\r\ncomplete_parse as (\r\n\r\n    select\r\n      p.*,\r\n      -- Map the brand letter from Part1 to the full brand name; this will be used to join to dim_brand for BrandId\r\n      case \r\n        when PeriodCount = 8 then \r\n          case p.Part1\r\n              when 'J' then 'Journee'\r\n              when 'T' then 'Taft'\r\n              when 'V' then 'Vance'\r\n              when 'B' then 'Birdies'\r\n              else null\r\n          end\r\n        else null\r\n      end as BrandMapping,\r\n      -- Map Part3 to Objective using your defined codes\r\n      case \r\n        when PeriodCount = 8 then\r\n          case p.Part3\r\n              when 'TOP' then 'Top Funnel / Awareness'\r\n              when 'MID' then 'Mid Funnel'\r\n              when 'BOT' then 'Bottom Funnel / Conversions'\r\n              when 'RTA' then 'Retargeting'\r\n              when 'PRO' then 'Prospecting'\r\n              when 'RET' then 'Retention'\r\n              when 'NSE' then 'NBSearch'\r\n              when 'BSE' then 'BrandSearch'\r\n              when 'PMA' then 'PMax'\r\n              when 'BSH' then 'BrandShopping'\r\n              when 'NSH' then 'NBShopping'\r\n              else null\r\n          end\r\n        else null\r\n      end as ObjectiveMapped,\r\n      -- Map Part4 to LandingPage using your provided options\r\n      case \r\n        when PeriodCount = 8 then \r\n          case p.Part4\r\n              when 'Brand'   then 'Brand Page'\r\n              when 'Product' then 'Product Page'\r\n              when 'DPA'     then 'Dynamic Product'\r\n              when 'SPA'     then 'Sponsored Product'\r\n              when 'CAT'     then 'Category/Collection'\r\n              else null\r\n          end\r\n        else null\r\n      end as LandingPageMapped,\r\n      -- Directly assign Class1, Class2, Class3 from parts 6, 7, and 8 respectively (if PeriodCount = 8)\r\n      case when PeriodCount = 8 then p.Part6 else null end as ParsedClass1,\r\n      case when PeriodCount = 8 then p.Part7 else null end as ParsedClass2,\r\n      case when PeriodCount = 8 then p.Part8 else null end as ParsedClass3\r\n    from parsed_campaign p\r\n\r\n)\r\n\r\nselect * from complete_parse;", "language": "sql", "refs": [{"name": "int_marketing__SourcesUnioned", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.int_marketing__SourcesUnioned"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\intermediate\\marketing\\int_marketing__SourcesMapped.sql", "compiled": true, "compiled_code": "with\n\nsources as (\n    select * from \"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_marketing__SourcesUnioned\"\n),\n\n-- THIS IS WHERE WE WILL JOIN THE MAPPING TABLE AND FILL IN EMPTY VALUES\n\n-- Step 1: Extract the first token from Campaign (up to the first space, or the whole Campaign)\nbase_campaign as (\n\n    select \n        *,\n        case \n            when charindex(' ', Campaign) > 0 \n                then left(Campaign, charindex(' ', Campaign) - 1)\n            else Campaign\n        end as FirstSegment\n    from sources\n\n),\n\n-- Step 2: Count the number of periods in FirstSegment\ncampaign_with_count as (\n\n    select *,\n           len(FirstSegment) - len(replace(FirstSegment, '.', '')) as PeriodCount\n    from base_campaign\n\n),\n\n-- Step 3: Convert FirstSegment into XML to enable splitting\ncampaign_xml as (\n\n    select *,\n           cast('<i>' + \n\t\t\t replace(\n\t\t\t\t replace(\n\t\t\t\t\t replace(\n\t\t\t\t\t\t replace(FirstSegment, '&', '&amp;'), \n\t\t\t\t\t '<', '&lt;'), \n\t\t\t\t '>', '&gt;'), \n\t\t\t '.', '</i><i>') \n\t\t\t + '</i>' as xml) as XMLParts\n    from campaign_with_count\n\n),\n\n-- Step 4: Parse out each dot-delimited part from the XML\nparsed_campaign as (\n\n    select \n      Date, AdName, AdSet, Campaign, TradingPartnerId, Platform, Channel, Type,\n      Spend, ClickThrough, Impressions, Conversions, SalesDollars, SalesUnits,\n      XMLParts, PeriodCount, FirstSegment,\n      XMLParts.value('(/i)[1]', 'varchar(100)') as Part1,  -- Expecting the brand letter (J, T, V)\n      XMLParts.value('(/i)[2]', 'varchar(100)') as Part2,\n      XMLParts.value('(/i)[3]', 'varchar(100)') as Part3,  -- Code for Objective mapping\n      XMLParts.value('(/i)[4]', 'varchar(100)') as Part4,  -- Code for LandingPage mapping\n      XMLParts.value('(/i)[5]', 'varchar(100)') as Part5,  -- (Optional) Channel from parsed string if needed\n      XMLParts.value('(/i)[6]', 'varchar(100)') as Part6,  -- Class1\n      XMLParts.value('(/i)[7]', 'varchar(100)') as Part7,  -- Class2\n      XMLParts.value('(/i)[8]', 'varchar(100)') as Part8,  -- Class3\n      XMLParts.value('(/i)[9]', 'varchar(100)') as Part9   -- Extra (not used)\n    from campaign_xml\n\n),\n\n-- Step 5: Apply your mapping rules if PeriodCount = 8 (i.e. 9 parts)\ncomplete_parse as (\n\n    select\n      p.*,\n      -- Map the brand letter from Part1 to the full brand name; this will be used to join to dim_brand for BrandId\n      case \n        when PeriodCount = 8 then \n          case p.Part1\n              when 'J' then 'Journee'\n              when 'T' then 'Taft'\n              when 'V' then 'Vance'\n              when 'B' then 'Birdies'\n              else null\n          end\n        else null\n      end as BrandMapping,\n      -- Map Part3 to Objective using your defined codes\n      case \n        when PeriodCount = 8 then\n          case p.Part3\n              when 'TOP' then 'Top Funnel / Awareness'\n              when 'MID' then 'Mid Funnel'\n              when 'BOT' then 'Bottom Funnel / Conversions'\n              when 'RTA' then 'Retargeting'\n              when 'PRO' then 'Prospecting'\n              when 'RET' then 'Retention'\n              when 'NSE' then 'NBSearch'\n              when 'BSE' then 'BrandSearch'\n              when 'PMA' then 'PMax'\n              when 'BSH' then 'BrandShopping'\n              when 'NSH' then 'NBShopping'\n              else null\n          end\n        else null\n      end as ObjectiveMapped,\n      -- Map Part4 to LandingPage using your provided options\n      case \n        when PeriodCount = 8 then \n          case p.Part4\n              when 'Brand'   then 'Brand Page'\n              when 'Product' then 'Product Page'\n              when 'DPA'     then 'Dynamic Product'\n              when 'SPA'     then 'Sponsored Product'\n              when 'CAT'     then 'Category/Collection'\n              else null\n          end\n        else null\n      end as LandingPageMapped,\n      -- Directly assign Class1, Class2, Class3 from parts 6, 7, and 8 respectively (if PeriodCount = 8)\n      case when PeriodCount = 8 then p.Part6 else null end as ParsedClass1,\n      case when PeriodCount = 8 then p.Part7 else null end as ParsedClass2,\n      case when PeriodCount = 8 then p.Part8 else null end as ParsedClass3\n    from parsed_campaign p\n\n)\n\nselect * from complete_parse;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.int_marketing__SourcesUnioned": {"database": "KNSDevDbt", "schema": "dbt_prod_intermediate", "name": "int_marketing__SourcesUnioned", "resource_type": "model", "package_name": "kns_dbt", "path": "intermediate\\marketing\\int_marketing__SourcesUnioned.sql", "original_file_path": "models\\intermediate\\marketing\\int_marketing__SourcesUnioned.sql", "unique_id": "model.kns_dbt.int_marketing__SourcesUnioned", "fqn": ["kns_dbt", "intermediate", "marketing", "int_marketing__SourcesUnioned"], "alias": "int_marketing__SourcesUnioned", "checksum": {"name": "sha256", "checksum": "9fc055712ae1f2d68f192bf1b498b83b2bc75b456dfc8879e082f3e62cdd2f07"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This view is meant to union all marketing sources together. All tables have the same columns and types here.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\intermediate\\marketing\\_marketing__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_intermediate", "materialized": "view"}, "created_at": 1748168169.6862774, "relation_name": "\"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_marketing__SourcesUnioned\"", "raw_code": "with \r\n\r\ncriteo as (\r\n\r\n    select \r\n        Date,\r\n        'Criteo-Ad' as AdName,\r\n        'Criteo-Ad-Set' as AdSet,\r\n        CampaignName as Campaign,\r\n        tp.TradingPartnerId as TradingPartnerId,\r\n        'Criteo' as Platform,\r\n        null as Channel,\r\n        null as Type,\r\n        null as Brand,\r\n        Spend,\r\n        ctr as ClickThrough,\r\n        impressions as Impressions,\r\n        ctr * impressions as Conversions,\r\n        attributedSales as SalesDollars,\r\n        attributedUnits as SalesUnits\r\n    from {{ ref('stg_marketing__Criteo') }} c\r\n    join {{ ref('stg_deposco__TradingPartner') }} tp\r\n        on c.retailerName = tp.Name\r\n    where Spend > 0\r\n\r\n),\r\n\r\nnorthbeam as (\r\n    select \r\n        Date,\r\n        ad_name as AdName,\r\n        adset_name as AdSet,\r\n        campaign_name as Campaign,\r\n        null as TradingPartnerId,\r\n        'Northbeam' as Platform,\r\n        breakdown_platform_northbeam as Channel,\r\n        null as Type,\r\n        null as Brand,\r\n        Spend,\r\n        --visits / nullif(imprs, 0) as ClickThrough, CHECK IF CTR MEANS WHAT IT ALSO MEANS IN CRITEO\r\n        ctr as ClickThrough,\r\n        imprs as Impressions,\r\n        --visits * 1 / nullif(imprs, 0) * imprs as Conversions,\r\n        ctr * imprs as Conversions,\r\n        attributed_rev as SalesDollars,\r\n        null as SalesUnits\r\n    from {{ ref('stg_marketing__Northbeam') }} \r\n    where attribution_model = 'Clicks and views'\r\n        and attribution_window = '7'\r\n),\r\n\r\npromoteiq as (\r\n    select \r\n        Date,\r\n        'PromoteIQ-Ad' as AdName,\r\n        'PromoteIQ-Ad-Set' as AdSet,\r\n        [Campaign Name] as Campaign,\r\n        13 as TradingPartnerId,\r\n        'PromoteIQ' as Platform,\r\n        null as Channel,\r\n        null as Type,\r\n        null as Brand,\r\n        Spend,\r\n        CTR as ClickThrough,\r\n        Impressions,\r\n        CTR * Impressions as Conversions,\r\n        [Total Sales] as SalesDollars,\r\n        [Units Sold] as SalesUnits\r\n    from {{ ref('stg_marketing__PromoteIq') }} p\r\n    where ([Vendor Name] like '%JOURNEE%' or [Vendor Name] like '%VANCE%')\r\n        and p.[Campaign Name] is not null\r\n),\r\n\r\nsymbiosys as (\r\n    select \r\n        Date,\r\n        'Symbiosys-Ad' as AdName,\r\n        'Symbiosys-Ad-Set' as AdSet,\r\n        Campaign as Campaign,\r\n        3 as TradingPartnerId,\r\n        'Symbiosys' as Platform,\r\n        Channel,\r\n        null as Type,\r\n        null as Brand,\r\n        Spend,\r\n        null as ClickThrough,\r\n        null as Impressions,\r\n        null as Conversions,\r\n        Sales as SalesDollars,\r\n        [Units Sold] as SalesUnits\r\n    from {{ ref('stg_marketing__Symbiosys') }}\r\n),\r\n\r\ncoop_campaign as (\r\n    select \r\n        cal.Date,\r\n        'Co-Op-Campaigns-Ad' as AdName,\r\n        'Co-Op-Campaigns-Ad-Set' as AdSet,\r\n        FrontCode as Campaign,\r\n        cast(substring(substring(trim(BackCode), len(trim(BackCode)) - 20, 21), 1, 3) as int) as TradingPartnerId,\r\n        'Co-Op Campaigns' as Platform,\r\n        null as Channel,\r\n        null as Type,\r\n        null as Brand,\r\n        Spend / (\r\n            select count(*) \r\n            from {{ ref('stg_dbo__Calendar') }} cal2 \r\n            where cal2.Date >= co.StartAt and cal2.Date <= co.EndAt\r\n        ) as Spend,\r\n        null as ClickThrough,\r\n        null as Impressions,\r\n        null as Conversions,\r\n        null as SalesDollars,\r\n        null as SalesUnits\r\n    from {{ ref('stg_marketing__CoOpCampaign') }} co\r\n    join {{ ref('stg_dbo__Calendar') }} cal\r\n        on cal.Date >= co.StartAt and cal.Date <= co.EndAt\r\n),\r\n\r\nroundel as (\r\n\r\n    select \r\n        Date,\r\n        'Roundel-Ad' as AdName,\r\n        'Roundel-Ad-Set' as AdSet,\r\n        campaignName as Campaign,\r\n        62 as TradingPartnerId,\r\n        'Roundel' as Platform,\r\n        null as Channel,\r\n        null as Type,\r\n        null as Brand,\r\n        Spend,\r\n        clicks / NULLIF(Impressions, 0) as ClickThrough, --CHECK THIS LOGIC\r\n        Impressions,\r\n        clicks as Conversions,\r\n        attributedSales as SalesDollars,\r\n        attributedUnits as SalesUnits\r\n    from {{ ref('stg_marketing__Roundel') }}\r\n\r\n),\r\n\r\nsources_unioned as (\r\n    select * from northbeam\r\n    union all\r\n    select * from northbeam\r\n    union all\r\n    select * from promoteiq\r\n    union all\r\n    select * from symbiosys\r\n    union all\r\n    select * from coop_campaign\r\n    union all\r\n    select * from roundel\r\n)\r\n\r\nselect * from sources_unioned;", "language": "sql", "refs": [{"name": "stg_marketing__Criteo", "package": null, "version": null}, {"name": "stg_deposco__TradingPartner", "package": null, "version": null}, {"name": "stg_marketing__Northbeam", "package": null, "version": null}, {"name": "stg_marketing__PromoteIq", "package": null, "version": null}, {"name": "stg_marketing__Symbiosys", "package": null, "version": null}, {"name": "stg_dbo__Calendar", "package": null, "version": null}, {"name": "stg_marketing__CoOpCampaign", "package": null, "version": null}, {"name": "stg_dbo__Calendar", "package": null, "version": null}, {"name": "stg_marketing__Roundel", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.stg_marketing__Criteo", "model.kns_dbt.stg_deposco__TradingPartner", "model.kns_dbt.stg_marketing__Northbeam", "model.kns_dbt.stg_marketing__PromoteIq", "model.kns_dbt.stg_marketing__Symbiosys", "model.kns_dbt.stg_dbo__Calendar", "model.kns_dbt.stg_marketing__CoOpCampaign", "model.kns_dbt.stg_marketing__Roundel"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\intermediate\\marketing\\int_marketing__SourcesUnioned.sql", "compiled": true, "compiled_code": "with \n\ncriteo as (\n\n    select \n        Date,\n        'Criteo-Ad' as AdName,\n        'Criteo-Ad-Set' as AdSet,\n        CampaignName as Campaign,\n        tp.TradingPartnerId as TradingPartnerId,\n        'Criteo' as Platform,\n        null as Channel,\n        null as Type,\n        null as Brand,\n        Spend,\n        ctr as ClickThrough,\n        impressions as Impressions,\n        ctr * impressions as Conversions,\n        attributedSales as SalesDollars,\n        attributedUnits as SalesUnits\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__Criteo\" c\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__TradingPartner\" tp\n        on c.retailerName = tp.Name\n    where Spend > 0\n\n),\n\nnorthbeam as (\n    select \n        Date,\n        ad_name as AdName,\n        adset_name as AdSet,\n        campaign_name as Campaign,\n        null as TradingPartnerId,\n        'Northbeam' as Platform,\n        breakdown_platform_northbeam as Channel,\n        null as Type,\n        null as Brand,\n        Spend,\n        --visits / nullif(imprs, 0) as ClickThrough, CHECK IF CTR MEANS WHAT IT ALSO MEANS IN CRITEO\n        ctr as ClickThrough,\n        imprs as Impressions,\n        --visits * 1 / nullif(imprs, 0) * imprs as Conversions,\n        ctr * imprs as Conversions,\n        attributed_rev as SalesDollars,\n        null as SalesUnits\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__Northbeam\" \n    where attribution_model = 'Clicks and views'\n        and attribution_window = '7'\n),\n\npromoteiq as (\n    select \n        Date,\n        'PromoteIQ-Ad' as AdName,\n        'PromoteIQ-Ad-Set' as AdSet,\n        [Campaign Name] as Campaign,\n        13 as TradingPartnerId,\n        'PromoteIQ' as Platform,\n        null as Channel,\n        null as Type,\n        null as Brand,\n        Spend,\n        CTR as ClickThrough,\n        Impressions,\n        CTR * Impressions as Conversions,\n        [Total Sales] as SalesDollars,\n        [Units Sold] as SalesUnits\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__PromoteIq\" p\n    where ([Vendor Name] like '%JOURNEE%' or [Vendor Name] like '%VANCE%')\n        and p.[Campaign Name] is not null\n),\n\nsymbiosys as (\n    select \n        Date,\n        'Symbiosys-Ad' as AdName,\n        'Symbiosys-Ad-Set' as AdSet,\n        Campaign as Campaign,\n        3 as TradingPartnerId,\n        'Symbiosys' as Platform,\n        Channel,\n        null as Type,\n        null as Brand,\n        Spend,\n        null as ClickThrough,\n        null as Impressions,\n        null as Conversions,\n        Sales as SalesDollars,\n        [Units Sold] as SalesUnits\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__Symbiosys\"\n),\n\ncoop_campaign as (\n    select \n        cal.Date,\n        'Co-Op-Campaigns-Ad' as AdName,\n        'Co-Op-Campaigns-Ad-Set' as AdSet,\n        FrontCode as Campaign,\n        cast(substring(substring(trim(BackCode), len(trim(BackCode)) - 20, 21), 1, 3) as int) as TradingPartnerId,\n        'Co-Op Campaigns' as Platform,\n        null as Channel,\n        null as Type,\n        null as Brand,\n        Spend / (\n            select count(*) \n            from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_dbo__Calendar\" cal2 \n            where cal2.Date >= co.StartAt and cal2.Date <= co.EndAt\n        ) as Spend,\n        null as ClickThrough,\n        null as Impressions,\n        null as Conversions,\n        null as SalesDollars,\n        null as SalesUnits\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__CoOpCampaign\" co\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_dbo__Calendar\" cal\n        on cal.Date >= co.StartAt and cal.Date <= co.EndAt\n),\n\nroundel as (\n\n    select \n        Date,\n        'Roundel-Ad' as AdName,\n        'Roundel-Ad-Set' as AdSet,\n        campaignName as Campaign,\n        62 as TradingPartnerId,\n        'Roundel' as Platform,\n        null as Channel,\n        null as Type,\n        null as Brand,\n        Spend,\n        clicks / NULLIF(Impressions, 0) as ClickThrough, --CHECK THIS LOGIC\n        Impressions,\n        clicks as Conversions,\n        attributedSales as SalesDollars,\n        attributedUnits as SalesUnits\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__Roundel\"\n\n),\n\nsources_unioned as (\n    select * from northbeam\n    union all\n    select * from northbeam\n    union all\n    select * from promoteiq\n    union all\n    select * from symbiosys\n    union all\n    select * from coop_campaign\n    union all\n    select * from roundel\n)\n\nselect * from sources_unioned;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.int_sales__CurrentStock": {"database": "KNSDevDbt", "schema": "dbt_prod_intermediate", "name": "int_sales__CurrentStock", "resource_type": "model", "package_name": "kns_dbt", "path": "intermediate\\sales\\int_sales__CurrentStock.sql", "original_file_path": "models\\intermediate\\sales\\int_sales__CurrentStock.sql", "unique_id": "model.kns_dbt.int_sales__CurrentStock", "fqn": ["kns_dbt", "intermediate", "sales", "int_sales__CurrentStock"], "alias": "int_sales__CurrentStock", "checksum": {"name": "sha256", "checksum": "603e6c0c009c563bcb5ebc97bedaf4de5a0329cfa0dff6fbbf53b2984330e2e3"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\intermediate\\sales\\_sales__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_intermediate", "materialized": "view"}, "created_at": 1748168169.6862774, "relation_name": "\"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__CurrentStock\"", "raw_code": "with\r\n\r\nday_start as (\r\n    select \r\n        convert(datetime, convert(date, sysdatetimeoffset() at time zone 'mountain standard time')) \r\n        at time zone 'mountain standard time' \r\n        at time zone 'utc' as day_start\r\n),\r\n\r\norder_header as (\r\n    select * from {{ ref('stg_deposco__OrderHeader') }}\r\n),\r\n\r\norder_line as (\r\n    select * from {{ ref('stg_deposco__OrderLine') }}\r\n),\r\n\r\npack as (\r\n    select * from {{ ref('stg_deposco__Pack') }}\r\n),\r\n\r\nstock_unit as (\r\n    select * from {{ ref('stg_deposco__StockUnit') }}\r\n),\r\n\r\nstock_unit_audit_history as (\r\n    select * from {{ ref('stg_deposco__StockUnitAuditHistory') }}\r\n),\r\n\r\nitem as (\r\n    select * from {{ ref('stg_deposco__Item') }}\r\n),\r\n\r\nordered as (\r\n    select\r\n        ol.ItemId,\r\n        coalesce(sum(ol.OrderPackQuantity * p2.Quantity), 0) as TotalOrdered\r\n    from order_line ol\r\n    join pack p2 on ol.PackId = p2.PackId\r\n    join order_header oh on ol.OrderHeaderId = oh.OrderHeaderId\r\n    where oh.ShippingStatus != 20\r\n        and oh.CurrentStatus not in ('Hold', 'Canceled', 'Voided')\r\n        and oh.CreatedDate >= dateadd(year, -1, \r\n        cast(sysdatetimeoffset() at time zone 'mountain standard time' as datetime))\r\n        and oh.Type = 'Sales Order'\r\n    group by ol.ItemId\r\n),\r\n\r\nstock_unit_unioned as (\r\n    select * from stock_unit\r\n    union all\r\n    select * from stock_unit_audit_history\r\n),\r\n\r\ncurrent_stock as (\r\n    select\r\n        s.ItemId,\r\n        coalesce(sum(s.Quantity * p.Quantity), 0) as Quantity,\r\n        case \r\n            when coalesce(sum(s.Quantity * p.Quantity), 0) - coalesce(o.TotalOrdered, 0) < 0\r\n                then 0\r\n            else coalesce(sum(s.Quantity * p.Quantity), 0) - coalesce(o.TotalOrdered, 0)\r\n        end as AvailableQuantity\r\n    from stock_unit_unioned s\r\n    join item i on s.ItemId = i.ItemId\r\n    join pack p on s.PackId = p.PackId\r\n    left join ordered o on o.ItemId = s.ItemId\r\n    cross join day_start                      \r\n    where i.IntangibleItemFlag = 0\r\n      and s.PeriodStart <= day_start.day_start\r\n      and s.PeriodEnd >= day_start.day_start\r\n      and coalesce(i.ClassType, '') != 'Supplies'\r\n    group by s.ItemId, o.TotalOrdered\r\n)\r\n\r\nselect * from current_stock", "language": "sql", "refs": [{"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__OrderLine", "package": null, "version": null}, {"name": "stg_deposco__Pack", "package": null, "version": null}, {"name": "stg_deposco__StockUnit", "package": null, "version": null}, {"name": "stg_deposco__StockUnitAuditHistory", "package": null, "version": null}, {"name": "stg_deposco__Item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.stg_deposco__OrderHeader", "model.kns_dbt.stg_deposco__OrderLine", "model.kns_dbt.stg_deposco__Pack", "model.kns_dbt.stg_deposco__StockUnit", "model.kns_dbt.stg_deposco__StockUnitAuditHistory", "model.kns_dbt.stg_deposco__Item"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\intermediate\\sales\\int_sales__CurrentStock.sql", "compiled": true, "compiled_code": "with\n\nday_start as (\n    select \n        convert(datetime, convert(date, sysdatetimeoffset() at time zone 'mountain standard time')) \n        at time zone 'mountain standard time' \n        at time zone 'utc' as day_start\n),\n\norder_header as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\"\n),\n\norder_line as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\"\n),\n\npack as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Pack\"\n),\n\nstock_unit as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__StockUnit\"\n),\n\nstock_unit_audit_history as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__StockUnitAuditHistory\"\n),\n\nitem as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Item\"\n),\n\nordered as (\n    select\n        ol.ItemId,\n        coalesce(sum(ol.OrderPackQuantity * p2.Quantity), 0) as TotalOrdered\n    from order_line ol\n    join pack p2 on ol.PackId = p2.PackId\n    join order_header oh on ol.OrderHeaderId = oh.OrderHeaderId\n    where oh.ShippingStatus != 20\n        and oh.CurrentStatus not in ('Hold', 'Canceled', 'Voided')\n        and oh.CreatedDate >= dateadd(year, -1, \n        cast(sysdatetimeoffset() at time zone 'mountain standard time' as datetime))\n        and oh.Type = 'Sales Order'\n    group by ol.ItemId\n),\n\nstock_unit_unioned as (\n    select * from stock_unit\n    union all\n    select * from stock_unit_audit_history\n),\n\ncurrent_stock as (\n    select\n        s.ItemId,\n        coalesce(sum(s.Quantity * p.Quantity), 0) as Quantity,\n        case \n            when coalesce(sum(s.Quantity * p.Quantity), 0) - coalesce(o.TotalOrdered, 0) < 0\n                then 0\n            else coalesce(sum(s.Quantity * p.Quantity), 0) - coalesce(o.TotalOrdered, 0)\n        end as AvailableQuantity\n    from stock_unit_unioned s\n    join item i on s.ItemId = i.ItemId\n    join pack p on s.PackId = p.PackId\n    left join ordered o on o.ItemId = s.ItemId\n    cross join day_start                      \n    where i.IntangibleItemFlag = 0\n      and s.PeriodStart <= day_start.day_start\n      and s.PeriodEnd >= day_start.day_start\n      and coalesce(i.ClassType, '') != 'Supplies'\n    group by s.ItemId, o.TotalOrdered\n)\n\nselect * from current_stock", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.int_sales__DimItemPrep": {"database": "KNSDevDbt", "schema": "dbt_prod_intermediate", "name": "int_sales__DimItemPrep", "resource_type": "model", "package_name": "kns_dbt", "path": "intermediate\\sales\\int_sales__DimItemPrep.sql", "original_file_path": "models\\intermediate\\sales\\int_sales__DimItemPrep.sql", "unique_id": "model.kns_dbt.int_sales__DimItemPrep", "fqn": ["kns_dbt", "intermediate", "sales", "int_sales__DimItemPrep"], "alias": "int_sales__DimItemPrep", "checksum": {"name": "sha256", "checksum": "17675cda2446fb50bd4c96abf9af2199444ca9e9d2b891eae60297a01bde4935"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\intermediate\\sales\\_sales__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_intermediate", "materialized": "view"}, "created_at": 1748168169.6862774, "relation_name": "\"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__DimItemPrep\"", "raw_code": "with historical as (\r\n    select * from {{ ref('stg_kns__HistoricalDimItem') }}\r\n),\r\n\r\nitem as (\r\n    select * from {{ ref('stg_deposco__Item') }}\r\n),\r\n\r\nitem_cogs as (\r\n    select * from {{ ref('stg_netsuite__KnsItemCogs') }}\r\n),\r\n\r\nvariants as (\r\n    select * from {{ ref('stg_products__Variant') }}\r\n),\r\n\r\nstyles as (\r\n    select * from {{ ref('stg_products__Style') }}\r\n),\r\n\r\nbrands as (\r\n    select * from {{ ref('stg_products__Brand') }}\r\n),\r\n\r\nsubclasses as (\r\n    select * from {{ ref('stg_products__Subclass') }}\r\n),\r\n\r\ncatalog as (\r\n    select * from {{ ref('stg_products__Catalog') }}\r\n),\r\n\r\nproduct as (\r\n    select\r\n        v.Number,\r\n        v.Status,\r\n        v.ShoeWidth,\r\n        v.CalfWidth,\r\n        v.Parent,\r\n        v.ClosureType,\r\n        v.HeelType,\r\n        v.StyleType,\r\n        v.SizeRun,\r\n        v.ColorName as Color,\r\n        v.ColorClass,\r\n        v.IsAnaplanActive as Anaplan,\r\n        month(v.SellOutTargetAt) as SellOutTargetDateMonth,\r\n        year(v.SellOutTargetAt) as SellOutTargetDateYear,\r\n        v.PlannedArrivalAt as PlannedArrivalDateMonth,\r\n        v.FirstSalesDateAt as FirstSalesDate,\r\n        v.MSRP,\r\n        v.IsSupplies,\r\n        v.IsIntangible,\r\n        v.DirectSourcingModel,\r\n        v.SellingStatus,\r\n        s.Name as Style,\r\n        c.Name as Category,\r\n        c.BrandId,\r\n        sc.Name as Subclass,\r\n        case\r\n            when sc.Class is null or sc.Class in ('', '*No Category*', 'SHIPPING PROTECTION')\r\n            then 'OTHER'\r\n            else sc.Class\r\n        end as Class,\r\n        s.Vendor,\r\n        s.VendorSku,\r\n        s.Gender,\r\n        s.Season,\r\n        s.CaseQuantity,\r\n        s.SeasonBudget,\r\n        null as Size,\r\n        b.Name as Brand,\r\n        b.Division\r\n    from variants v\r\n    left join styles s on v.StyleId = s.StyleId\r\n    left join subclasses sc on s.SubclassId = sc.SubclassId\r\n    left join catalog c on s.CatalogId = c.CatalogId\r\n    left join brands b on c.BrandId = b.BrandId\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        i.ItemId,\r\n        p.[Number],\r\n        h.Category,\r\n        h.Subcategory,\r\n        coalesce(nullif(p.Brand, ''), '*No Catalog*') as Catalog,\r\n        coalesce(nullif(p.Vendor, ''), '*No Vendor*') as Vendor,\r\n        coalesce(nullif(p.Gender, ''), '*No Gender*') as Gender,\r\n        case\r\n            when i.[Number] in ('Order Protection', 'Navidium Shipping Protection') then 'Shipping Protection'\r\n            else coalesce(nullif(p.Parent , ''), '*No Parent*')\r\n        end as Parent,\r\n        coalesce(nullif(p.Color, ''), '*No Color*') as Color,\r\n        coalesce(nullif(p.Season, ''), '*No Season*') as Season,\r\n        coalesce(nullif(p.Size, ''), '*No Size*') as Size,\r\n        i.UpdatedDate as UpdatedAt,\r\n        h.FirstReceivedDate,\r\n        year(p.FirstSalesDate) as IntroductionYear,\r\n        h.CloseOut,\r\n        h.CloseOutDate,\r\n        h.ToeStyle,\r\n        p.ClosureType,\r\n        h.HeelType,\r\n        p.StyleType,\r\n        p.SizeRun,\r\n        h.LiquidationCloseOut,\r\n        p.CaseQuantity,\r\n        p.Anaplan,\r\n        h.SoftCloseOut,\r\n        ic.cost as Cost,\r\n        p.Style,\r\n        h.MasterCategory,\r\n        p.Class,\r\n        p.Subclass,\r\n        p.VendorSKU,\r\n        p.SellOutTargetDateMonth,\r\n        p.SellOutTargetDateYear,\r\n        p.PlannedArrivalDateMonth,\r\n        p.FirstSalesDate,\r\n        case \r\n            when p.Number is null and p.Status = 'Active' then 'Terminated'\r\n            else p.Status\r\n        end as Status,\r\n        p.CalfWidth,\r\n        '' as BrandFinancialEntity, -- WHY DO WE HAVE THIS?\r\n        p.ShoeWidth,\r\n        p.ColorClass,\r\n        p.IsIntangible,\r\n        p.MSRP,\r\n        p.Division,\r\n        p.IsSupplies,\r\n        coalesce(p.BrandId, 0) as BrandId,\r\n        p.SeasonBudget,\r\n        p.SellingStatus\r\n    from product p \r\n    left join item i on p.Number = i.[Number]\r\n    left join historical h on h.ItemId = i.ItemId\r\n    left join item_cogs ic on ic.ItemId=i.ItemId\r\n    where i.[Number] is not null\r\n    and (i.ClassType not in ('Girls''', 'Boys''', 'Gloves', 'Inventory', '') or i.ClassType is null)\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "stg_kns__HistoricalDimItem", "package": null, "version": null}, {"name": "stg_deposco__Item", "package": null, "version": null}, {"name": "stg_netsuite__KnsItemCogs", "package": null, "version": null}, {"name": "stg_products__Variant", "package": null, "version": null}, {"name": "stg_products__Style", "package": null, "version": null}, {"name": "stg_products__Brand", "package": null, "version": null}, {"name": "stg_products__Subclass", "package": null, "version": null}, {"name": "stg_products__Catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.stg_kns__HistoricalDimItem", "model.kns_dbt.stg_deposco__Item", "model.kns_dbt.stg_netsuite__KnsItemCogs", "model.kns_dbt.stg_products__Variant", "model.kns_dbt.stg_products__Style", "model.kns_dbt.stg_products__Brand", "model.kns_dbt.stg_products__Subclass", "model.kns_dbt.stg_products__Catalog"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\intermediate\\sales\\int_sales__DimItemPrep.sql", "compiled": true, "compiled_code": "with historical as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__HistoricalDimItem\"\n),\n\nitem as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Item\"\n),\n\nitem_cogs as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_netsuite__KnsItemCogs\"\n),\n\nvariants as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Variant\"\n),\n\nstyles as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Style\"\n),\n\nbrands as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Brand\"\n),\n\nsubclasses as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Subclass\"\n),\n\ncatalog as (\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Catalog\"\n),\n\nproduct as (\n    select\n        v.Number,\n        v.Status,\n        v.ShoeWidth,\n        v.CalfWidth,\n        v.Parent,\n        v.ClosureType,\n        v.HeelType,\n        v.StyleType,\n        v.SizeRun,\n        v.ColorName as Color,\n        v.ColorClass,\n        v.IsAnaplanActive as Anaplan,\n        month(v.SellOutTargetAt) as SellOutTargetDateMonth,\n        year(v.SellOutTargetAt) as SellOutTargetDateYear,\n        v.PlannedArrivalAt as PlannedArrivalDateMonth,\n        v.FirstSalesDateAt as FirstSalesDate,\n        v.MSRP,\n        v.IsSupplies,\n        v.IsIntangible,\n        v.DirectSourcingModel,\n        v.SellingStatus,\n        s.Name as Style,\n        c.Name as Category,\n        c.BrandId,\n        sc.Name as Subclass,\n        case\n            when sc.Class is null or sc.Class in ('', '*No Category*', 'SHIPPING PROTECTION')\n            then 'OTHER'\n            else sc.Class\n        end as Class,\n        s.Vendor,\n        s.VendorSku,\n        s.Gender,\n        s.Season,\n        s.CaseQuantity,\n        s.SeasonBudget,\n        null as Size,\n        b.Name as Brand,\n        b.Division\n    from variants v\n    left join styles s on v.StyleId = s.StyleId\n    left join subclasses sc on s.SubclassId = sc.SubclassId\n    left join catalog c on s.CatalogId = c.CatalogId\n    left join brands b on c.BrandId = b.BrandId\n),\n\nfinal as (\n\n    select\n        i.ItemId,\n        p.[Number],\n        h.Category,\n        h.Subcategory,\n        coalesce(nullif(p.Brand, ''), '*No Catalog*') as Catalog,\n        coalesce(nullif(p.Vendor, ''), '*No Vendor*') as Vendor,\n        coalesce(nullif(p.Gender, ''), '*No Gender*') as Gender,\n        case\n            when i.[Number] in ('Order Protection', 'Navidium Shipping Protection') then 'Shipping Protection'\n            else coalesce(nullif(p.Parent , ''), '*No Parent*')\n        end as Parent,\n        coalesce(nullif(p.Color, ''), '*No Color*') as Color,\n        coalesce(nullif(p.Season, ''), '*No Season*') as Season,\n        coalesce(nullif(p.Size, ''), '*No Size*') as Size,\n        i.UpdatedDate as UpdatedAt,\n        h.FirstReceivedDate,\n        year(p.FirstSalesDate) as IntroductionYear,\n        h.CloseOut,\n        h.CloseOutDate,\n        h.ToeStyle,\n        p.ClosureType,\n        h.HeelType,\n        p.StyleType,\n        p.SizeRun,\n        h.LiquidationCloseOut,\n        p.CaseQuantity,\n        p.Anaplan,\n        h.SoftCloseOut,\n        ic.cost as Cost,\n        p.Style,\n        h.MasterCategory,\n        p.Class,\n        p.Subclass,\n        p.VendorSKU,\n        p.SellOutTargetDateMonth,\n        p.SellOutTargetDateYear,\n        p.PlannedArrivalDateMonth,\n        p.FirstSalesDate,\n        case \n            when p.Number is null and p.Status = 'Active' then 'Terminated'\n            else p.Status\n        end as Status,\n        p.CalfWidth,\n        '' as BrandFinancialEntity, -- WHY DO WE HAVE THIS?\n        p.ShoeWidth,\n        p.ColorClass,\n        p.IsIntangible,\n        p.MSRP,\n        p.Division,\n        p.IsSupplies,\n        coalesce(p.BrandId, 0) as BrandId,\n        p.SeasonBudget,\n        p.SellingStatus\n    from product p \n    left join item i on p.Number = i.[Number]\n    left join historical h on h.ItemId = i.ItemId\n    left join item_cogs ic on ic.ItemId=i.ItemId\n    where i.[Number] is not null\n    and (i.ClassType not in ('Girls''', 'Boys''', 'Gloves', 'Inventory', '') or i.ClassType is null)\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.int_sales__FactSalesLine_Deposco": {"database": "KNSDevDbt", "schema": "dbt_prod_intermediate", "name": "int_sales__FactSalesLine_Deposco", "resource_type": "model", "package_name": "kns_dbt", "path": "intermediate\\sales\\int_sales__FactSalesLine_Deposco.sql", "original_file_path": "models\\intermediate\\sales\\int_sales__FactSalesLine_Deposco.sql", "unique_id": "model.kns_dbt.int_sales__FactSalesLine_Deposco", "fqn": ["kns_dbt", "intermediate", "sales", "int_sales__FactSalesLine_Deposco"], "alias": "int_sales__FactSalesLine_Deposco", "checksum": {"name": "sha256", "checksum": "23803d60b4fe2ad4ea9799d7fb17eca6c69e4ea4d551e93dd257d1de9ac300b3"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "Number", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\intermediate\\sales\\_sales__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_intermediate", "materialized": "incremental", "unique_key": "Number"}, "created_at": 1748168169.6862774, "relation_name": "\"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__FactSalesLine_Deposco\"", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='Number'\r\n) }}\r\n{% set lookback_days = var('fact_sale_lookback_days', 10) %}\r\n\r\nwith\r\n\r\nparams as (\r\n    select dateadd(day, -{{ lookback_days }}, current_timestamp) as last_update\r\n),\r\n\r\norders_to_pull as (\r\n\r\n    select\r\n        oh.OrderHeaderId\r\n    from {{ ref('stg_deposco__OrderHeader') }} as oh\r\n    join {{ ref('stg_deposco__OrderLine') }} as ol\r\n        on oh.OrderHeaderId = ol.OrderHeaderId\r\n    left join {{ ref('stg_deposco__CoLine') }} as cl\r\n        on ol.CoLineId = cl.CoLineId\r\n    {% if is_incremental() %}\r\n    cross join params\r\n    where\r\n        (oh.UpdatedDate >= params.last_update or\r\n        ol.UpdatedDate >= params.last_update or\r\n        cl.UpdatedDate >= params.last_update)\r\n        and\r\n        (select max(v) from (values(oh.UpdatedDate), (ol.UpdatedDate), (cl.UpdatedDate)) as value(v)) > params.last_update\r\n    {% endif %}\r\n\r\n),\r\n\r\norder_line_list as (\r\n\r\n    select\r\n        concat('Deposco/', cast(ol.OrderLineId as varchar)) as [Number],\r\n        ol.ItemId,\r\n        oh.ConsigneePartnerId as TradingPartnerId,\r\n        coalesce(ol.OrderPackQuantity * ol.UnitCost, 0) as Amount,\r\n        coalesce(ol.OrderPackQuantity, 0) as Quantity,\r\n        oh.CustomerOrderNumber as PoNumber,\r\n        oh.KnsMtPlacedDate as PlacedDate,\r\n        oh.KnsMtCreatedDate as CreatedDate,\r\n        coalesce(oh.KnsMtPlannedReleaseDate, oh.KnsMtPlannedShipDate) as ContractualShipDate,\r\n        oh.KnsMtPlannedShipDate as PlannedShipDate,\r\n        oh.KnsMtActualShipDate as ActualShipDate,\r\n        oh.CurrentStatus as HeaderCurrentStatus,\r\n        case \r\n            when oh.ShippingStatus = '0' then 'Not Shipped'\r\n            when oh.ShippingStatus = '10' then 'Partially Shipped'\r\n            else 'Shipped'\r\n        end as HeaderShippingStatus,\r\n        ol.OrderLineStatus as LineStatus,\r\n        coalesce(ol.OrderPackQuantity * tp.TaxRate, 0) as HandlingFee,\r\n        null as Season\r\n    from orders_to_pull q\r\n    join {{ ref('stg_deposco__OrderHeader') }} oh \r\n      on oh.OrderHeaderId = q.OrderHeaderId\r\n    join {{ ref('stg_deposco__OrderLine') }} ol \r\n      on ol.OrderHeaderId = oh.OrderHeaderId\r\n    left join {{ ref('stg_deposco__CoLine') }} cl \r\n      on cl.CoLineId = ol.CoLineId\r\n    join {{ ref('stg_deposco__TradingPartner') }} tp \r\n      on tp.TradingPartnerId = oh.ConsigneePartnerId\r\n    where oh.Type = 'Sales Order'\r\n      and (oh.OrderSource is null or oh.OrderSource not in (\r\n           'Shipped Sales', 'Forecast Sales', 'Montly Net Revenue Percent',\r\n           'Net Margin', 'Net Revenue Forecast', 'InvalidSource', \r\n           'Potential Sales', 'Amazon FBA', 'Walmart WFS'))\r\n      and (oh.CustomerOrderNumber is null or oh.CustomerOrderNumber not like 'FBA%')\r\n      and tp.Name != '- No Customer/Project -'\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select \r\n        * \r\n    from order_line_list\r\n    where not (\r\n        HeaderShippingStatus = 'Shipped'\r\n        and ItemId != 153085\r\n        and LineStatus not in ('Complete', 'Canceled', 'Closed')\r\n    )\r\n\r\n),\r\n\r\ndeduped_ranked as (\r\n\r\n    select \r\n        f.*,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY f.Number \r\n            ORDER BY case when f.LineStatus = 'Complete' then 0 else 1 end\r\n        ) as rn,\r\n        case \r\n            when di.Parent = 'Shipping Protection' then\r\n                ROW_NUMBER() OVER (\r\n                    PARTITION BY oh.OrderHeaderId, f.ItemId \r\n                    ORDER BY case when f.LineStatus = 'Complete' then 0 else 1 end\r\n                )\r\n            else 1\r\n        end as shipping_protection_row\r\n    from filtered f\r\n    left join {{ ref('DimItem') }} di \r\n        on di.ItemId = f.ItemId\r\n    left join {{ ref('stg_deposco__OrderLine') }} ol \r\n        on ol.OrderLineId = cast(replace(f.Number, 'Deposco/', '') as int)\r\n    left join {{ ref('stg_deposco__OrderHeader') }} oh \r\n        on oh.OrderHeaderId = ol.OrderHeaderId\r\n),\r\n\r\n\r\ndeduped as (\r\n    select *\r\n    from deduped_ranked\r\n    where rn = 1\r\n      and shipping_protection_row = 1\r\n),\r\n\r\nupdate_order_protection as (\r\n    select\r\n        fs.Number,\r\n        oh.CoHeaderId as ChId\r\n    from deduped fs\r\n    join {{ ref('stg_deposco__Item') }} i \r\n        on i.ItemId = fs.ItemId\r\n    join {{ ref('stg_deposco__OrderLine') }} ol \r\n        on ol.OrderLineId = cast(replace(fs.Number, 'Deposco/', '') as int)\r\n    join {{ ref('stg_deposco__OrderHeader') }} oh \r\n        on oh.OrderHeaderId = ol.OrderHeaderId\r\n    where i.Name = 'Order Protection'\r\n        and coalesce(i.ClassType, '') = ''\r\n        and fs.Number like 'Deposco/%'\r\n),\r\n\r\nch_ids as (\r\n    select\r\n        fs.Number,\r\n        oh.CoHeaderId as ChId,\r\n        di.BrandId\r\n    from deduped fs\r\n    join {{ ref('stg_deposco__OrderLine') }} ol \r\n        on ol.OrderLineId = cast(replace(fs.Number, 'Deposco/', '') as int)\r\n    join {{ ref('stg_deposco__OrderHeader') }} oh \r\n        on oh.OrderHeaderId = ol.OrderHeaderId\r\n    join {{ ref('stg_deposco__Item') }} i \r\n        on i.ItemId = fs.ItemId\r\n    join {{ ref('DimItem') }} di \r\n        on di.ItemId = i.ItemId\r\n    where fs.Number like 'Deposco/%'\r\n        and coalesce(i.Name, '') != 'Order Protection'\r\n),\r\n\r\nfinal_mapping as (\r\n    select \r\n        o.Number,\r\n        min(c.BrandId) as BrandId\r\n    from update_order_protection o\r\n    join ch_ids c \r\n        on c.ChId = o.ChId\r\n    group by o.Number\r\n),\r\n\r\nshipping_protection as (\r\n    select \r\n        i.ItemId,\r\n        i.BrandId\r\n    from {{ ref('DimItem') }} i\r\n    where i.Parent = 'Shipping Protection'\r\n),\r\n\r\nfinal as (\r\n    select \r\n        d.Number,\r\n        case \r\n            when sp.ItemId is not null and d.ItemId <> sp.ItemId then sp.ItemId\r\n            else d.ItemId\r\n        end as ItemId,\r\n        d.TradingPartnerId,\r\n        d.Amount,\r\n        d.Quantity,\r\n        d.PoNumber,\r\n        d.PlacedDate,\r\n        d.CreatedDate,\r\n        d.ContractualShipDate,\r\n        d.PlannedShipDate,\r\n        d.ActualShipDate,\r\n        d.HeaderCurrentStatus,\r\n        d.HeaderShippingStatus,\r\n        d.LineStatus,\r\n        d.HandlingFee,\r\n        d.Season\r\n    from deduped d\r\n    left join final_mapping fm \r\n        on fm.Number = d.Number\r\n    left join shipping_protection sp \r\n        on sp.BrandId = fm.BrandId\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__OrderLine", "package": null, "version": null}, {"name": "stg_deposco__CoLine", "package": null, "version": null}, {"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__OrderLine", "package": null, "version": null}, {"name": "stg_deposco__CoLine", "package": null, "version": null}, {"name": "stg_deposco__TradingPartner", "package": null, "version": null}, {"name": "DimItem", "package": null, "version": null}, {"name": "stg_deposco__OrderLine", "package": null, "version": null}, {"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__Item", "package": null, "version": null}, {"name": "stg_deposco__OrderLine", "package": null, "version": null}, {"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__OrderLine", "package": null, "version": null}, {"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__Item", "package": null, "version": null}, {"name": "DimItem", "package": null, "version": null}, {"name": "DimItem", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.kns_dbt.stg_deposco__OrderHeader", "model.kns_dbt.stg_deposco__OrderLine", "model.kns_dbt.stg_deposco__CoLine", "model.kns_dbt.stg_deposco__TradingPartner", "model.kns_dbt.DimItem", "model.kns_dbt.stg_deposco__Item"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\intermediate\\sales\\int_sales__FactSalesLine_Deposco.sql", "compiled": true, "compiled_code": "\n\n\nwith\n\nparams as (\n    select dateadd(day, -10, current_timestamp) as last_update\n),\n\norders_to_pull as (\n\n    select\n        oh.OrderHeaderId\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\" as oh\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\" as ol\n        on oh.OrderHeaderId = ol.OrderHeaderId\n    left join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__CoLine\" as cl\n        on ol.CoLineId = cl.CoLineId\n    \n    cross join params\n    where\n        (oh.UpdatedDate >= params.last_update or\n        ol.UpdatedDate >= params.last_update or\n        cl.UpdatedDate >= params.last_update)\n        and\n        (select max(v) from (values(oh.UpdatedDate), (ol.UpdatedDate), (cl.UpdatedDate)) as value(v)) > params.last_update\n    \n\n),\n\norder_line_list as (\n\n    select\n        concat('Deposco/', cast(ol.OrderLineId as varchar)) as [Number],\n        ol.ItemId,\n        oh.ConsigneePartnerId as TradingPartnerId,\n        coalesce(ol.OrderPackQuantity * ol.UnitCost, 0) as Amount,\n        coalesce(ol.OrderPackQuantity, 0) as Quantity,\n        oh.CustomerOrderNumber as PoNumber,\n        oh.KnsMtPlacedDate as PlacedDate,\n        oh.KnsMtCreatedDate as CreatedDate,\n        coalesce(oh.KnsMtPlannedReleaseDate, oh.KnsMtPlannedShipDate) as ContractualShipDate,\n        oh.KnsMtPlannedShipDate as PlannedShipDate,\n        oh.KnsMtActualShipDate as ActualShipDate,\n        oh.CurrentStatus as HeaderCurrentStatus,\n        case \n            when oh.ShippingStatus = '0' then 'Not Shipped'\n            when oh.ShippingStatus = '10' then 'Partially Shipped'\n            else 'Shipped'\n        end as HeaderShippingStatus,\n        ol.OrderLineStatus as LineStatus,\n        coalesce(ol.OrderPackQuantity * tp.TaxRate, 0) as HandlingFee,\n        null as Season\n    from orders_to_pull q\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\" oh \n      on oh.OrderHeaderId = q.OrderHeaderId\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\" ol \n      on ol.OrderHeaderId = oh.OrderHeaderId\n    left join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__CoLine\" cl \n      on cl.CoLineId = ol.CoLineId\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__TradingPartner\" tp \n      on tp.TradingPartnerId = oh.ConsigneePartnerId\n    where oh.Type = 'Sales Order'\n      and (oh.OrderSource is null or oh.OrderSource not in (\n           'Shipped Sales', 'Forecast Sales', 'Montly Net Revenue Percent',\n           'Net Margin', 'Net Revenue Forecast', 'InvalidSource', \n           'Potential Sales', 'Amazon FBA', 'Walmart WFS'))\n      and (oh.CustomerOrderNumber is null or oh.CustomerOrderNumber not like 'FBA%')\n      and tp.Name != '- No Customer/Project -'\n\n),\n\nfiltered as (\n\n    select \n        * \n    from order_line_list\n    where not (\n        HeaderShippingStatus = 'Shipped'\n        and ItemId != 153085\n        and LineStatus not in ('Complete', 'Canceled', 'Closed')\n    )\n\n),\n\ndeduped_ranked as (\n\n    select \n        f.*,\n        ROW_NUMBER() OVER (\n            PARTITION BY f.Number \n            ORDER BY case when f.LineStatus = 'Complete' then 0 else 1 end\n        ) as rn,\n        case \n            when di.Parent = 'Shipping Protection' then\n                ROW_NUMBER() OVER (\n                    PARTITION BY oh.OrderHeaderId, f.ItemId \n                    ORDER BY case when f.LineStatus = 'Complete' then 0 else 1 end\n                )\n            else 1\n        end as shipping_protection_row\n    from filtered f\n    left join \"KNSDevDbt\".\"dbt_prod_marts\".\"DimItem\" di \n        on di.ItemId = f.ItemId\n    left join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\" ol \n        on ol.OrderLineId = cast(replace(f.Number, 'Deposco/', '') as int)\n    left join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\" oh \n        on oh.OrderHeaderId = ol.OrderHeaderId\n),\n\n\ndeduped as (\n    select *\n    from deduped_ranked\n    where rn = 1\n      and shipping_protection_row = 1\n),\n\nupdate_order_protection as (\n    select\n        fs.Number,\n        oh.CoHeaderId as ChId\n    from deduped fs\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Item\" i \n        on i.ItemId = fs.ItemId\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\" ol \n        on ol.OrderLineId = cast(replace(fs.Number, 'Deposco/', '') as int)\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\" oh \n        on oh.OrderHeaderId = ol.OrderHeaderId\n    where i.Name = 'Order Protection'\n        and coalesce(i.ClassType, '') = ''\n        and fs.Number like 'Deposco/%'\n),\n\nch_ids as (\n    select\n        fs.Number,\n        oh.CoHeaderId as ChId,\n        di.BrandId\n    from deduped fs\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\" ol \n        on ol.OrderLineId = cast(replace(fs.Number, 'Deposco/', '') as int)\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\" oh \n        on oh.OrderHeaderId = ol.OrderHeaderId\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Item\" i \n        on i.ItemId = fs.ItemId\n    join \"KNSDevDbt\".\"dbt_prod_marts\".\"DimItem\" di \n        on di.ItemId = i.ItemId\n    where fs.Number like 'Deposco/%'\n        and coalesce(i.Name, '') != 'Order Protection'\n),\n\nfinal_mapping as (\n    select \n        o.Number,\n        min(c.BrandId) as BrandId\n    from update_order_protection o\n    join ch_ids c \n        on c.ChId = o.ChId\n    group by o.Number\n),\n\nshipping_protection as (\n    select \n        i.ItemId,\n        i.BrandId\n    from \"KNSDevDbt\".\"dbt_prod_marts\".\"DimItem\" i\n    where i.Parent = 'Shipping Protection'\n),\n\nfinal as (\n    select \n        d.Number,\n        case \n            when sp.ItemId is not null and d.ItemId <> sp.ItemId then sp.ItemId\n            else d.ItemId\n        end as ItemId,\n        d.TradingPartnerId,\n        d.Amount,\n        d.Quantity,\n        d.PoNumber,\n        d.PlacedDate,\n        d.CreatedDate,\n        d.ContractualShipDate,\n        d.PlannedShipDate,\n        d.ActualShipDate,\n        d.HeaderCurrentStatus,\n        d.HeaderShippingStatus,\n        d.LineStatus,\n        d.HandlingFee,\n        d.Season\n    from deduped d\n    left join final_mapping fm \n        on fm.Number = d.Number\n    left join shipping_protection sp \n        on sp.BrandId = fm.BrandId\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals": {"database": "KNSDevDbt", "schema": "dbt_prod_intermediate", "name": "int_sales__FactSalesLine_ReturnsAccruals", "resource_type": "model", "package_name": "kns_dbt", "path": "intermediate\\sales\\int_sales__FactSalesLine_ReturnsAccruals.sql", "original_file_path": "models\\intermediate\\sales\\int_sales__FactSalesLine_ReturnsAccruals.sql", "unique_id": "model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals", "fqn": ["kns_dbt", "intermediate", "sales", "int_sales__FactSalesLine_ReturnsAccruals"], "alias": "int_sales__FactSalesLine_ReturnsAccruals", "checksum": {"name": "sha256", "checksum": "1043980178736c2716c62291ec3bcc5bc81717dc0dff9c98d427f24dcff37a25"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This view is meant to insert returns into the FactSalesItem table.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\intermediate\\sales\\_sales__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_intermediate", "materialized": "view"}, "created_at": 1748168169.6862774, "relation_name": "\"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__FactSalesLine_ReturnsAccruals\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select \r\n        concat('Returns Accrual/', tl.UniqueKey) as Number,\r\n        171516 as ItemId,\r\n        tp.TradingPartnerId as TradingPartnerId,\r\n        'Discontinued' as Brand,\r\n        null as LastUpdatedAt,\r\n        0 as Amount,\r\n        0 as Quantity,\r\n        null as PONumber,\r\n        convert(date, t.TranDate) as PlacedDate,\r\n        convert(date, t.TranDate) as CreatedDate,\r\n        convert(date, t.TranDate) as ContractualShipDate,\r\n        convert(date, t.TranDate) as PlannedShipDate,\r\n        convert(date, t.TranDate) as ActualShipDate,\r\n        'Complete' as HeaderCurrentStatus,\r\n        'Shipped' as HeaderShippingStatus,\r\n        'Complete' as LineStatus,\r\n        0 as FreightOutCOGS,\r\n        coalesce(tl.CreditForeignAmount, 0) - coalesce(tl.DebitForeignAmount, 0) as ItemCOGS,\r\n        0 as HandlingFee,\r\n        0 as DiscountAmount,\r\n        getdate() as RecordUpdatedAt,\r\n        null as Season\r\n    from {{ ref('stg_netsuite__TransactionLine') }} tl\r\n    join {{ ref('stg_netsuite__Transaction') }} t\r\n        on tl.[Transaction] = t.Id\r\n    join {{ ref('stg_netsuite__Entity') }} e\r\n        on t.Entity = e.Id\r\n    join {{ ref('stg_deposco__TradingPartner') }} tp\r\n        on e.EntityId = tp.Name\r\n    where tl.Memo = 'Returns Accrual'\r\n        and tl.ExpenseAccount=214\r\n        and (convert(date, eomonth(t.TranDate)) <  dateadd(day, -15, convert(date, SYSDATETIMEOFFSET() at time zone 'mountain standard time')))\r\n\r\n)\r\n\r\nselect * from source", "language": "sql", "refs": [{"name": "stg_netsuite__TransactionLine", "package": null, "version": null}, {"name": "stg_netsuite__Transaction", "package": null, "version": null}, {"name": "stg_netsuite__Entity", "package": null, "version": null}, {"name": "stg_deposco__TradingPartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.stg_netsuite__TransactionLine", "model.kns_dbt.stg_netsuite__Transaction", "model.kns_dbt.stg_netsuite__Entity", "model.kns_dbt.stg_deposco__TradingPartner"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\intermediate\\sales\\int_sales__FactSalesLine_ReturnsAccruals.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select \n        concat('Returns Accrual/', tl.UniqueKey) as Number,\n        171516 as ItemId,\n        tp.TradingPartnerId as TradingPartnerId,\n        'Discontinued' as Brand,\n        null as LastUpdatedAt,\n        0 as Amount,\n        0 as Quantity,\n        null as PONumber,\n        convert(date, t.TranDate) as PlacedDate,\n        convert(date, t.TranDate) as CreatedDate,\n        convert(date, t.TranDate) as ContractualShipDate,\n        convert(date, t.TranDate) as PlannedShipDate,\n        convert(date, t.TranDate) as ActualShipDate,\n        'Complete' as HeaderCurrentStatus,\n        'Shipped' as HeaderShippingStatus,\n        'Complete' as LineStatus,\n        0 as FreightOutCOGS,\n        coalesce(tl.CreditForeignAmount, 0) - coalesce(tl.DebitForeignAmount, 0) as ItemCOGS,\n        0 as HandlingFee,\n        0 as DiscountAmount,\n        getdate() as RecordUpdatedAt,\n        null as Season\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_netsuite__TransactionLine\" tl\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_netsuite__Transaction\" t\n        on tl.[Transaction] = t.Id\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_netsuite__Entity\" e\n        on t.Entity = e.Id\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__TradingPartner\" tp\n        on e.EntityId = tp.Name\n    where tl.Memo = 'Returns Accrual'\n        and tl.ExpenseAccount=214\n        and (convert(date, eomonth(t.TranDate)) <  dateadd(day, -15, convert(date, SYSDATETIMEOFFSET() at time zone 'mountain standard time')))\n\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.int_sales__ReturnRatePrep": {"database": "KNSDevDbt", "schema": "dbt_prod_intermediate", "name": "int_sales__ReturnRatePrep", "resource_type": "model", "package_name": "kns_dbt", "path": "intermediate\\sales\\int_sales__ReturnRatePrep.sql", "original_file_path": "models\\intermediate\\sales\\int_sales__ReturnRatePrep.sql", "unique_id": "model.kns_dbt.int_sales__ReturnRatePrep", "fqn": ["kns_dbt", "intermediate", "sales", "int_sales__ReturnRatePrep"], "alias": "int_sales__ReturnRatePrep", "checksum": {"name": "sha256", "checksum": "7b09a001588c0c90426d4624bf9ee93d506b4c2adc088f21f01c4e13b1be4ee7"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\intermediate\\sales\\_sales__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_intermediate", "materialized": "view"}, "created_at": 1748168169.6862774, "relation_name": "\"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__ReturnRatePrep\"", "raw_code": "with\r\n\r\nparams as (\r\n    select \r\n        dateadd(year, -1, getdate()) as returns_after\r\n),\r\n\r\naccepted_tp as (\r\n\r\n    select\r\n        Code,\r\n        TradingPartnerId,\r\n        Name\r\n    from {{ ref('stg_deposco__TradingPartner') }}\r\n    where ContactEmail = 'TRUE'\r\n        and Name != 'MARKETING'\r\n\r\n),\r\n\r\ncustomer_blind_returns as (\r\n\r\n    select\r\n        case \r\n            when oh.ConsigneePartnerId is not null\r\n                then (select name from accepted_tp tp where oh.ConsigneePartnerId = tp.TradingPartnerId)\r\n            else\r\n                (select name from accepted_tp tp where oh.Seller = tp.Code)\r\n        end as TradingPartner,\r\n        i.StyleNumber as Parent,\r\n        concat(i.StyleNumber, '-', i.ColorName) as Item,\r\n        null as PurchasedQuantity,\r\n        rl.ReceivedPackQuantity as ReturnQuantity,\r\n        datediff(day,\r\n                cast((select poh.CreatedDate\r\n                    from {{ ref('stg_deposco__OrderHeader')}} poh\r\n                    where oh.ParentOrderId = poh.OrderHeaderId) as date),\r\n                cast(oh.CreatedDate as date)\r\n        ) as ReturnDays\r\n    from {{ ref('stg_deposco__ReceiptLine')}} rl\r\n    join {{ ref('stg_deposco__OrderLine')}} ol \r\n        on rl.OrderLineId = ol.OrderLineId\r\n    join {{ ref('stg_deposco__OrderHeader')}} oh\r\n        on ol.OrderHeaderId = oh.OrderHeaderId\r\n    join {{ ref('stg_deposco__Item')}} i\r\n        on ol.ItemId = i.ItemId\r\n    cross join params\r\n    where oh.Type in ('Blind RMA', 'Customer Return')\r\n        and (oh.Seller in (select Code from accepted_tp) \r\n            or oh.ConsigneePartnerId in (select TradingPartnerId from accepted_tp))\r\n        and oh.CreatedDate > params.returns_after\r\n        and i.StyleNumber is not null\r\n        and i.ColorName is not null\r\n\r\n),\r\n\r\nsales_order_returns as (\r\n\r\n    select\r\n        case \r\n            when oh.ConsigneePartnerId is not null\r\n                then (select name from accepted_tp tp where oh.ConsigneePartnerId = tp.TradingPartnerId)\r\n            else\r\n                (select name from accepted_tp tp where oh.Seller = tp.Code)\r\n        end as TradingPartner,\r\n        i.StyleNumber as Parent,\r\n        concat(i.StyleNumber, '-', i.ColorName) as Item,\r\n        OrderPackQuantity as PurchasedQuantity,\r\n        null as ReturnedQuantity,\r\n        null as ReturnDays\r\n    from {{ ref('stg_deposco__OrderHeader')}} oh\r\n    join {{ ref('stg_deposco__OrderLine')}} ol \r\n        on oh.OrderHeaderId = ol.OrderHeaderId\r\n    join {{ ref('stg_deposco__Item')}} i\r\n        on ol.ItemId = i.ItemId\r\n    cross join params\r\n    where oh.Type = 'Sales Order'\r\n        and (oh.OrderSource is null or oh.OrderSource not in \r\n            ('Shipped Sales', 'Forecast Sales', 'Montly Net Revenue Percent', 'Net Margin', 'Net Revenue Forecast', 'InvalidSource', 'Potential Sales', 'Amazon FBA', 'Walmart WFS')\r\n            )\r\n        and oh.CurrentStatus != 'Voided'\r\n        and (oh.CustomerOrderNumber is null or oh.CustomerOrderNumber not like 'FBA%')\r\n        and (ol.OrderLineStatus != 'Canceled')\r\n        and (oh.Seller in (select Code from accepted_tp) \r\n            or oh.ConsigneePartnerId in (select TradingPartnerId from accepted_tp))\r\n        and oh.CreatedDate > dateadd(month, -1, params.returns_after)\r\n        and oh.CreatedDate < dateadd(month, -1, getdate())\r\n        and i.StyleNumber is not null\r\n        and i.ColorName is not null\r\n\r\n),\r\n\r\nreturns_unioned as (\r\n\r\n    select * from customer_blind_returns\r\n    union all\r\n    select * from sales_order_returns\r\n\r\n)\r\n\r\nselect * from returns_unioned", "language": "sql", "refs": [{"name": "stg_deposco__TradingPartner", "package": null, "version": null}, {"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__ReceiptLine", "package": null, "version": null}, {"name": "stg_deposco__OrderLine", "package": null, "version": null}, {"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__Item", "package": null, "version": null}, {"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__OrderLine", "package": null, "version": null}, {"name": "stg_deposco__Item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.stg_deposco__TradingPartner", "model.kns_dbt.stg_deposco__OrderHeader", "model.kns_dbt.stg_deposco__ReceiptLine", "model.kns_dbt.stg_deposco__OrderLine", "model.kns_dbt.stg_deposco__Item"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\intermediate\\sales\\int_sales__ReturnRatePrep.sql", "compiled": true, "compiled_code": "with\n\nparams as (\n    select \n        dateadd(year, -1, getdate()) as returns_after\n),\n\naccepted_tp as (\n\n    select\n        Code,\n        TradingPartnerId,\n        Name\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__TradingPartner\"\n    where ContactEmail = 'TRUE'\n        and Name != 'MARKETING'\n\n),\n\ncustomer_blind_returns as (\n\n    select\n        case \n            when oh.ConsigneePartnerId is not null\n                then (select name from accepted_tp tp where oh.ConsigneePartnerId = tp.TradingPartnerId)\n            else\n                (select name from accepted_tp tp where oh.Seller = tp.Code)\n        end as TradingPartner,\n        i.StyleNumber as Parent,\n        concat(i.StyleNumber, '-', i.ColorName) as Item,\n        null as PurchasedQuantity,\n        rl.ReceivedPackQuantity as ReturnQuantity,\n        datediff(day,\n                cast((select poh.CreatedDate\n                    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\" poh\n                    where oh.ParentOrderId = poh.OrderHeaderId) as date),\n                cast(oh.CreatedDate as date)\n        ) as ReturnDays\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__ReceiptLine\" rl\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\" ol \n        on rl.OrderLineId = ol.OrderLineId\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\" oh\n        on ol.OrderHeaderId = oh.OrderHeaderId\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Item\" i\n        on ol.ItemId = i.ItemId\n    cross join params\n    where oh.Type in ('Blind RMA', 'Customer Return')\n        and (oh.Seller in (select Code from accepted_tp) \n            or oh.ConsigneePartnerId in (select TradingPartnerId from accepted_tp))\n        and oh.CreatedDate > params.returns_after\n        and i.StyleNumber is not null\n        and i.ColorName is not null\n\n),\n\nsales_order_returns as (\n\n    select\n        case \n            when oh.ConsigneePartnerId is not null\n                then (select name from accepted_tp tp where oh.ConsigneePartnerId = tp.TradingPartnerId)\n            else\n                (select name from accepted_tp tp where oh.Seller = tp.Code)\n        end as TradingPartner,\n        i.StyleNumber as Parent,\n        concat(i.StyleNumber, '-', i.ColorName) as Item,\n        OrderPackQuantity as PurchasedQuantity,\n        null as ReturnedQuantity,\n        null as ReturnDays\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\" oh\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\" ol \n        on oh.OrderHeaderId = ol.OrderHeaderId\n    join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Item\" i\n        on ol.ItemId = i.ItemId\n    cross join params\n    where oh.Type = 'Sales Order'\n        and (oh.OrderSource is null or oh.OrderSource not in \n            ('Shipped Sales', 'Forecast Sales', 'Montly Net Revenue Percent', 'Net Margin', 'Net Revenue Forecast', 'InvalidSource', 'Potential Sales', 'Amazon FBA', 'Walmart WFS')\n            )\n        and oh.CurrentStatus != 'Voided'\n        and (oh.CustomerOrderNumber is null or oh.CustomerOrderNumber not like 'FBA%')\n        and (ol.OrderLineStatus != 'Canceled')\n        and (oh.Seller in (select Code from accepted_tp) \n            or oh.ConsigneePartnerId in (select TradingPartnerId from accepted_tp))\n        and oh.CreatedDate > dateadd(month, -1, params.returns_after)\n        and oh.CreatedDate < dateadd(month, -1, getdate())\n        and i.StyleNumber is not null\n        and i.ColorName is not null\n\n),\n\nreturns_unioned as (\n\n    select * from customer_blind_returns\n    union all\n    select * from sales_order_returns\n\n)\n\nselect * from returns_unioned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.DimItem": {"database": "KNSDevDbt", "schema": "dbt_prod_marts", "name": "DimItem", "resource_type": "model", "package_name": "kns_dbt", "path": "marts\\DimItem.sql", "original_file_path": "models\\marts\\DimItem.sql", "unique_id": "model.kns_dbt.DimItem", "fqn": ["kns_dbt", "marts", "DimItem"], "alias": "DimItem", "checksum": {"name": "sha256", "checksum": "dfc9593642d04c9671639d1cfa11f9e679ed87100a7e8000509bbc1f9fa798ef"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\marts\\__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_marts", "materialized": "table"}, "created_at": 1748168169.7019022, "relation_name": "\"KNSDevDbt\".\"dbt_prod_marts\".\"DimItem\"", "raw_code": "with\r\n\r\ndim_item as (\r\n    select * from {{ ref('int_sales__DimItemPrep') }}\r\n),\r\n\r\nsize_run as (\r\n    select \r\n        * \r\n    from {{ ref('seed_SizeRun') }}\r\n    where Code in ('M-Standard-1','F-Standard-1','U-Generic-1')\r\n),\r\n\r\ncurrent_stock as (\r\n    select \r\n        ItemId,\r\n        AvailableQuantity\r\n    from {{ ref('int_sales__CurrentStock') }}\r\n),\r\n\r\ntemp_line as (\r\n    select \r\n        i.ItemId,\r\n        isnull(cs.AvailableQuantity,0) as AvailableQuantity,\r\n        case when isnull(cs.AvailableQuantity,0) > 4 then 1 else 0 end as InStock,\r\n        concat(i.Parent, '-', i.Color) as Item,\r\n        isnull(sr.IsCore, 0) as Core \r\n    from dim_item i\r\n    left join size_run sr on sr.Gender = i.Gender and sr.Size = i.Size\r\n    left join current_stock cs on i.ItemId = cs.ItemId\r\n\r\n),\r\n\r\ntemp_agg as (\r\n    select \r\n        Item,\r\n        case \r\n            when SUM(AvailableQuantity) = 0  then 'No Stock'\r\n            when SUM(Instock) = COUNT(Instock) then 'Complete Run'\r\n            when SUM(Instock*cast(Core as int)) = SUM(cast(Core as int)) and SUM(cast(Core as int))!= 0 then 'Core Run'\r\n            when SUM(cast(Core as int)) > 0 and 1.0*SUM(Instock*cast(Core as int))/SUM(cast(Core as int)) < .3  then 'Hash'\r\n            else 'Broken Core'\r\n        end as BrokenStatus\r\n    from temp_line\r\n    group by Item\r\n),\r\n\r\nbroken as (\r\n\r\n    select \r\n        ItemId,\r\n        BrokenStatus\r\n    from temp_line tl\r\n    join temp_agg ta on tl.Item = ta.Item\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        i.*,\r\n        b.BrokenStatus\r\n    from dim_item i\r\n    left join broken b on i.ItemId = b.ItemId\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "int_sales__DimItemPrep", "package": null, "version": null}, {"name": "seed_SizeRun", "package": null, "version": null}, {"name": "int_sales__CurrentStock", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.int_sales__DimItemPrep", "seed.kns_dbt.seed_SizeRun", "model.kns_dbt.int_sales__CurrentStock"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\DimItem.sql", "compiled": true, "compiled_code": "with\n\ndim_item as (\n    select * from \"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__DimItemPrep\"\n),\n\nsize_run as (\n    select \n        * \n    from \"KNSDevDbt\".\"prod\".\"seed_SizeRun\"\n    where Code in ('M-Standard-1','F-Standard-1','U-Generic-1')\n),\n\ncurrent_stock as (\n    select \n        ItemId,\n        AvailableQuantity\n    from \"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__CurrentStock\"\n),\n\ntemp_line as (\n    select \n        i.ItemId,\n        isnull(cs.AvailableQuantity,0) as AvailableQuantity,\n        case when isnull(cs.AvailableQuantity,0) > 4 then 1 else 0 end as InStock,\n        concat(i.Parent, '-', i.Color) as Item,\n        isnull(sr.IsCore, 0) as Core \n    from dim_item i\n    left join size_run sr on sr.Gender = i.Gender and sr.Size = i.Size\n    left join current_stock cs on i.ItemId = cs.ItemId\n\n),\n\ntemp_agg as (\n    select \n        Item,\n        case \n            when SUM(AvailableQuantity) = 0  then 'No Stock'\n            when SUM(Instock) = COUNT(Instock) then 'Complete Run'\n            when SUM(Instock*cast(Core as int)) = SUM(cast(Core as int)) and SUM(cast(Core as int))!= 0 then 'Core Run'\n            when SUM(cast(Core as int)) > 0 and 1.0*SUM(Instock*cast(Core as int))/SUM(cast(Core as int)) < .3  then 'Hash'\n            else 'Broken Core'\n        end as BrokenStatus\n    from temp_line\n    group by Item\n),\n\nbroken as (\n\n    select \n        ItemId,\n        BrokenStatus\n    from temp_line tl\n    join temp_agg ta on tl.Item = ta.Item\n\n),\n\nfinal as (\n    select\n        i.*,\n        b.BrokenStatus\n    from dim_item i\n    left join broken b on i.ItemId = b.ItemId\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.DimTradingPartner": {"database": "KNSDevDbt", "schema": "dbt_prod_marts", "name": "DimTradingPartner", "resource_type": "model", "package_name": "kns_dbt", "path": "marts\\DimTradingPartner.sql", "original_file_path": "models\\marts\\DimTradingPartner.sql", "unique_id": "model.kns_dbt.DimTradingPartner", "fqn": ["kns_dbt", "marts", "DimTradingPartner"], "alias": "DimTradingPartner", "checksum": {"name": "sha256", "checksum": "de8dd8e2fd7ba1de35695384ab978c10d3619c340032e477e2a1ec685d41cb05"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This dim table describes trading partners (one record per trading partner)", "columns": {"TradingPartnerId": {"name": "TradingPartnerId", "description": "Unique identifier for a trading partner", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\marts\\__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_marts", "materialized": "table"}, "created_at": 1748168169.7019022, "relation_name": "\"KNSDevDbt\".\"dbt_prod_marts\".\"DimTradingPartner\"", "raw_code": "with \r\n\r\ntrading_partners as (\r\n\r\n    select\r\n        TradingPartnerId,\r\n        Name,\r\n        Code,\r\n        BillToCountry as ChannelType\r\n    from {{ ref('stg_deposco__TradingPartner') }}\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        *,\r\n        iif (Name in ('DSW', 'MACYS', 'KOHLS', 'TARGET PLUS', 'NORDSTROM RACK', 'JCPENNEY', 'AMAZON', 'WALMART MARKETPLACE', 'KOHLS - WS'), 1, 0) as IsTopPartner\r\n    from trading_partners\r\n\r\n)\r\n\r\nselect * from final;", "language": "sql", "refs": [{"name": "stg_deposco__TradingPartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.stg_deposco__TradingPartner"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\DimTradingPartner.sql", "compiled": true, "compiled_code": "with \n\ntrading_partners as (\n\n    select\n        TradingPartnerId,\n        Name,\n        Code,\n        BillToCountry as ChannelType\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__TradingPartner\"\n\n),\n\nfinal as (\n\n    select\n        *,\n        iif (Name in ('DSW', 'MACYS', 'KOHLS', 'TARGET PLUS', 'NORDSTROM RACK', 'JCPENNEY', 'AMAZON', 'WALMART MARKETPLACE', 'KOHLS - WS'), 1, 0) as IsTopPartner\n    from trading_partners\n\n)\n\nselect * from final;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.FactCurrentStock": {"database": "KNSDevDbt", "schema": "dbt_prod_marts", "name": "FactCurrentStock", "resource_type": "model", "package_name": "kns_dbt", "path": "marts\\FactCurrentStock.sql", "original_file_path": "models\\marts\\FactCurrentStock.sql", "unique_id": "model.kns_dbt.FactCurrentStock", "fqn": ["kns_dbt", "marts", "FactCurrentStock"], "alias": "FactCurrentStock", "checksum": {"name": "sha256", "checksum": "41d9ec41095a782d17712d277475c989fb41c96184206f3f553c7b7250cf3347"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\marts\\__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_marts", "materialized": "table"}, "created_at": 1748168169.7019022, "relation_name": "\"KNSDevDbt\".\"dbt_prod_marts\".\"FactCurrentStock\"", "raw_code": "with\r\n\r\ncurrent_stock as (\r\n    select * from {{ ref('int_sales__CurrentStock') }}\r\n)\r\n\r\nselect * from current_stock", "language": "sql", "refs": [{"name": "int_sales__CurrentStock", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.int_sales__CurrentStock"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\FactCurrentStock.sql", "compiled": true, "compiled_code": "with\n\ncurrent_stock as (\n    select * from \"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__CurrentStock\"\n)\n\nselect * from current_stock", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.FactMarketingAd": {"database": "KNSDevDbt", "schema": "dbt_prod_marts", "name": "FactMarketingAd", "resource_type": "model", "package_name": "kns_dbt", "path": "marts\\FactMarketingAd.sql", "original_file_path": "models\\marts\\FactMarketingAd.sql", "unique_id": "model.kns_dbt.FactMarketingAd", "fqn": ["kns_dbt", "marts", "FactMarketingAd"], "alias": "FactMarketingAd", "checksum": {"name": "sha256", "checksum": "0cd7cedeccf3f5b73da75b572ab3120b774d5da786ded0bbdfa3ba294bfc5564"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This fact table contains marketing ad data.", "columns": {"TradingPartnerId": {"name": "TradingPartnerId", "description": "Unique identifier for a trading partner (never null)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Objective": {"name": "Objective", "description": "One of the following values: \r\n\r\n| status                         | definition                      |\r\n|--------------------------------|---------------------------------|\r\n| Top Funnel / Awareness         | Example def                     | \r\n| Mid Funnel                     |                                 |\r\n| Bottom Funnel / Conversions    |                                 | \r\n| Retargeting                    |                                 |\r\n| Prospecting                    |                                 |\r\n| Retention                      |                                 |\r\n| NBSearch                       |                                 |\r\n| BrandSearch                    |                                 |\r\n| PMax                           |                                 |\r\n| BrandShopping                  |                                 |\r\n| NBShopping                     |                                 |\r\n| Null                           |                                 |", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\marts\\__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_marts", "materialized": "table"}, "created_at": 1748168169.7019022, "relation_name": "\"KNSDevDbt\".\"dbt_prod_marts\".\"FactMarketingAd\"", "raw_code": "with \r\n\r\nbrands as (\r\n    select * from {{ ref('seed_Brands') }}\r\n),\r\n\r\nmarketing_data as (\r\n\r\n    select * from {{ ref('int_marketing__SourcesMapped') }}\r\n\r\n),\r\n\r\nfinal as (\r\n    select \r\n        m.[Date],\r\n        m.[AdName],\r\n        m.[AdSet],\r\n        m.[Campaign],\r\n        m.TradingPartnerId,\r\n        m.[Platform],\r\n        m.Channel,\r\n        m.Type,\r\n        b.BrandId,\r\n        m.ObjectiveMapped as Objective,\r\n        m.LandingPageMapped as LandingPage,\r\n        m.ParsedClass1 as Class1,\r\n        m.ParsedClass2 as Class2,\r\n        m.ParsedClass3 as Class3,\r\n        cast(Spend as decimal(19, 4)) as Spend,\r\n        cast(ClickThrough as decimal(19, 4)) as ClickThrough,\r\n        cast(Impressions as decimal(19, 4)) as Impressions,\r\n        cast(Conversions as decimal(19, 4)) as Conversions,\r\n        cast(SalesDollars as decimal(19, 4)) as SalesDollars,\r\n        cast(SalesUnits as decimal(19, 4)) as SalesUnits\r\n\r\n    from marketing_data m\r\n    left join brands b \r\n        on b.Brand = m.BrandMapping\r\n    where TradingPartnerId is not null\r\n)\r\n\r\nselect * from final;", "language": "sql", "refs": [{"name": "seed_Brands", "package": null, "version": null}, {"name": "int_marketing__SourcesMapped", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.kns_dbt.seed_Brands", "model.kns_dbt.int_marketing__SourcesMapped"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\FactMarketingAd.sql", "compiled": true, "compiled_code": "with \n\nbrands as (\n    select * from \"KNSDevDbt\".\"prod\".\"seed_Brands\"\n),\n\nmarketing_data as (\n\n    select * from \"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_marketing__SourcesMapped\"\n\n),\n\nfinal as (\n    select \n        m.[Date],\n        m.[AdName],\n        m.[AdSet],\n        m.[Campaign],\n        m.TradingPartnerId,\n        m.[Platform],\n        m.Channel,\n        m.Type,\n        b.BrandId,\n        m.ObjectiveMapped as Objective,\n        m.LandingPageMapped as LandingPage,\n        m.ParsedClass1 as Class1,\n        m.ParsedClass2 as Class2,\n        m.ParsedClass3 as Class3,\n        cast(Spend as decimal(19, 4)) as Spend,\n        cast(ClickThrough as decimal(19, 4)) as ClickThrough,\n        cast(Impressions as decimal(19, 4)) as Impressions,\n        cast(Conversions as decimal(19, 4)) as Conversions,\n        cast(SalesDollars as decimal(19, 4)) as SalesDollars,\n        cast(SalesUnits as decimal(19, 4)) as SalesUnits\n\n    from marketing_data m\n    left join brands b \n        on b.Brand = m.BrandMapping\n    where TradingPartnerId is not null\n)\n\nselect * from final;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.FactReturnRate": {"database": "KNSDevDbt", "schema": "dbt_prod_marts", "name": "FactReturnRate", "resource_type": "model", "package_name": "kns_dbt", "path": "marts\\FactReturnRate.sql", "original_file_path": "models\\marts\\FactReturnRate.sql", "unique_id": "model.kns_dbt.FactReturnRate", "fqn": ["kns_dbt", "marts", "FactReturnRate"], "alias": "FactReturnRate", "checksum": {"name": "sha256", "checksum": "e745c6d26ec9a13c05a811500c64009c0f50a2e9f51c3dbe403b78bd40b780ad"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_marts", "materialized": "table"}, "created_at": 1748168169.1550336, "relation_name": "\"KNSDevDbt\".\"dbt_prod_marts\".\"FactReturnRate\"", "raw_code": "with\r\n\r\nparams as (\r\n    select \r\n        70 as stat_threshold,\r\n        1 as return_processing_day\r\n),\r\n\r\nreturns_temp as (\r\n\r\n    select * from {{ ref('int_sales__ReturnRatePrep')}}\r\n\r\n),\r\n\r\nmedian as (\r\n\r\n    select distinct\r\n        TradingPartner,\r\n        case\r\n            when (select count(*)\r\n                from returns_temp temp\r\n                where ReturnDays is not null and main.TradingPartner = temp.TradingPartner) > params.stat_threshold\r\n            then\r\n                ((select max(num) \r\n                from (select top 50 percent ReturnDays AS num \r\n                        from returns_temp temp \r\n                        where ReturnDays is not null and main.TradingPartner = temp.TradingPartner \r\n                        order by ReturnDays) onehalf)\r\n                +\r\n                (select min(num) \r\n                from (select top 50 percent ReturnDays AS num \r\n                        from returns_temp temp \r\n                        where ReturnDays is not null and main.TradingPartner = temp.TradingPartner \r\n                        order by ReturnDays desc) otherhalf)\r\n                ) / 2 + params.return_processing_day\r\n            else null\r\n        end as MedianDays\r\n    from returns_temp main\r\n    cross join params\r\n\r\n),\r\n\r\naggregated_data as (\r\n\r\n    select \r\n        TradingPartner,\r\n        Parent,\r\n        Item,\r\n        sum(coalesce(ReturnQuantity, 0)) as TotalReturnQuantity,\r\n        sum(coalesce(PurchasedQuantity, 0)) as TotalPurchasedQuantity\r\n    from returns_temp\r\n    group by TradingPartner, Parent, Item\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select \r\n        a.TradingPartner,\r\n        a.Item as ParentColor,\r\n        case \r\n        when a.TotalPurchasedQuantity > params.stat_threshold \r\n                and a.TotalReturnQuantity < a.TotalPurchasedQuantity\r\n        then cast(a.TotalReturnQuantity as float) / a.TotalPurchasedQuantity\r\n        else NULL\r\n        end as PercentReturnRate,\r\n        ISNULL(m.MedianDays, 60) as ReturnLagDays\r\n    from aggregated_data a\r\n    left join median m on m.TradingPartner = a.TradingPartner\r\n    cross join params\r\n    where a.TotalPurchasedQuantity > params.stat_threshold \r\n    and a.TotalReturnQuantity < a.TotalPurchasedQuantity \r\n    and a.TotalPurchasedQuantity > 0\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "int_sales__ReturnRatePrep", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.int_sales__ReturnRatePrep"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\FactReturnRate.sql", "compiled": true, "compiled_code": "with\n\nparams as (\n    select \n        70 as stat_threshold,\n        1 as return_processing_day\n),\n\nreturns_temp as (\n\n    select * from \"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__ReturnRatePrep\"\n\n),\n\nmedian as (\n\n    select distinct\n        TradingPartner,\n        case\n            when (select count(*)\n                from returns_temp temp\n                where ReturnDays is not null and main.TradingPartner = temp.TradingPartner) > params.stat_threshold\n            then\n                ((select max(num) \n                from (select top 50 percent ReturnDays AS num \n                        from returns_temp temp \n                        where ReturnDays is not null and main.TradingPartner = temp.TradingPartner \n                        order by ReturnDays) onehalf)\n                +\n                (select min(num) \n                from (select top 50 percent ReturnDays AS num \n                        from returns_temp temp \n                        where ReturnDays is not null and main.TradingPartner = temp.TradingPartner \n                        order by ReturnDays desc) otherhalf)\n                ) / 2 + params.return_processing_day\n            else null\n        end as MedianDays\n    from returns_temp main\n    cross join params\n\n),\n\naggregated_data as (\n\n    select \n        TradingPartner,\n        Parent,\n        Item,\n        sum(coalesce(ReturnQuantity, 0)) as TotalReturnQuantity,\n        sum(coalesce(PurchasedQuantity, 0)) as TotalPurchasedQuantity\n    from returns_temp\n    group by TradingPartner, Parent, Item\n\n),\n\nfinal as (\n\n    select \n        a.TradingPartner,\n        a.Item as ParentColor,\n        case \n        when a.TotalPurchasedQuantity > params.stat_threshold \n                and a.TotalReturnQuantity < a.TotalPurchasedQuantity\n        then cast(a.TotalReturnQuantity as float) / a.TotalPurchasedQuantity\n        else NULL\n        end as PercentReturnRate,\n        ISNULL(m.MedianDays, 60) as ReturnLagDays\n    from aggregated_data a\n    left join median m on m.TradingPartner = a.TradingPartner\n    cross join params\n    where a.TotalPurchasedQuantity > params.stat_threshold \n    and a.TotalReturnQuantity < a.TotalPurchasedQuantity \n    and a.TotalPurchasedQuantity > 0\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.FactSalesLine": {"database": "KNSDevDbt", "schema": "dbt_prod_marts", "name": "FactSalesLine", "resource_type": "model", "package_name": "kns_dbt", "path": "marts\\FactSalesLine.sql", "original_file_path": "models\\marts\\FactSalesLine.sql", "unique_id": "model.kns_dbt.FactSalesLine", "fqn": ["kns_dbt", "marts", "FactSalesLine"], "alias": "FactSalesLine", "checksum": {"name": "sha256", "checksum": "a76ce8494fa6eb66abe033d707fa553a0c7439e3a83bd68af79014ec1b83a7e9"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\marts\\__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_marts", "materialized": "table"}, "created_at": 1748168169.7019022, "relation_name": "\"KNSDevDbt\".\"dbt_prod_marts\".\"FactSalesLine\"", "raw_code": "with\r\n\r\ndeposco as (\r\n    select * from {{ ref('int_sales__FactSalesLine_Deposco') }}\r\n),\r\n\r\nreturns_accruals as (\r\n  select * from {{ ref('int_sales__FactSalesLine_ReturnsAccruals') }}\r\n)\r\n\r\n-- freight_out_cogs as (\r\n\r\n--   select \r\n--     *\r\n--   from deposco d \r\n--   join {{ ref('stg_deposco__TradingPartner') }} tp\r\n--   on d.TradingPartnerId = tp.TradingPartnerId\r\n--   join {{ ref('stg_deposco__OrderLine') }} ol \r\n--   on ol.OrderLineId = right(d.Number, len(d.Number) - len('Deposco/')) \r\n--   join {{ ref('stg_deposco__OrderHeader') }} oh\r\n--   on ol.OrderHeaderId = oh.OrderHeaderId\r\n--   left join {{ ref('stg_deposco__ShipmentOrderHeader') }} soh \r\n--   on ol.OrderHeaderId = soh.OrderHeaderId\r\n--   left join {{ ref('stg_deposco__Shipment') }} s \r\n--   on soh.ShipmentId = s.ShipmentId and s.FreightTermsType = 'Prepaid'\r\n--   left join {{ ref('stg_deposco__ShipmentLine') }} sl\r\n--   on s.ShipmentId = sl.ShipmentId\r\n--   where d.Number like 'Deposco/%'\r\n--   and tp.UpsAccountNumber = '79V143'\r\n--   group by d.Number, d.Quantity\r\n  \r\n-- )\r\n\r\nselect * from deposco", "language": "sql", "refs": [{"name": "int_sales__FactSalesLine_Deposco", "package": null, "version": null}, {"name": "int_sales__FactSalesLine_ReturnsAccruals", "package": null, "version": null}, {"name": "stg_deposco__TradingPartner", "package": null, "version": null}, {"name": "stg_deposco__OrderLine", "package": null, "version": null}, {"name": "stg_deposco__OrderHeader", "package": null, "version": null}, {"name": "stg_deposco__ShipmentOrderHeader", "package": null, "version": null}, {"name": "stg_deposco__Shipment", "package": null, "version": null}, {"name": "stg_deposco__ShipmentLine", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.int_sales__FactSalesLine_Deposco", "model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals", "model.kns_dbt.stg_deposco__TradingPartner", "model.kns_dbt.stg_deposco__OrderLine", "model.kns_dbt.stg_deposco__OrderHeader", "model.kns_dbt.stg_deposco__ShipmentOrderHeader", "model.kns_dbt.stg_deposco__Shipment", "model.kns_dbt.stg_deposco__ShipmentLine"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\FactSalesLine.sql", "compiled": true, "compiled_code": "with\n\ndeposco as (\n    select * from \"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__FactSalesLine_Deposco\"\n),\n\nreturns_accruals as (\n  select * from \"KNSDevDbt\".\"dbt_prod_intermediate\".\"int_sales__FactSalesLine_ReturnsAccruals\"\n)\n\n-- freight_out_cogs as (\n\n--   select \n--     *\n--   from deposco d \n--   join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__TradingPartner\" tp\n--   on d.TradingPartnerId = tp.TradingPartnerId\n--   join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\" ol \n--   on ol.OrderLineId = right(d.Number, len(d.Number) - len('Deposco/')) \n--   join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\" oh\n--   on ol.OrderHeaderId = oh.OrderHeaderId\n--   left join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__ShipmentOrderHeader\" soh \n--   on ol.OrderHeaderId = soh.OrderHeaderId\n--   left join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Shipment\" s \n--   on soh.ShipmentId = s.ShipmentId and s.FreightTermsType = 'Prepaid'\n--   left join \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__ShipmentLine\" sl\n--   on s.ShipmentId = sl.ShipmentId\n--   where d.Number like 'Deposco/%'\n--   and tp.UpsAccountNumber = '79V143'\n--   group by d.Number, d.Quantity\n  \n-- )\n\nselect * from deposco", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.FreightForwarders": {"database": "KNSDevDbt", "schema": "dbt_prod_marts", "name": "FreightForwarders", "resource_type": "model", "package_name": "kns_dbt", "path": "marts\\FreightForwarders.sql", "original_file_path": "models\\marts\\FreightForwarders.sql", "unique_id": "model.kns_dbt.FreightForwarders", "fqn": ["kns_dbt", "marts", "FreightForwarders"], "alias": "FreightForwarders", "checksum": {"name": "sha256", "checksum": "9abe053adb9a703e38f5c55153e349fffa8b072e73f59e2a52475004f555d41a"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\marts\\__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_marts", "materialized": "table"}, "created_at": 1748168169.7019022, "relation_name": "\"KNSDevDbt\".\"dbt_prod_marts\".\"FreightForwarders\"", "raw_code": "with\r\n\r\nair_and_sea as (\r\n\r\n    select \r\n        Number,\r\n        FreightForwarder,\r\n        min([VesselLoadedAt]) as VesselLoadedAt,\r\n        min([EstimatedUSPortAt]) as EstimatedUSPortAt,\r\n        min([EstimatedUSStartShipAt]) as EstimatedUSStartShipAt,\r\n        min([EstimatedArrivalAt]) as EstimatedArrivalAt\r\n    from {{ ref('stg_kns__FreightForwarder_AirAndSea') }}\r\n    where Number != ''\r\n        and Number is not null\r\n    group by Number, FreightForwarder\r\n),\r\n\r\ndsv as (\r\n\r\n    select * from {{ ref('stg_kns__FreightForwarder_DSV') }}\r\n\r\n),\r\n\r\nsfi as (\r\n\r\n    select * from {{ ref('stg_kns__FreightForwarder_SFI') }}\r\n\r\n),\r\n\r\npo_master_file as (\r\n\r\n    select * from {{ ref('stg_kns__FreightForwarder_POMasterFile') }}\r\n    group by [Number], FreightForwarder, VesselLoadedAt, EstimatedUSPortAt, EstimatedUSStartShipAt, EstimatedArrivalAt\r\n\r\n),\r\n\r\ncombined as (\r\n\r\n    select\r\n        *,\r\n        1 as priority\r\n    from air_and_sea\r\n\r\n    union all\r\n\r\n    select\r\n        *,\r\n        2 as priority\r\n    from dsv\r\n\r\n    union all\r\n\r\n    select\r\n        *,\r\n        3 as priority\r\n    from sfi\r\n\r\n    union all\r\n\r\n    select\r\n        *,\r\n        4 as priority\r\n    from po_master_file\r\n\r\n),\r\n\r\nranked as (\r\n\r\n    select \r\n        *,\r\n        row_number() over (partition by Number order by priority) as row_num\r\n    from combined\r\n\r\n)\r\n\r\nselect \r\n    Number, FreightForwarder, VesselLoadedAt, EstimatedUSPortAt, EstimatedUSStartShipAt, EstimatedArrivalAt\r\nfrom ranked\r\nwhere row_num = 1", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_AirAndSea", "package": null, "version": null}, {"name": "stg_kns__FreightForwarder_DSV", "package": null, "version": null}, {"name": "stg_kns__FreightForwarder_SFI", "package": null, "version": null}, {"name": "stg_kns__FreightForwarder_POMasterFile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "model.kns_dbt.stg_kns__FreightForwarder_DSV", "model.kns_dbt.stg_kns__FreightForwarder_SFI", "model.kns_dbt.stg_kns__FreightForwarder_POMasterFile"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\FreightForwarders.sql", "compiled": true, "compiled_code": "with\n\nair_and_sea as (\n\n    select \n        Number,\n        FreightForwarder,\n        min([VesselLoadedAt]) as VesselLoadedAt,\n        min([EstimatedUSPortAt]) as EstimatedUSPortAt,\n        min([EstimatedUSStartShipAt]) as EstimatedUSStartShipAt,\n        min([EstimatedArrivalAt]) as EstimatedArrivalAt\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_AirAndSea\"\n    where Number != ''\n        and Number is not null\n    group by Number, FreightForwarder\n),\n\ndsv as (\n\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_DSV\"\n\n),\n\nsfi as (\n\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_SFI\"\n\n),\n\npo_master_file as (\n\n    select * from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_POMasterFile\"\n    group by [Number], FreightForwarder, VesselLoadedAt, EstimatedUSPortAt, EstimatedUSStartShipAt, EstimatedArrivalAt\n\n),\n\ncombined as (\n\n    select\n        *,\n        1 as priority\n    from air_and_sea\n\n    union all\n\n    select\n        *,\n        2 as priority\n    from dsv\n\n    union all\n\n    select\n        *,\n        3 as priority\n    from sfi\n\n    union all\n\n    select\n        *,\n        4 as priority\n    from po_master_file\n\n),\n\nranked as (\n\n    select \n        *,\n        row_number() over (partition by Number order by priority) as row_num\n    from combined\n\n)\n\nselect \n    Number, FreightForwarder, VesselLoadedAt, EstimatedUSPortAt, EstimatedUSStartShipAt, EstimatedArrivalAt\nfrom ranked\nwhere row_num = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_dbo__Calendar": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_dbo__Calendar", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\dbo\\stg_dbo__Calendar.sql", "original_file_path": "models\\staging\\datalake\\dbo\\stg_dbo__Calendar.sql", "unique_id": "model.kns_dbt.stg_dbo__Calendar", "fqn": ["kns_dbt", "staging", "datalake", "dbo", "stg_dbo__Calendar"], "alias": "stg_dbo__Calendar", "checksum": {"name": "sha256", "checksum": "fb3771582c671714760e7eeb7cdcecf3ed01ad0c91eafe43ece7a0ebbde90f0b"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model grabs data from calendar", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\dbo\\_dbo__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.8737683, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_dbo__Calendar\"", "raw_code": "with\r\n\r\ncalendar as (\r\n\r\n    select\r\n        *\r\n    from {{ source('dbo', 'calendar') }}\r\n)\r\n\r\nselect * from calendar;", "language": "sql", "refs": [], "sources": [["dbo", "calendar"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.dbo.calendar"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\dbo\\stg_dbo__Calendar.sql", "compiled": true, "compiled_code": "with\n\ncalendar as (\n\n    select\n        *\n    from \"KNSDataLake\".\"dbo\".\"calendar\"\n)\n\nselect * from calendar;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__CoLine": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__CoLine", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__CoLine.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__CoLine.sql", "unique_id": "model.kns_dbt.stg_deposco__CoLine", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__CoLine"], "alias": "stg_deposco__CoLine", "checksum": {"name": "sha256", "checksum": "8bba91a3aa6a9f2d982627dfc005b5d60212826b4b2b3ad26e37da0d99789179"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__CoLine\"", "raw_code": "with \r\n\r\nsource as (\r\n    \r\n    select * from {{ source('deposco', 'co_line') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        cast(CO_LINE_ID as bigint) as CoLineId,\r\n        cast(UPDATED_DATE as datetime) as UpdatedDate,\r\n        cast(STATUS as varchar(50)) as Status\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "co_line"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.co_line"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__CoLine.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n    \n    select * from \"KNSDataLake\".\"deposco\".\"co_line\"\n\n),\n\ncleaned as (\n\n    select\n        cast(CO_LINE_ID as bigint) as CoLineId,\n        cast(UPDATED_DATE as datetime) as UpdatedDate,\n        cast(STATUS as varchar(50)) as Status\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__Item": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__Item", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__Item.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__Item.sql", "unique_id": "model.kns_dbt.stg_deposco__Item", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__Item"], "alias": "stg_deposco__Item", "checksum": {"name": "sha256", "checksum": "228ee346e4714123db9136bc74778ad3d0f13a231c3728f6265d259c51a38c21"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Item\"", "raw_code": "with\r\n\r\nsource as (\r\n    \r\n        select * from {{ source('deposco', 'item') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(ITEM_ID as bigint) as ItemId,\r\n        cast(INTANGIBLE_ITEM_FLAG as bit) as IntangibleItemFlag,\r\n        cast(CLASS_TYPE as nvarchar(30)) as ClassType,\r\n        cast(STYLE_NUMBER as varchar(100)) as StyleNumber,\r\n        cast(COLOR_NAME as varchar(150)) as ColorName,\r\n        cast(NAME as varchar(250)) as Name,\r\n        cast([NUMBER] as varchar(200)) as [Number],\r\n        cast(UPDATED_DATE as datetime) as UpdatedDate\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.item"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__Item.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n        select * from \"KNSDataLake\".\"deposco\".\"item\"\n\n),\n\ncleaned as (\n\n    select \n        cast(ITEM_ID as bigint) as ItemId,\n        cast(INTANGIBLE_ITEM_FLAG as bit) as IntangibleItemFlag,\n        cast(CLASS_TYPE as nvarchar(30)) as ClassType,\n        cast(STYLE_NUMBER as varchar(100)) as StyleNumber,\n        cast(COLOR_NAME as varchar(150)) as ColorName,\n        cast(NAME as varchar(250)) as Name,\n        cast([NUMBER] as varchar(200)) as [Number],\n        cast(UPDATED_DATE as datetime) as UpdatedDate\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__Location": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__Location", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__Location.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__Location.sql", "unique_id": "model.kns_dbt.stg_deposco__Location", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__Location"], "alias": "stg_deposco__Location", "checksum": {"name": "sha256", "checksum": "095e9d1a1192cef6431c684a548a2df70490c6f208ba97104ea7144a4c721695"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Location\"", "raw_code": "with\r\n\r\nsource as (\r\n    \r\n        select * from {{ source('deposco', 'location') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(LOCATION_ID as bigint) as LocationId\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "location"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.location"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__Location.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n        select * from \"KNSDataLake\".\"deposco\".\"location\"\n\n),\n\ncleaned as (\n\n    select \n        cast(LOCATION_ID as bigint) as LocationId\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__OrderHeader": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__OrderHeader", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__OrderHeader.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__OrderHeader.sql", "unique_id": "model.kns_dbt.stg_deposco__OrderHeader", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__OrderHeader"], "alias": "stg_deposco__OrderHeader", "checksum": {"name": "sha256", "checksum": "bba1b53cca017f90175720c58eae1bbf74225c623c4856cd561fabb2796322d6"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderHeader\"", "raw_code": "with\r\n\r\nsource as (\r\n    \r\n    select * from {{ source('deposco', 'order_header') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        cast(ORDER_HEADER_ID as bigint) as OrderHeaderId,\r\n        cast(CURRENT_STATUS as varchar(50)) as CurrentStatus,\r\n        cast(TYPE as varchar(50)) as Type,\r\n        cast(CREATED_DATE as date) as CreatedDate,\r\n        cast(SHIPPING_STATUS as int) as ShippingStatus,\r\n        cast(CONSIGNEE_PARTNER_ID as bigint) as ConsigneePartnerId,\r\n        cast(SELLER as varchar(50)) as Seller,\r\n        cast(PARENT_ORDER_ID as bigint) as ParentOrderId,\r\n        cast(ORDER_SOURCE as varchar(100)) as OrderSource,\r\n        cast(CUSTOMER_ORDER_NUMBER as varchar(50)) as CustomerOrderNumber,\r\n        cast(UPDATED_DATE as datetime) as UpdatedDate,\r\n        cast(KNS_MT_PLACED_DATE as datetime) as KnsMtPlacedDate,\r\n        cast(KNS_MT_CREATED_DATE as datetime) as KnsMtCreatedDate,\r\n        cast(KNS_MT_PLANNED_RELEASE_DATE as\tdatetime) as KnsMtPlannedReleaseDate,\r\n        cast(KNS_MT_PLANNED_SHIP_DATE as datetime) as KnsMtPlannedShipDate,\r\n        cast(KNS_MT_ACTUAL_SHIP_DATE as\tdatetime) as KnsMtActualShipDate,\r\n        cast(CO_HEADER_ID as bigint) as CoHeaderId\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "order_header"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.order_header"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__OrderHeader.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n    select * from \"KNSDataLake\".\"deposco\".\"order_header\"\n\n),\n\ncleaned as (\n\n    select\n        cast(ORDER_HEADER_ID as bigint) as OrderHeaderId,\n        cast(CURRENT_STATUS as varchar(50)) as CurrentStatus,\n        cast(TYPE as varchar(50)) as Type,\n        cast(CREATED_DATE as date) as CreatedDate,\n        cast(SHIPPING_STATUS as int) as ShippingStatus,\n        cast(CONSIGNEE_PARTNER_ID as bigint) as ConsigneePartnerId,\n        cast(SELLER as varchar(50)) as Seller,\n        cast(PARENT_ORDER_ID as bigint) as ParentOrderId,\n        cast(ORDER_SOURCE as varchar(100)) as OrderSource,\n        cast(CUSTOMER_ORDER_NUMBER as varchar(50)) as CustomerOrderNumber,\n        cast(UPDATED_DATE as datetime) as UpdatedDate,\n        cast(KNS_MT_PLACED_DATE as datetime) as KnsMtPlacedDate,\n        cast(KNS_MT_CREATED_DATE as datetime) as KnsMtCreatedDate,\n        cast(KNS_MT_PLANNED_RELEASE_DATE as\tdatetime) as KnsMtPlannedReleaseDate,\n        cast(KNS_MT_PLANNED_SHIP_DATE as datetime) as KnsMtPlannedShipDate,\n        cast(KNS_MT_ACTUAL_SHIP_DATE as\tdatetime) as KnsMtActualShipDate,\n        cast(CO_HEADER_ID as bigint) as CoHeaderId\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__OrderLine": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__OrderLine", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__OrderLine.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__OrderLine.sql", "unique_id": "model.kns_dbt.stg_deposco__OrderLine", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__OrderLine"], "alias": "stg_deposco__OrderLine", "checksum": {"name": "sha256", "checksum": "0eab5e8c6b5e09c3a8ae284d7eb56d8eafedc34dd13563c82e0fce9c42ceb5f7"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__OrderLine\"", "raw_code": "with\r\n\r\nsource as (\r\n    \r\n    select * from {{ source('deposco', 'order_line') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        cast(ORDER_LINE_ID as bigint) as OrderLineId,\r\n        cast(PACK_ID as bigint) as PackId,\r\n        cast(ORDER_HEADER_ID as bigint) as OrderHeaderId,\r\n        cast(ITEM_ID as bigint) as ItemId,\r\n        cast(ORDER_PACK_QUANTITY as float) as OrderPackQuantity,\r\n        cast(ORDER_LINE_STATUS as varchar(50)) as OrderLineStatus,\r\n        cast(CO_LINE_ID as bigint) as CoLineId,\r\n        cast(SHIPPED_PACK_QUANTITY as float) as ShippedPackQuantity,\r\n        cast(UNIT_COST as float) as UnitCost,\r\n        cast(UPDATED_DATE as datetime) as UpdatedDate\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "order_line"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.order_line"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__OrderLine.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n    select * from \"KNSDataLake\".\"deposco\".\"order_line\"\n\n),\n\ncleaned as (\n\n    select\n        cast(ORDER_LINE_ID as bigint) as OrderLineId,\n        cast(PACK_ID as bigint) as PackId,\n        cast(ORDER_HEADER_ID as bigint) as OrderHeaderId,\n        cast(ITEM_ID as bigint) as ItemId,\n        cast(ORDER_PACK_QUANTITY as float) as OrderPackQuantity,\n        cast(ORDER_LINE_STATUS as varchar(50)) as OrderLineStatus,\n        cast(CO_LINE_ID as bigint) as CoLineId,\n        cast(SHIPPED_PACK_QUANTITY as float) as ShippedPackQuantity,\n        cast(UNIT_COST as float) as UnitCost,\n        cast(UPDATED_DATE as datetime) as UpdatedDate\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__Pack": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__Pack", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__Pack.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__Pack.sql", "unique_id": "model.kns_dbt.stg_deposco__Pack", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__Pack"], "alias": "stg_deposco__Pack", "checksum": {"name": "sha256", "checksum": "b95b97c42d0a873a17941fe9c321048ae08feace87065823f82f56b8100824e0"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Pack\"", "raw_code": "with\r\n\r\nsource as (\r\n    \r\n        select * from {{ source('deposco', 'pack') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(PACK_ID as bigint) as PackId,\r\n        cast(QUANTITY as int) as Quantity\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "pack"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.pack"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__Pack.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n        select * from \"KNSDataLake\".\"deposco\".\"pack\"\n\n),\n\ncleaned as (\n\n    select \n        cast(PACK_ID as bigint) as PackId,\n        cast(QUANTITY as int) as Quantity\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__ReceiptLine": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__ReceiptLine", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__ReceiptLine.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__ReceiptLine.sql", "unique_id": "model.kns_dbt.stg_deposco__ReceiptLine", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__ReceiptLine"], "alias": "stg_deposco__ReceiptLine", "checksum": {"name": "sha256", "checksum": "23ced799f0960aab0f3e452e18404b9371ffe504c4fc4c42a85d6a32b3300a93"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__ReceiptLine\"", "raw_code": "with\r\n\r\nsource as (\r\n    \r\n        select * from {{ source('deposco', 'receipt_line') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(ORDER_LINE_ID as bigint) as OrderLineId,\r\n        cast(RECEIVED_PACK_QUANTITY as int) as ReceivedPackQuantity\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "receipt_line"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.receipt_line"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__ReceiptLine.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n        select * from \"KNSDataLake\".\"deposco\".\"receipt_line\"\n\n),\n\ncleaned as (\n\n    select \n        cast(ORDER_LINE_ID as bigint) as OrderLineId,\n        cast(RECEIVED_PACK_QUANTITY as int) as ReceivedPackQuantity\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__Shipment": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__Shipment", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__Shipment.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__Shipment.sql", "unique_id": "model.kns_dbt.stg_deposco__Shipment", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__Shipment"], "alias": "stg_deposco__Shipment", "checksum": {"name": "sha256", "checksum": "b4c7448105f5c0a5983e368a59344298342df040c47c6a00aa485f6e391ee0a3"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__Shipment\"", "raw_code": "with\r\n\r\nsource as (\r\n    \r\n        select * from {{ source('deposco', 'shipment') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(SHIPMENT_ID as bigint) as ShipmentId,\r\n        cast(FREIGHT_TERMS_TYPE as varchar(50)) as FreightTermsType,\r\n        cast(SHIPPING_COST as float) as ShippingCost\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "shipment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.shipment"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__Shipment.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n        select * from \"KNSDataLake\".\"deposco\".\"shipment\"\n\n),\n\ncleaned as (\n\n    select \n        cast(SHIPMENT_ID as bigint) as ShipmentId,\n        cast(FREIGHT_TERMS_TYPE as varchar(50)) as FreightTermsType,\n        cast(SHIPPING_COST as float) as ShippingCost\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__ShipmentLine": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__ShipmentLine", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__ShipmentLine.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__ShipmentLine.sql", "unique_id": "model.kns_dbt.stg_deposco__ShipmentLine", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__ShipmentLine"], "alias": "stg_deposco__ShipmentLine", "checksum": {"name": "sha256", "checksum": "72cdf99c27f8c2b2d1f78cba5a2a0deba3e1318db02cda6284af8b617a324439"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__ShipmentLine\"", "raw_code": "with\r\n\r\nsource as (\r\n    \r\n        select * from {{ source('deposco', 'shipment_line') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(SHIPMENT_ID as bigint) as ShipmentId,\r\n        cast(SHIPPED_PACK_QUANTITY as float) as ShippedPackQuantity\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "shipment_line"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.shipment_line"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__ShipmentLine.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n        select * from \"KNSDataLake\".\"deposco\".\"shipment_line\"\n\n),\n\ncleaned as (\n\n    select \n        cast(SHIPMENT_ID as bigint) as ShipmentId,\n        cast(SHIPPED_PACK_QUANTITY as float) as ShippedPackQuantity\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__ShipmentOrderHeader": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__ShipmentOrderHeader", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__ShipmentOrderHeader.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__ShipmentOrderHeader.sql", "unique_id": "model.kns_dbt.stg_deposco__ShipmentOrderHeader", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__ShipmentOrderHeader"], "alias": "stg_deposco__ShipmentOrderHeader", "checksum": {"name": "sha256", "checksum": "073497a25a409168c55f3f22a481eab77e5907e71467341a26cd076c3de85264"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__ShipmentOrderHeader\"", "raw_code": "with\r\n\r\nsource as (\r\n    \r\n        select * from {{ source('deposco', 'shipment_order_header') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(ORDER_HEADER_ID as bigint) as OrderHeaderId,\r\n        cast(SHIPMENT_ID as bigint) as ShipmentId\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "shipment_order_header"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.shipment_order_header"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__ShipmentOrderHeader.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n    \n        select * from \"KNSDataLake\".\"deposco\".\"shipment_order_header\"\n\n),\n\ncleaned as (\n\n    select \n        cast(ORDER_HEADER_ID as bigint) as OrderHeaderId,\n        cast(SHIPMENT_ID as bigint) as ShipmentId\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__StockUnit": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__StockUnit", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__StockUnit.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__StockUnit.sql", "unique_id": "model.kns_dbt.stg_deposco__StockUnit", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__StockUnit"], "alias": "stg_deposco__StockUnit", "checksum": {"name": "sha256", "checksum": "3165860d1e8b28aa732cf493bee7f82507fa1296d44b7070fa6aed57273e17e0"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__StockUnit\"", "raw_code": "with \r\n\r\nsource as (\r\n    \r\n    select * from {{ source('deposco', 'stock_unit') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        cast(ITEM_ID as bigint) as ItemId,\r\n        cast(PACK_ID as bigint) as PackId,\r\n        cast(QUANTITY as int) as Quantity,\r\n        cast(PeriodStart as date) as PeriodStart,\r\n        cast(PeriodEnd as date) as PeriodEnd,\r\n        cast(LOCATION_ID as bigint) as LocationId\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "stock_unit"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.stock_unit"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__StockUnit.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n    \n    select * from \"KNSDataLake\".\"deposco\".\"stock_unit\"\n\n),\n\ncleaned as (\n\n    select\n        cast(ITEM_ID as bigint) as ItemId,\n        cast(PACK_ID as bigint) as PackId,\n        cast(QUANTITY as int) as Quantity,\n        cast(PeriodStart as date) as PeriodStart,\n        cast(PeriodEnd as date) as PeriodEnd,\n        cast(LOCATION_ID as bigint) as LocationId\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__StockUnitAuditHistory": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__StockUnitAuditHistory", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__StockUnitAuditHistory.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__StockUnitAuditHistory.sql", "unique_id": "model.kns_dbt.stg_deposco__StockUnitAuditHistory", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__StockUnitAuditHistory"], "alias": "stg_deposco__StockUnitAuditHistory", "checksum": {"name": "sha256", "checksum": "ecec232be4be18d003a43591d5ebadbf8b3fd2086944b55b0cc1656febba5d65"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__StockUnitAuditHistory\"", "raw_code": "with \r\n\r\nsource as (\r\n    \r\n    select * from {{ source('deposco', 'STOCK_UNIT_AUDIT_HISTORY') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        cast(ITEM_ID as bigint) as ItemId,\r\n        cast(PACK_ID as bigint) as PackId,\r\n        cast(QUANTITY as int) as Quantity,\r\n        cast(PeriodStart as date) as PeriodStart,\r\n        cast(PeriodEnd as date) as PeriodEnd,\r\n        cast(LOCATION_ID as bigint) as LocationId\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["deposco", "STOCK_UNIT_AUDIT_HISTORY"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.STOCK_UNIT_AUDIT_HISTORY"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__StockUnitAuditHistory.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n    \n    select * from \"KNSDataLake\".\"deposco\".\"STOCK_UNIT_AUDIT_HISTORY\"\n\n),\n\ncleaned as (\n\n    select\n        cast(ITEM_ID as bigint) as ItemId,\n        cast(PACK_ID as bigint) as PackId,\n        cast(QUANTITY as int) as Quantity,\n        cast(PeriodStart as date) as PeriodStart,\n        cast(PeriodEnd as date) as PeriodEnd,\n        cast(LOCATION_ID as bigint) as LocationId\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_deposco__TradingPartner": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_deposco__TradingPartner", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\deposco\\stg_deposco__TradingPartner.sql", "original_file_path": "models\\staging\\datalake\\deposco\\stg_deposco__TradingPartner.sql", "unique_id": "model.kns_dbt.stg_deposco__TradingPartner", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "stg_deposco__TradingPartner"], "alias": "stg_deposco__TradingPartner", "checksum": {"name": "sha256", "checksum": "6388393bb657202773220f23890b6f91d7ce338db231157050f15a23a8d83864"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model cleans data from trading_partner", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\deposco\\deposco__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.983141, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_deposco__TradingPartner\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select * from {{ source('deposco', 'trading_partner') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n         cast(TRADING_PARTNER_ID as bigint) as TradingPartnerId,\r\n         cast(CODE as varchar(40)) as Code,\r\n         cast(NAME as varchar(50)) as Name,\r\n         cast(BILL_TO_COUNTRY as varchar(100)) as BillToCountry,\r\n         cast(CONTACT_EMAIL as varchar(50)) as ContactEmail,\r\n         cast(TAX_RATE as float) as TaxRate,\r\n         cast(UPS_ACCOUNT_NUMBER as varchar(100)) as UpsAccountNumber\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned;", "language": "sql", "refs": [], "sources": [["deposco", "trading_partner"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.deposco.trading_partner"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\deposco\\stg_deposco__TradingPartner.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"KNSDataLake\".\"deposco\".\"trading_partner\"\n\n),\n\ncleaned as (\n\n    select\n         cast(TRADING_PARTNER_ID as bigint) as TradingPartnerId,\n         cast(CODE as varchar(40)) as Code,\n         cast(NAME as varchar(50)) as Name,\n         cast(BILL_TO_COUNTRY as varchar(100)) as BillToCountry,\n         cast(CONTACT_EMAIL as varchar(50)) as ContactEmail,\n         cast(TAX_RATE as float) as TaxRate,\n         cast(UPS_ACCOUNT_NUMBER as varchar(100)) as UpsAccountNumber\n    from source\n\n)\n\nselect * from cleaned;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_kns__FreightForwarder_AirAndSea", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\kns\\stg_kns__FreightForwarder_AirAndSea.sql", "original_file_path": "models\\staging\\datalake\\kns\\stg_kns__FreightForwarder_AirAndSea.sql", "unique_id": "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "fqn": ["kns_dbt", "staging", "datalake", "kns", "stg_kns__FreightForwarder_AirAndSea"], "alias": "stg_kns__FreightForwarder_AirAndSea", "checksum": {"name": "sha256", "checksum": "9a165fdcff142e017ee5f36abaa1861ef68a7a5d3d36ba8342038d6e1a67c632"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"VesselLoadedAt": {"name": "VesselLoadedAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EstimatedUSPortAt": {"name": "EstimatedUSPortAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EstimatedUSStartShipAt": {"name": "EstimatedUSStartShipAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EstimatedArrivalAt": {"name": "EstimatedArrivalAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\kns\\_kns__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.9987717, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_AirAndSea\"", "raw_code": "with \r\n\r\nsource as (\r\n    \r\n    select * from {{ source('kns', 'FreightForwarder_AirAndSea') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n\t\tcast(SUBSTRING(trim(c.value),0,CHARINDEX(' ',trim(c.value),0)) as varchar(100)) as Number,\r\n\t\t'AirAndSea' as FreightForwarder,\r\n\t\tcast([Load ETD] as date) as VesselLoadedAt,\r\n        case \r\n            when [Last Sea Leg ATA] = '' then null\r\n            else cast([Last Sea Leg ATA] as date)\r\n        end as EstimatedUSPortAt,\r\n        case\r\n            when [First Rail Leg ETD] = '' then null\r\n            else cast([First Rail Leg ETD] as date)\r\n\t\tend as EstimatedUSStartShipAt,\r\n\t\tcast(dateadd(day, iif(s.[Disch.] = 'USSLC', 2, 5), nullif(s.[Disch. ETA], '')) as date) as EstimatedArrivalAt\r\n\tfrom source s\r\n\tcross apply STRING_SPLIT([Container #], ',') c\r\n\twhere trim(c.value) != ''\r\n\tand trim(c.value) not like '(%'\r\n    and [Container #] is not null\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["kns", "FreightForwarder_AirAndSea"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.kns.FreightForwarder_AirAndSea"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\stg_kns__FreightForwarder_AirAndSea.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n    \n    select * from \"KNSDataLake\".\"kns\".\"FreightForwarder_AirAndSea\"\n\n),\n\ncleaned as (\n\n    select\n\t\tcast(SUBSTRING(trim(c.value),0,CHARINDEX(' ',trim(c.value),0)) as varchar(100)) as Number,\n\t\t'AirAndSea' as FreightForwarder,\n\t\tcast([Load ETD] as date) as VesselLoadedAt,\n        case \n            when [Last Sea Leg ATA] = '' then null\n            else cast([Last Sea Leg ATA] as date)\n        end as EstimatedUSPortAt,\n        case\n            when [First Rail Leg ETD] = '' then null\n            else cast([First Rail Leg ETD] as date)\n\t\tend as EstimatedUSStartShipAt,\n\t\tcast(dateadd(day, iif(s.[Disch.] = 'USSLC', 2, 5), nullif(s.[Disch. ETA], '')) as date) as EstimatedArrivalAt\n\tfrom source s\n\tcross apply STRING_SPLIT([Container #], ',') c\n\twhere trim(c.value) != ''\n\tand trim(c.value) not like '(%'\n    and [Container #] is not null\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_kns__FreightForwarder_DSV": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_kns__FreightForwarder_DSV", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\kns\\stg_kns__FreightForwarder_DSV.sql", "original_file_path": "models\\staging\\datalake\\kns\\stg_kns__FreightForwarder_DSV.sql", "unique_id": "model.kns_dbt.stg_kns__FreightForwarder_DSV", "fqn": ["kns_dbt", "staging", "datalake", "kns", "stg_kns__FreightForwarder_DSV"], "alias": "stg_kns__FreightForwarder_DSV", "checksum": {"name": "sha256", "checksum": "e1262496b695ec1719033975456917d21d0de7507484137c441be017a54c5bfa"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"VesselLoadedAt": {"name": "VesselLoadedAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EstimatedUSPortAt": {"name": "EstimatedUSPortAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EstimatedUSStartShipAt": {"name": "EstimatedUSStartShipAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EstimatedArrivalAt": {"name": "EstimatedArrivalAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\kns\\_kns__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.9987717, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_DSV\"", "raw_code": "with \r\n\r\nsource as (\r\n    \r\n        select * from {{ source('kns', 'FreightForwarder_DSV') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n        select\r\n            cast(ContainerNumber as varchar(100)) as [Number],\r\n            'DSV' as FreightForwarder,\r\n            cast(max(iif(EventCode='FLO', EventDate, null)) as date) as VesselLoadedAt,\r\n            cast(coalesce(\r\n                max(iif(EventCode='ARV', EventDate, null)),\r\n                max(iif(EventCode='ETA', EventDate, null))\r\n            ) as date) as EstimatedUSPortAt,\r\n            cast(null as date) as EstimatedUSStartShipAt,\r\n            cast(max(iif(EventCode='ESTIMATED_DELIVERY', EventDate, null)) as date) as EstimatedArrivalAt\r\n        from source\r\n        where ContainerNumber is not null\r\n            and ContainerNumber != ''\r\n        group by ContainerNumber\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["kns", "FreightForwarder_DSV"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.kns.FreightForwarder_DSV"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\stg_kns__FreightForwarder_DSV.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n    \n        select * from \"KNSDataLake\".\"kns\".\"FreightForwarder_DSV\"\n\n),\n\ncleaned as (\n\n        select\n            cast(ContainerNumber as varchar(100)) as [Number],\n            'DSV' as FreightForwarder,\n            cast(max(iif(EventCode='FLO', EventDate, null)) as date) as VesselLoadedAt,\n            cast(coalesce(\n                max(iif(EventCode='ARV', EventDate, null)),\n                max(iif(EventCode='ETA', EventDate, null))\n            ) as date) as EstimatedUSPortAt,\n            cast(null as date) as EstimatedUSStartShipAt,\n            cast(max(iif(EventCode='ESTIMATED_DELIVERY', EventDate, null)) as date) as EstimatedArrivalAt\n        from source\n        where ContainerNumber is not null\n            and ContainerNumber != ''\n        group by ContainerNumber\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_kns__FreightForwarder_POMasterFile": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_kns__FreightForwarder_POMasterFile", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\kns\\stg_kns__FreightForwarder_POMasterFile.sql", "original_file_path": "models\\staging\\datalake\\kns\\stg_kns__FreightForwarder_POMasterFile.sql", "unique_id": "model.kns_dbt.stg_kns__FreightForwarder_POMasterFile", "fqn": ["kns_dbt", "staging", "datalake", "kns", "stg_kns__FreightForwarder_POMasterFile"], "alias": "stg_kns__FreightForwarder_POMasterFile", "checksum": {"name": "sha256", "checksum": "3d7c61c36a788d0412325f1bf83da4847994f907d6b320ada8f80668f6f173c7"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\kns\\_kns__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.9987717, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_POMasterFile\"", "raw_code": "with \r\n\r\nsource as (\r\n    \r\n    select ContainerNumber from {{ source('kns', 'POMasterFile') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        ContainerNumber as [Number],\r\n        'UnknownFromMaster' as FreightForwarder,\r\n        cast(null as date) as VesselLoadedAt,\r\n        cast(null as date) as EstimatedUSPortAt,\r\n        cast(null as date) as EstimatedUSStartShipAt,\r\n        cast(null as date) as EstimatedArrivalAt\r\n    from source \r\n    where ContainerNumber is not null\r\n    and ContainerNumber != ''\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["kns", "POMasterFile"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.kns.POMasterFile"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\stg_kns__FreightForwarder_POMasterFile.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n    \n    select ContainerNumber from \"KNSDataLake\".\"kns\".\"POMasterFile\"\n\n),\n\ncleaned as (\n\n    select\n        ContainerNumber as [Number],\n        'UnknownFromMaster' as FreightForwarder,\n        cast(null as date) as VesselLoadedAt,\n        cast(null as date) as EstimatedUSPortAt,\n        cast(null as date) as EstimatedUSStartShipAt,\n        cast(null as date) as EstimatedArrivalAt\n    from source \n    where ContainerNumber is not null\n    and ContainerNumber != ''\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_kns__FreightForwarder_SFI": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_kns__FreightForwarder_SFI", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\kns\\stg_kns__FreightForwarder_SFI.sql", "original_file_path": "models\\staging\\datalake\\kns\\stg_kns__FreightForwarder_SFI.sql", "unique_id": "model.kns_dbt.stg_kns__FreightForwarder_SFI", "fqn": ["kns_dbt", "staging", "datalake", "kns", "stg_kns__FreightForwarder_SFI"], "alias": "stg_kns__FreightForwarder_SFI", "checksum": {"name": "sha256", "checksum": "e526b0995b426addd530e9f8e2877b15feba826fcfd101865ccfd9ca212ee7ce"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"VesselLoadedAt": {"name": "VesselLoadedAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EstimatedUSPortAt": {"name": "EstimatedUSPortAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EstimatedUSStartShipAt": {"name": "EstimatedUSStartShipAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EstimatedArrivalAt": {"name": "EstimatedArrivalAt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\kns\\_kns__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.9987717, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_SFI\"", "raw_code": "with \r\n\r\nsource as (\r\n    \r\n    select * from {{ source('kns', 'FreightForwarder_SFI') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        cast([Container No.] as varchar(100)) as [Number],\r\n        'SFI' as FreightForwarder,\r\n        cast(null as date) as VesselLoadedAt,\r\n        cast(coalesce(ATA, ETA) as date) as EstimatedUSPortAt,\r\n        cast(dateadd(day, -7, [Place of Delivery ETA]) as date) as EstimatedUSStartShipAt,\r\n        cast(dateadd(day, 4, [Place of Delivery ETA]) as date) as EstimatedArrivalAt\r\n    from source\r\n    where [Container No.] is not null\r\n    and [Container No.] != ''\r\n        \r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["kns", "FreightForwarder_SFI"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.kns.FreightForwarder_SFI"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\stg_kns__FreightForwarder_SFI.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n    \n    select * from \"KNSDataLake\".\"kns\".\"FreightForwarder_SFI\"\n\n),\n\ncleaned as (\n\n    select\n        cast([Container No.] as varchar(100)) as [Number],\n        'SFI' as FreightForwarder,\n        cast(null as date) as VesselLoadedAt,\n        cast(coalesce(ATA, ETA) as date) as EstimatedUSPortAt,\n        cast(dateadd(day, -7, [Place of Delivery ETA]) as date) as EstimatedUSStartShipAt,\n        cast(dateadd(day, 4, [Place of Delivery ETA]) as date) as EstimatedArrivalAt\n    from source\n    where [Container No.] is not null\n    and [Container No.] != ''\n        \n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_kns__HistoricalDimItem": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_kns__HistoricalDimItem", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\kns\\stg_kns__HistoricalDimItem.sql", "original_file_path": "models\\staging\\datalake\\kns\\stg_kns__HistoricalDimItem.sql", "unique_id": "model.kns_dbt.stg_kns__HistoricalDimItem", "fqn": ["kns_dbt", "staging", "datalake", "kns", "stg_kns__HistoricalDimItem"], "alias": "stg_kns__HistoricalDimItem", "checksum": {"name": "sha256", "checksum": "9c6eb870b8750592914e9ccdaa99b083b79c5ecb3f712cf9d79d7f8bfe7e321c"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\kns\\_kns__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.9987717, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__HistoricalDimItem\"", "raw_code": "with \r\n\r\nsource as (\r\n    \r\n    select * from {{ source('Dev', 'HistoricalDimItem') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        cast(ItemId as int) as ItemId,\r\n        cast(Category as nvarchar(200)) as Category,\r\n        cast(Subcategory as nvarchar(200)) as Subcategory,\r\n        cast(FirstReceivedDate as date) as FirstReceivedDate,\r\n        cast(CloseOut as nvarchar(8)) as CloseOut,\r\n        cast(CloseOutDate as date) as CloseOutDate,\r\n        cast(ToeStyle as nvarchar(50)) as ToeStyle,\r\n        cast(HeelType as nvarchar(50)) as HeelType,\r\n        cast(LiquidationCloseOut as bit) as LiquidationCloseOut,\r\n        cast(SoftCloseOut as bit) as SoftCloseOut,\r\n        cast(MasterCategory as nvarchar(200)) as MasterCategory\r\n    from source\r\n        \r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["Dev", "HistoricalDimItem"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.Dev.HistoricalDimItem"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\stg_kns__HistoricalDimItem.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n    \n    select * from \"KNSDevSandbox\".\"Dev\".\"HistoricalDimItem\"\n\n),\n\ncleaned as (\n\n    select\n        cast(ItemId as int) as ItemId,\n        cast(Category as nvarchar(200)) as Category,\n        cast(Subcategory as nvarchar(200)) as Subcategory,\n        cast(FirstReceivedDate as date) as FirstReceivedDate,\n        cast(CloseOut as nvarchar(8)) as CloseOut,\n        cast(CloseOutDate as date) as CloseOutDate,\n        cast(ToeStyle as nvarchar(50)) as ToeStyle,\n        cast(HeelType as nvarchar(50)) as HeelType,\n        cast(LiquidationCloseOut as bit) as LiquidationCloseOut,\n        cast(SoftCloseOut as bit) as SoftCloseOut,\n        cast(MasterCategory as nvarchar(200)) as MasterCategory\n    from source\n        \n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_marketing__CoOpCampaign": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_marketing__CoOpCampaign", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\marketing\\stg_marketing__CoOpCampaign.sql", "original_file_path": "models\\staging\\datalake\\marketing\\stg_marketing__CoOpCampaign.sql", "unique_id": "model.kns_dbt.stg_marketing__CoOpCampaign", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "stg_marketing__CoOpCampaign"], "alias": "stg_marketing__CoOpCampaign", "checksum": {"name": "sha256", "checksum": "d3475df77bc286eadd90a89efdcd39af5b8732cc3041c76ea10afd818c808d25"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model cleans data from CoOpCampaigns", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\marketing\\_marketing__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1550176, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__CoOpCampaign\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select * from {{ source('marketing', 'CoOpCampaign') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(FrontCode as nvarchar(50)) as FrontCode,\r\n        cast(BackCode as nvarchar(50)) as BackCode,\r\n        cast(Spend as decimal(19, 4)) as Spend,\r\n        cast(StartAt as date) as StartAt,\r\n        cast(EndAt as date) as EndAt\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned;", "language": "sql", "refs": [], "sources": [["marketing", "CoOpCampaign"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.marketing.CoOpCampaign"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\marketing\\stg_marketing__CoOpCampaign.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"KNSDataLake\".\"marketing\".\"CoOpCampaign\"\n\n),\n\ncleaned as (\n\n    select \n        cast(FrontCode as nvarchar(50)) as FrontCode,\n        cast(BackCode as nvarchar(50)) as BackCode,\n        cast(Spend as decimal(19, 4)) as Spend,\n        cast(StartAt as date) as StartAt,\n        cast(EndAt as date) as EndAt\n    from source\n\n)\n\nselect * from cleaned;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_marketing__Criteo": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_marketing__Criteo", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\marketing\\stg_marketing__Criteo.sql", "original_file_path": "models\\staging\\datalake\\marketing\\stg_marketing__Criteo.sql", "unique_id": "model.kns_dbt.stg_marketing__Criteo", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "stg_marketing__Criteo"], "alias": "stg_marketing__Criteo", "checksum": {"name": "sha256", "checksum": "47618e213aaf350cd6382c8a46f4c7e04b17a560c6745fd15b14540d6730ac2e"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model cleans data from Criteo", "columns": {"date": {"name": "date", "description": "This is the date (set to filter for the last 2 years)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\marketing\\_marketing__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1550176, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__Criteo\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select * from {{ source('marketing', 'Criteo') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(date as date) as date,\r\n        cast(campaignName as nvarchar(128)) as campaignName,\r\n        cast(retailerName as nvarchar(128)) as retailerName,\r\n        cast(spend as decimal(19, 4)) as spend,\r\n        cast(attributedSales as decimal(19, 4)) as attributedSales,\r\n        cast(attributedUnits as decimal(19, 4)) as attributedUnits,\r\n        cast(ctr as decimal(19, 4)) as ctr,\r\n        cast(impressions as decimal(19, 4)) as impressions\r\n    from source \r\n    where {{ years_back_filter('date') }}\r\n        \r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["marketing", "Criteo"]], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.years_back_filter"], "nodes": ["source.kns_dbt.marketing.Criteo"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\marketing\\stg_marketing__Criteo.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"KNSDataLake\".\"marketing\".\"Criteo\"\n\n),\n\ncleaned as (\n\n    select \n        cast(date as date) as date,\n        cast(campaignName as nvarchar(128)) as campaignName,\n        cast(retailerName as nvarchar(128)) as retailerName,\n        cast(spend as decimal(19, 4)) as spend,\n        cast(attributedSales as decimal(19, 4)) as attributedSales,\n        cast(attributedUnits as decimal(19, 4)) as attributedUnits,\n        cast(ctr as decimal(19, 4)) as ctr,\n        cast(impressions as decimal(19, 4)) as impressions\n    from source \n    where \n    date >= dateadd(year, -2, getdate())\n\n        \n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_marketing__Northbeam": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_marketing__Northbeam", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\marketing\\stg_marketing__Northbeam.sql", "original_file_path": "models\\staging\\datalake\\marketing\\stg_marketing__Northbeam.sql", "unique_id": "model.kns_dbt.stg_marketing__Northbeam", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "stg_marketing__Northbeam"], "alias": "stg_marketing__Northbeam", "checksum": {"name": "sha256", "checksum": "1715210e3f7ca28628fde70172c144a271db7b375a0d2481ad5f861a065dabb6"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model cleans data from Northbeam", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\marketing\\_marketing__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1550176, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__Northbeam\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select * from {{ source('marketing', 'Northbeam') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(date as date) as date,\r\n        cast(breakdown_platform_northbeam as nvarchar(256)) as breakdown_platform_northbeam,\r\n        cast(campaign_name as nvarchar(256)) as campaign_name,\r\n        cast(adset_name as nvarchar(256)) as adset_name,\r\n        cast(ad_name as nvarchar(256)) as ad_name,    \r\n        cast(attribution_model as nvarchar(256)) as attribution_model,\r\n        cast(attribution_window as nvarchar(256)) as attribution_window,\r\n        cast(ctr as decimal(19, 4)) as ctr,\r\n        cast(imprs as decimal(19, 4)) as imprs,\r\n        cast(attributed_rev as decimal(19, 4)) as attributed_rev,\r\n        cast(spend as decimal(19, 4)) as spend,\r\n        cast(visits as decimal(19, 4)) as visits\r\n    from source\r\n    where {{ years_back_filter('date') }}\r\n)\r\n\r\nselect * from cleaned;", "language": "sql", "refs": [], "sources": [["marketing", "Northbeam"]], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.years_back_filter"], "nodes": ["source.kns_dbt.marketing.Northbeam"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\marketing\\stg_marketing__Northbeam.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"KNSDataLake\".\"marketing\".\"Northbeam\"\n\n),\n\ncleaned as (\n\n    select \n        cast(date as date) as date,\n        cast(breakdown_platform_northbeam as nvarchar(256)) as breakdown_platform_northbeam,\n        cast(campaign_name as nvarchar(256)) as campaign_name,\n        cast(adset_name as nvarchar(256)) as adset_name,\n        cast(ad_name as nvarchar(256)) as ad_name,    \n        cast(attribution_model as nvarchar(256)) as attribution_model,\n        cast(attribution_window as nvarchar(256)) as attribution_window,\n        cast(ctr as decimal(19, 4)) as ctr,\n        cast(imprs as decimal(19, 4)) as imprs,\n        cast(attributed_rev as decimal(19, 4)) as attributed_rev,\n        cast(spend as decimal(19, 4)) as spend,\n        cast(visits as decimal(19, 4)) as visits\n    from source\n    where \n    date >= dateadd(year, -2, getdate())\n\n)\n\nselect * from cleaned;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_marketing__PromoteIq": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_marketing__PromoteIq", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\marketing\\stg_marketing__PromoteIq.sql", "original_file_path": "models\\staging\\datalake\\marketing\\stg_marketing__PromoteIq.sql", "unique_id": "model.kns_dbt.stg_marketing__PromoteIq", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "stg_marketing__PromoteIq"], "alias": "stg_marketing__PromoteIq", "checksum": {"name": "sha256", "checksum": "2455ce1acd7f4705b5ec8b0a7c364a504db2d0c248bf20e577ebec76e8bf6cd3"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model cleans data from PromoteIQ", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\marketing\\_marketing__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1550176, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__PromoteIq\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select * from {{ source('marketing', 'PromoteIQ') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(Date as date) as Date,\r\n        cast([Campaign Name] as nvarchar(128)) as [Campaign Name],\r\n        cast([Vendor Name] as nvarchar(128)) as [Vendor Name],\r\n        cast(CTR as decimal(19, 4)) as CTR,\r\n        cast(Impressions as decimal(19, 4)) as Impressions,\r\n        cast([Total Sales] as decimal(19, 4)) as [Total Sales],\r\n        cast([Units Sold] as decimal(19, 4)) as [Units Sold],\r\n        cast(Spend as decimal(19, 4)) as Spend\r\n    from source\r\n    where {{ years_back_filter('Date') }}\r\n\r\n)\r\n\r\nselect * from cleaned;", "language": "sql", "refs": [], "sources": [["marketing", "PromoteIQ"]], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.years_back_filter"], "nodes": ["source.kns_dbt.marketing.PromoteIQ"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\marketing\\stg_marketing__PromoteIq.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"KNSDataLake\".\"marketing\".\"PromoteIQ\"\n\n),\n\ncleaned as (\n\n    select \n        cast(Date as date) as Date,\n        cast([Campaign Name] as nvarchar(128)) as [Campaign Name],\n        cast([Vendor Name] as nvarchar(128)) as [Vendor Name],\n        cast(CTR as decimal(19, 4)) as CTR,\n        cast(Impressions as decimal(19, 4)) as Impressions,\n        cast([Total Sales] as decimal(19, 4)) as [Total Sales],\n        cast([Units Sold] as decimal(19, 4)) as [Units Sold],\n        cast(Spend as decimal(19, 4)) as Spend\n    from source\n    where \n    Date >= dateadd(year, -2, getdate())\n\n\n)\n\nselect * from cleaned;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_marketing__Roundel": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_marketing__Roundel", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\marketing\\stg_marketing__Roundel.sql", "original_file_path": "models\\staging\\datalake\\marketing\\stg_marketing__Roundel.sql", "unique_id": "model.kns_dbt.stg_marketing__Roundel", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "stg_marketing__Roundel"], "alias": "stg_marketing__Roundel", "checksum": {"name": "sha256", "checksum": "92fc0eb04e2f2a6a2ed5000af261b3615e58d66865da6edcc252708840c27332"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model cleans data from Roundel", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\marketing\\_marketing__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1550176, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__Roundel\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select * from {{ source('marketing', 'Roundel') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(event_day as date) as date,\r\n        cast(campaign_name as nvarchar(128)) as campaignName,\r\n        cast(adjusted_actualized_spend as decimal(19, 4)) as spend,\r\n        cast(total_sales as decimal(19, 4)) as attributedSales,\r\n        cast(total_units as decimal(19, 4)) as attributedUnits,\r\n        cast(clicks as decimal(19, 4)) as clicks,\r\n        cast(impressions as decimal(19, 4)) as impressions\r\n    from source \r\n        \r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["marketing", "Roundel"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.marketing.Roundel"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\marketing\\stg_marketing__Roundel.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"KNSDataLake\".\"marketing\".\"Roundel\"\n\n),\n\ncleaned as (\n\n    select \n        cast(event_day as date) as date,\n        cast(campaign_name as nvarchar(128)) as campaignName,\n        cast(adjusted_actualized_spend as decimal(19, 4)) as spend,\n        cast(total_sales as decimal(19, 4)) as attributedSales,\n        cast(total_units as decimal(19, 4)) as attributedUnits,\n        cast(clicks as decimal(19, 4)) as clicks,\n        cast(impressions as decimal(19, 4)) as impressions\n    from source \n        \n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_marketing__Symbiosys": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_marketing__Symbiosys", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\marketing\\stg_marketing__Symbiosys.sql", "original_file_path": "models\\staging\\datalake\\marketing\\stg_marketing__Symbiosys.sql", "unique_id": "model.kns_dbt.stg_marketing__Symbiosys", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "stg_marketing__Symbiosys"], "alias": "stg_marketing__Symbiosys", "checksum": {"name": "sha256", "checksum": "0318414e1802c772940711f388263923ee96bbf295901d7a8d50b253321c6b8b"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model cleans data from Symbiosys", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\marketing\\_marketing__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1550176, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__Symbiosys\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select * from {{ source('marketing', 'Symbiosys') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(Day as date) as Date,\r\n        cast(Campaign as nvarchar(256)) as Campaign,\r\n        cast(Channel as nvarchar(50)) as Channel,\r\n        cast(Spend as decimal(19, 4)) as Spend,\r\n        cast([Units Sold] as decimal(19, 4)) as [Units Sold],\r\n        cast(Sales as decimal(19, 4)) as Sales\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned;", "language": "sql", "refs": [], "sources": [["marketing", "Symbiosys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.marketing.Symbiosys"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\marketing\\stg_marketing__Symbiosys.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"KNSDataLake\".\"marketing\".\"Symbiosys\"\n\n),\n\ncleaned as (\n\n    select \n        cast(Day as date) as Date,\n        cast(Campaign as nvarchar(256)) as Campaign,\n        cast(Channel as nvarchar(50)) as Channel,\n        cast(Spend as decimal(19, 4)) as Spend,\n        cast([Units Sold] as decimal(19, 4)) as [Units Sold],\n        cast(Sales as decimal(19, 4)) as Sales\n    from source\n\n)\n\nselect * from cleaned;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_netsuite__Entity": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_netsuite__Entity", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\netsuite\\stg_netsuite__Entity.sql", "original_file_path": "models\\staging\\datalake\\netsuite\\stg_netsuite__Entity.sql", "unique_id": "model.kns_dbt.stg_netsuite__Entity", "fqn": ["kns_dbt", "staging", "datalake", "netsuite", "stg_netsuite__Entity"], "alias": "stg_netsuite__Entity", "checksum": {"name": "sha256", "checksum": "b5ff2c35d509567bfc1f94d449de468d500b53b9571e8d2b6c0506ef466f32f4"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model cleans data from Netsuite entity table", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\netsuite\\_netsuite__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1550176, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_netsuite__Entity\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select * from {{ source('netsuite', 'entity') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(id as bigint) as Id,\r\n        cast(entityid as nvarchar(128)) as EntityId\r\n    from source \r\n        \r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["netsuite", "entity"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.netsuite.entity"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\netsuite\\stg_netsuite__Entity.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"KNSDataLake\".\"netsuite\".\"entity\"\n\n),\n\ncleaned as (\n\n    select \n        cast(id as bigint) as Id,\n        cast(entityid as nvarchar(128)) as EntityId\n    from source \n        \n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_netsuite__KnsItemCogs": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_netsuite__KnsItemCogs", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\netsuite\\stg_netsuite__KnsItemCogs.sql", "original_file_path": "models\\staging\\datalake\\netsuite\\stg_netsuite__KnsItemCogs.sql", "unique_id": "model.kns_dbt.stg_netsuite__KnsItemCogs", "fqn": ["kns_dbt", "staging", "datalake", "netsuite", "stg_netsuite__KnsItemCogs"], "alias": "stg_netsuite__KnsItemCogs", "checksum": {"name": "sha256", "checksum": "d618b2481957b482d10af70497bcb3c44c98d6a416b292220350f6cb7d6da18d"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.2800212, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_netsuite__KnsItemCogs\"", "raw_code": "with \r\n\r\nsource as (\r\n\r\n    select * from {{ source('netsuite', 'KNS_ItemCogs') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast(ItemId as bigint) as ItemId,\r\n        cast(Cost as decimal(19,4)) as Cost\r\n    from source \r\n        \r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["netsuite", "KNS_ItemCogs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.netsuite.KNS_ItemCogs"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\netsuite\\stg_netsuite__KnsItemCogs.sql", "compiled": true, "compiled_code": "with \n\nsource as (\n\n    select * from \"KNSDataLake\".\"netsuite\".\"KNS_ItemCogs\"\n\n),\n\ncleaned as (\n\n    select \n        cast(ItemId as bigint) as ItemId,\n        cast(Cost as decimal(19,4)) as Cost\n    from source \n        \n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_netsuite__Transaction": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_netsuite__Transaction", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\netsuite\\stg_netsuite__Transaction.sql", "original_file_path": "models\\staging\\datalake\\netsuite\\stg_netsuite__Transaction.sql", "unique_id": "model.kns_dbt.stg_netsuite__Transaction", "fqn": ["kns_dbt", "staging", "datalake", "netsuite", "stg_netsuite__Transaction"], "alias": "stg_netsuite__Transaction", "checksum": {"name": "sha256", "checksum": "fce1e68259334f7ae0306ca9c40e63bba7f469cf614f4fd872f09184039a54af"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168169.2800212, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_netsuite__Transaction\"", "raw_code": "with\r\n\r\nsource as (\r\n\r\n    select * from {{ source('netsuite', 'transaction') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        cast(id as bigint) as Id,\r\n        cast(custbody_kns_po as nvarchar(4000)) as Memo,\r\n        cast(entity as bigint) as Entity,\r\n        cast(trandate as date) as TranDate,\r\n        cast(tranid as nvarchar(90)) as TranId,\r\n        cast(otherrefnum as nvarchar(90)) as OtherRefNum\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["netsuite", "transaction"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.netsuite.transaction"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\netsuite\\stg_netsuite__Transaction.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n\n    select * from \"KNSDataLake\".\"netsuite\".\"transaction\"\n\n),\n\ncleaned as (\n\n    select\n        cast(id as bigint) as Id,\n        cast(custbody_kns_po as nvarchar(4000)) as Memo,\n        cast(entity as bigint) as Entity,\n        cast(trandate as date) as TranDate,\n        cast(tranid as nvarchar(90)) as TranId,\n        cast(otherrefnum as nvarchar(90)) as OtherRefNum\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_netsuite__TransactionLine": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_netsuite__TransactionLine", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\netsuite\\stg_netsuite__TransactionLine.sql", "original_file_path": "models\\staging\\datalake\\netsuite\\stg_netsuite__TransactionLine.sql", "unique_id": "model.kns_dbt.stg_netsuite__TransactionLine", "fqn": ["kns_dbt", "staging", "datalake", "netsuite", "stg_netsuite__TransactionLine"], "alias": "stg_netsuite__TransactionLine", "checksum": {"name": "sha256", "checksum": "c8fa6c1e2bfd308d0808c3cffcb0cecffc262eb2f188cc13519038fe66bd99d5"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model cleans data from Netsuite transaction line table", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\netsuite\\_netsuite__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1706436, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_netsuite__TransactionLine\"", "raw_code": "with\r\n\r\nsource as (\r\n\r\n    select * from {{ source('netsuite', 'transactionLine') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select\r\n        cast(uniquekey as bigint) as UniqueKey,\r\n        cast([transaction] as bigint) as [Transaction],\r\n        cast(rate as float) as Rate,\r\n        cast(expenseaccount as bigint) as ExpenseAccount,\r\n        cast(debitforeignamount as float) as DebitForeignAmount,\r\n        cast(creditforeignamount as float) as CreditForeignAmount,\r\n        cast(memo as nvarchar(4000)) as Memo\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["netsuite", "transactionLine"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.netsuite.transactionLine"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\netsuite\\stg_netsuite__TransactionLine.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n\n    select * from \"KNSDataLake\".\"netsuite\".\"transactionLine\"\n\n),\n\ncleaned as (\n\n    select\n        cast(uniquekey as bigint) as UniqueKey,\n        cast([transaction] as bigint) as [Transaction],\n        cast(rate as float) as Rate,\n        cast(expenseaccount as bigint) as ExpenseAccount,\n        cast(debitforeignamount as float) as DebitForeignAmount,\n        cast(creditforeignamount as float) as CreditForeignAmount,\n        cast(memo as nvarchar(4000)) as Memo\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_salsify__Product": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_salsify__Product", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\datalake\\salsify\\stg_salsify__Product.sql", "original_file_path": "models\\staging\\datalake\\salsify\\stg_salsify__Product.sql", "unique_id": "model.kns_dbt.stg_salsify__Product", "fqn": ["kns_dbt", "staging", "datalake", "salsify", "stg_salsify__Product"], "alias": "stg_salsify__Product", "checksum": {"name": "sha256", "checksum": "c45914dea3c1c385aae5a82f5023143559911cc1ef6c0c9cf72845e6434c6d6d"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\datalake\\salsify\\_salsify__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1706436, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_salsify__Product\"", "raw_code": "with\r\n\r\nsource as (\r\n\r\n    select * from {{ source('salsify', 'Product') }}\r\n\r\n),\r\n\r\ncleaned as (\r\n\r\n    select \r\n        cast([Main SKU] as nvarchar(128)) as MainSku,\r\n        cast([Sub Category] as nvarchar(128)) as SubCategory,\r\n        cast([Merchandise Subclass] as nvarchar(128)) as MerchandiseSubclass,\r\n        cast([Color Class] as nvarchar(128)) as ColorClass,\r\n        cast(Color as nvarchar(128)) as Color,\r\n        cast(Brand as nvarchar(128)) as Brand,\r\n        cast(Gender as nvarchar(128)) as Gender,\r\n        cast(Size as nvarchar(128)) as Size,\r\n        cast(Seasonality as nvarchar(128)) as Seasonality,\r\n        cast([Size Run] as nvarchar(128)) as SizeRun,\r\n        cast(Vendor as nvarchar(128)) as Vendor,\r\n        cast([Vendor SKU] as nvarchar(128)) as VendorSku,\r\n        cast([Sell Out Target Date Month] as nvarchar(128)) as SellOutTargetDateMonth,\r\n        cast([Sell Out Target Date Year] as nvarchar(128)) as SellOutTargetDateYear,\r\n        cast([Planned Arrival Date Month] as nvarchar(128)) as PlannedArrivalDateMonth,\r\n        cast([First Sales Date] as nvarchar(128)) as FirstSalesDate,\r\n        cast(Status as nvarchar(128)) as Status,\r\n        cast([Closure Type] as nvarchar(128)) as ClosureType,\r\n        cast([Style Type] as nvarchar(128)) as StyleType,\r\n        cast(Style as nvarchar(128)) as Style,\r\n        cast([Parent SKU] as nvarchar(128)) as ParentSku,\r\n        cast([Calf Width] as nvarchar(128)) as CalfWidth,\r\n        cast([Shoe Width] as nvarchar(128)) as ShoeWidth,\r\n        cast([Anaplan Active] as bit) as AnaplanActive,\r\n        cast([Case Quantity] as int) as CaseQuantity,\r\n        cast(MSRP as decimal(19, 4)) as Msrp,\r\n        cast(Division as nvarchar(32)) as Division,\r\n        cast([Season Budget] as nvarchar(16)) as SeasonBudget,\r\n        cast([Selling Status] as nvarchar(32)) as SellingStatus\r\n    from source\r\n\r\n)\r\n\r\nselect * from cleaned", "language": "sql", "refs": [], "sources": [["salsify", "Product"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.salsify.Product"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\salsify\\stg_salsify__Product.sql", "compiled": true, "compiled_code": "with\n\nsource as (\n\n    select * from \"KNSDataLake\".\"salsify\".\"Product\"\n\n),\n\ncleaned as (\n\n    select \n        cast([Main SKU] as nvarchar(128)) as MainSku,\n        cast([Sub Category] as nvarchar(128)) as SubCategory,\n        cast([Merchandise Subclass] as nvarchar(128)) as MerchandiseSubclass,\n        cast([Color Class] as nvarchar(128)) as ColorClass,\n        cast(Color as nvarchar(128)) as Color,\n        cast(Brand as nvarchar(128)) as Brand,\n        cast(Gender as nvarchar(128)) as Gender,\n        cast(Size as nvarchar(128)) as Size,\n        cast(Seasonality as nvarchar(128)) as Seasonality,\n        cast([Size Run] as nvarchar(128)) as SizeRun,\n        cast(Vendor as nvarchar(128)) as Vendor,\n        cast([Vendor SKU] as nvarchar(128)) as VendorSku,\n        cast([Sell Out Target Date Month] as nvarchar(128)) as SellOutTargetDateMonth,\n        cast([Sell Out Target Date Year] as nvarchar(128)) as SellOutTargetDateYear,\n        cast([Planned Arrival Date Month] as nvarchar(128)) as PlannedArrivalDateMonth,\n        cast([First Sales Date] as nvarchar(128)) as FirstSalesDate,\n        cast(Status as nvarchar(128)) as Status,\n        cast([Closure Type] as nvarchar(128)) as ClosureType,\n        cast([Style Type] as nvarchar(128)) as StyleType,\n        cast(Style as nvarchar(128)) as Style,\n        cast([Parent SKU] as nvarchar(128)) as ParentSku,\n        cast([Calf Width] as nvarchar(128)) as CalfWidth,\n        cast([Shoe Width] as nvarchar(128)) as ShoeWidth,\n        cast([Anaplan Active] as bit) as AnaplanActive,\n        cast([Case Quantity] as int) as CaseQuantity,\n        cast(MSRP as decimal(19, 4)) as Msrp,\n        cast(Division as nvarchar(32)) as Division,\n        cast([Season Budget] as nvarchar(16)) as SeasonBudget,\n        cast([Selling Status] as nvarchar(32)) as SellingStatus\n    from source\n\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_products__Brand": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_products__Brand", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\mdm\\products\\stg_products__Brand.sql", "original_file_path": "models\\staging\\mdm\\products\\stg_products__Brand.sql", "unique_id": "model.kns_dbt.stg_products__Brand", "fqn": ["kns_dbt", "staging", "mdm", "products", "stg_products__Brand"], "alias": "stg_products__Brand", "checksum": {"name": "sha256", "checksum": "13929504eb7d0483a29fca5004870a0385576e26860ef601bb74a7669d18e064"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\mdm\\products\\_products__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1706436, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Brand\"", "raw_code": "select * from {{ source('products', 'Brand') }}", "language": "sql", "refs": [], "sources": [["products", "Brand"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.products.Brand"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\mdm\\products\\stg_products__Brand.sql", "compiled": true, "compiled_code": "select * from \"KNSUnifiedMDM\".\"products\".\"Brand\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_products__Catalog": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_products__Catalog", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\mdm\\products\\stg_products__Catalog.sql", "original_file_path": "models\\staging\\mdm\\products\\stg_products__Catalog.sql", "unique_id": "model.kns_dbt.stg_products__Catalog", "fqn": ["kns_dbt", "staging", "mdm", "products", "stg_products__Catalog"], "alias": "stg_products__Catalog", "checksum": {"name": "sha256", "checksum": "4cc16c6591062ae5bc7785823865e6c02bcf7498a94ad6c6dd5f237cc0cea115"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\mdm\\products\\_products__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1706436, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Catalog\"", "raw_code": "select * from {{ source('products', 'Catalog') }}", "language": "sql", "refs": [], "sources": [["products", "Catalog"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.products.Catalog"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\mdm\\products\\stg_products__Catalog.sql", "compiled": true, "compiled_code": "select * from \"KNSUnifiedMDM\".\"products\".\"Catalog\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_products__Style": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_products__Style", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\mdm\\products\\stg_products__Style.sql", "original_file_path": "models\\staging\\mdm\\products\\stg_products__Style.sql", "unique_id": "model.kns_dbt.stg_products__Style", "fqn": ["kns_dbt", "staging", "mdm", "products", "stg_products__Style"], "alias": "stg_products__Style", "checksum": {"name": "sha256", "checksum": "ee370ed635b5006f8f892f9486915cd4b3518ae281a6587c4e87a387c59d1d5f"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\mdm\\products\\_products__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1706436, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Style\"", "raw_code": "select * from {{ source('products', 'Style') }}", "language": "sql", "refs": [], "sources": [["products", "Style"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.products.Style"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\mdm\\products\\stg_products__Style.sql", "compiled": true, "compiled_code": "select * from \"KNSUnifiedMDM\".\"products\".\"Style\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_products__Subclass": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_products__Subclass", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\mdm\\products\\stg_products__Subclass.sql", "original_file_path": "models\\staging\\mdm\\products\\stg_products__Subclass.sql", "unique_id": "model.kns_dbt.stg_products__Subclass", "fqn": ["kns_dbt", "staging", "mdm", "products", "stg_products__Subclass"], "alias": "stg_products__Subclass", "checksum": {"name": "sha256", "checksum": "e4d17dd4b25be894549199c9ed156308e4b21d77ac91c8921565227b442c07ff"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\mdm\\products\\_products__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1706436, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Subclass\"", "raw_code": "select * from {{ source('products', 'Subclass') }}", "language": "sql", "refs": [], "sources": [["products", "Subclass"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.products.Subclass"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\mdm\\products\\stg_products__Subclass.sql", "compiled": true, "compiled_code": "select * from \"KNSUnifiedMDM\".\"products\".\"Subclass\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.kns_dbt.stg_products__Variant": {"database": "KNSDevDbt", "schema": "dbt_prod_staging", "name": "stg_products__Variant", "resource_type": "model", "package_name": "kns_dbt", "path": "staging\\mdm\\products\\stg_products__Variant.sql", "original_file_path": "models\\staging\\mdm\\products\\stg_products__Variant.sql", "unique_id": "model.kns_dbt.stg_products__Variant", "fqn": ["kns_dbt", "staging", "mdm", "products", "stg_products__Variant"], "alias": "stg_products__Variant", "checksum": {"name": "sha256", "checksum": "3d4c09055ef823a9b818468646085f26e45e1c44108f63861bed61ac321aa5fe"}, "config": {"enabled": true, "alias": null, "schema": "dbt_prod_staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://models\\staging\\mdm\\products\\_products__models.yml", "build_path": null, "unrendered_config": {"schema": "dbt_{{ target.schema }}_staging", "materialized": "view"}, "created_at": 1748168170.1706436, "relation_name": "\"KNSDevDbt\".\"dbt_prod_staging\".\"stg_products__Variant\"", "raw_code": "select * from {{ source('products', 'Variant') }}", "language": "sql", "refs": [], "sources": [["products", "Variant"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.kns_dbt.products.Variant"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\mdm\\products\\stg_products__Variant.sql", "compiled": true, "compiled_code": "select * from \"KNSUnifiedMDM\".\"products\".\"Variant\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.kns_dbt.seed_Brands": {"database": "KNSDevDbt", "schema": "prod", "name": "seed_Brands", "resource_type": "seed", "package_name": "kns_dbt", "path": "seed_Brands.csv", "original_file_path": "seeds\\seed_Brands.csv", "unique_id": "seed.kns_dbt.seed_Brands", "fqn": ["kns_dbt", "seed_Brands"], "alias": "seed_Brands", "checksum": {"name": "sha256", "checksum": "968a40ade240b1812b50a6676763f36b40f85db00496bd882700ba690e332b3e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "This seed file contains all the brands that we have in our database", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://seeds\\_seeds.yml", "build_path": null, "unrendered_config": {}, "created_at": 1748168169.5925262, "relation_name": "\"KNSDevDbt\".\"prod\".\"seed_Brands\"", "raw_code": "", "root_path": "C:\\actions-runner\\_work\\DataTransform\\DataTransform\\Datawarehouse", "depends_on": {"macros": []}}, "seed.kns_dbt.seed_SizeRun": {"database": "KNSDevDbt", "schema": "prod", "name": "seed_SizeRun", "resource_type": "seed", "package_name": "kns_dbt", "path": "seed_SizeRun.csv", "original_file_path": "seeds\\seed_SizeRun.csv", "unique_id": "seed.kns_dbt.seed_SizeRun", "fqn": ["kns_dbt", "seed_SizeRun"], "alias": "seed_SizeRun", "checksum": {"name": "sha256", "checksum": "dbbeffe1ad975c8ccd1ebe239d5e1e3b25d2c282665c454fadca7a0d0dd5a77b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "This seed file contains the size run distribution curves by gender and code", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "kns_dbt://seeds\\_seeds.yml", "build_path": null, "unrendered_config": {}, "created_at": 1748168169.5925262, "relation_name": "\"KNSDevDbt\".\"prod\".\"seed_SizeRun\"", "raw_code": "", "root_path": "C:\\actions-runner\\_work\\DataTransform\\DataTransform\\Datawarehouse", "depends_on": {"macros": []}}, "test.kns_dbt.unique_DimTradingPartner_TradingPartnerId.3848ac0272": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "unique_DimTradingPartner_TradingPartnerId", "resource_type": "test", "package_name": "kns_dbt", "path": "unique_DimTradingPartner_TradingPartnerId.sql", "original_file_path": "models\\marts\\__models.yml", "unique_id": "test.kns_dbt.unique_DimTradingPartner_TradingPartnerId.3848ac0272", "fqn": ["kns_dbt", "marts", "unique_DimTradingPartner_TradingPartnerId"], "alias": "unique_DimTradingPartner_TradingPartnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168169.8268929, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "DimTradingPartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.DimTradingPartner"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\__models.yml\\unique_DimTradingPartner_TradingPartnerId.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    TradingPartnerId as unique_field,\n    count(*) as n_records\n\nfrom \"KNSDevDbt\".\"dbt_prod_marts\".\"DimTradingPartner\"\nwhere TradingPartnerId is not null\ngroup by TradingPartnerId\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TradingPartnerId", "file_key_name": "models.DimTradingPartner", "attached_node": "model.kns_dbt.DimTradingPartner", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TradingPartnerId", "model": "{{ get_where_subquery(ref('DimTradingPartner')) }}"}, "namespace": null}}, "test.kns_dbt.not_null_DimTradingPartner_TradingPartnerId.1681276484": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "not_null_DimTradingPartner_TradingPartnerId", "resource_type": "test", "package_name": "kns_dbt", "path": "not_null_DimTradingPartner_TradingPartnerId.sql", "original_file_path": "models\\marts\\__models.yml", "unique_id": "test.kns_dbt.not_null_DimTradingPartner_TradingPartnerId.1681276484", "fqn": ["kns_dbt", "marts", "not_null_DimTradingPartner_TradingPartnerId"], "alias": "not_null_DimTradingPartner_TradingPartnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168169.8268929, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "DimTradingPartner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.DimTradingPartner"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\__models.yml\\not_null_DimTradingPartner_TradingPartnerId.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TradingPartnerId\nfrom \"KNSDevDbt\".\"dbt_prod_marts\".\"DimTradingPartner\"\nwhere TradingPartnerId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TradingPartnerId", "file_key_name": "models.DimTradingPartner", "attached_node": "model.kns_dbt.DimTradingPartner", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TradingPartnerId", "model": "{{ get_where_subquery(ref('DimTradingPartner')) }}"}, "namespace": null}}, "test.kns_dbt.not_null_FactMarketingAd_TradingPartnerId.54a6c4f487": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "not_null_FactMarketingAd_TradingPartnerId", "resource_type": "test", "package_name": "kns_dbt", "path": "not_null_FactMarketingAd_TradingPartnerId.sql", "original_file_path": "models\\marts\\__models.yml", "unique_id": "test.kns_dbt.not_null_FactMarketingAd_TradingPartnerId.54a6c4f487", "fqn": ["kns_dbt", "marts", "not_null_FactMarketingAd_TradingPartnerId"], "alias": "not_null_FactMarketingAd_TradingPartnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168169.8268929, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "FactMarketingAd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.FactMarketingAd"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\__models.yml\\not_null_FactMarketingAd_TradingPartnerId.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TradingPartnerId\nfrom \"KNSDevDbt\".\"dbt_prod_marts\".\"FactMarketingAd\"\nwhere TradingPartnerId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TradingPartnerId", "file_key_name": "models.FactMarketingAd", "attached_node": "model.kns_dbt.FactMarketingAd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TradingPartnerId", "model": "{{ get_where_subquery(ref('FactMarketingAd')) }}"}, "namespace": null}}, "test.kns_dbt.accepted_values_FactMarketingAd_Objective__Top_Funnel_Awareness__Mid_Funnel__Bottom_Funnel_Conversions__Retargeting__Prospecting__Retention__NBSearch__BrandSearch__PMax__BrandShopping__NBShopping__Null.96cf12787a": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "accepted_values_FactMarketingAd_Objective__Top_Funnel_Awareness__Mid_Funnel__Bottom_Funnel_Conversions__Retargeting__Prospecting__Retention__NBSearch__BrandSearch__PMax__BrandShopping__NBShopping__Null", "resource_type": "test", "package_name": "kns_dbt", "path": "accepted_values_FactMarketingA_f7708c11feac5c3d049d4f57fb58ea9d.sql", "original_file_path": "models\\marts\\__models.yml", "unique_id": "test.kns_dbt.accepted_values_FactMarketingAd_Objective__Top_Funnel_Awareness__Mid_Funnel__Bottom_Funnel_Conversions__Retargeting__Prospecting__Retention__NBSearch__BrandSearch__PMax__BrandShopping__NBShopping__Null.96cf12787a", "fqn": ["kns_dbt", "marts", "accepted_values_FactMarketingAd_Objective__Top_Funnel_Awareness__Mid_Funnel__Bottom_Funnel_Conversions__Retargeting__Prospecting__Retention__NBSearch__BrandSearch__PMax__BrandShopping__NBShopping__Null"], "alias": "accepted_values_FactMarketingA_f7708c11feac5c3d049d4f57fb58ea9d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_FactMarketingA_f7708c11feac5c3d049d4f57fb58ea9d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_values_FactMarketingA_f7708c11feac5c3d049d4f57fb58ea9d"}, "created_at": 1748168169.8268929, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_FactMarketingA_f7708c11feac5c3d049d4f57fb58ea9d\") }}", "language": "sql", "refs": [{"name": "FactMarketingAd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.FactMarketingAd"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\marts\\__models.yml\\accepted_values_FactMarketingA_f7708c11feac5c3d049d4f57fb58ea9d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        Objective as value_field,\n        count(*) as n_records\n\n    from \"KNSDevDbt\".\"dbt_prod_marts\".\"FactMarketingAd\"\n    group by Objective\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Top Funnel / Awareness','Mid Funnel','Bottom Funnel / Conversions','Retargeting','Prospecting','Retention','NBSearch','BrandSearch','PMax','BrandShopping','NBShopping','Null'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "Objective", "file_key_name": "models.FactMarketingAd", "attached_node": "model.kns_dbt.FactMarketingAd", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Top Funnel / Awareness", "Mid Funnel", "Bottom Funnel / Conversions", "Retargeting", "Prospecting", "Retention", "NBSearch", "BrandSearch", "PMax", "BrandShopping", "NBShopping", "Null"], "column_name": "Objective", "model": "{{ get_where_subquery(ref('FactMarketingAd')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt__date.cff0f287eb": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_06a5efbd367ebbe1f3384a6e4e043551.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt__date.cff0f287eb", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt__date"], "alias": "dbt_expectations_expect_column_06a5efbd367ebbe1f3384a6e4e043551", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06a5efbd367ebbe1f3384a6e4e043551", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_06a5efbd367ebbe1f3384a6e4e043551"}, "created_at": 1748168169.9987717, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06a5efbd367ebbe1f3384a6e4e043551\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_AirAndSea", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_06a5efbd367ebbe1f3384a6e4e043551.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VESSELLOADEDAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "VesselLoadedAt", "file_key_name": "models.stg_kns__FreightForwarder_AirAndSea", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "VesselLoadedAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_AirAndSea')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt.aa52fbe071": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__Freight_9b30b7c48b09c7217623e1558050cbd4.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt.aa52fbe071", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt"], "alias": "no_1900_dates_stg_kns__Freight_9b30b7c48b09c7217623e1558050cbd4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "no_1900_dates_stg_kns__Freight_9b30b7c48b09c7217623e1558050cbd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "no_1900_dates_stg_kns__Freight_9b30b7c48b09c7217623e1558050cbd4"}, "created_at": 1748168170.0143952, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}{{ config(alias=\"no_1900_dates_stg_kns__Freight_9b30b7c48b09c7217623e1558050cbd4\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_AirAndSea", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__Freight_9b30b7c48b09c7217623e1558050cbd4.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_AirAndSea\"\n    where VesselLoadedAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "VesselLoadedAt", "file_key_name": "models.stg_kns__FreightForwarder_AirAndSea", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "VesselLoadedAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_AirAndSea')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt__date.b8bfa69e4d": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_ebe99a4ec68a9e59398444495dfbd251.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt__date.b8bfa69e4d", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt__date"], "alias": "dbt_expectations_expect_column_ebe99a4ec68a9e59398444495dfbd251", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ebe99a4ec68a9e59398444495dfbd251", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ebe99a4ec68a9e59398444495dfbd251"}, "created_at": 1748168170.02997, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ebe99a4ec68a9e59398444495dfbd251\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_AirAndSea", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_ebe99a4ec68a9e59398444495dfbd251.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ESTIMATEDUSPORTAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSPortAt", "file_key_name": "models.stg_kns__FreightForwarder_AirAndSea", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "EstimatedUSPortAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_AirAndSea')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt.97dc63685d": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__Freight_84bde971bff2d163c4230c8c071d7562.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt.97dc63685d", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt"], "alias": "no_1900_dates_stg_kns__Freight_84bde971bff2d163c4230c8c071d7562", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "no_1900_dates_stg_kns__Freight_84bde971bff2d163c4230c8c071d7562", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "no_1900_dates_stg_kns__Freight_84bde971bff2d163c4230c8c071d7562"}, "created_at": 1748168170.02997, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}{{ config(alias=\"no_1900_dates_stg_kns__Freight_84bde971bff2d163c4230c8c071d7562\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_AirAndSea", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__Freight_84bde971bff2d163c4230c8c071d7562.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_AirAndSea\"\n    where EstimatedUSPortAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSPortAt", "file_key_name": "models.stg_kns__FreightForwarder_AirAndSea", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "EstimatedUSPortAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_AirAndSea')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt__date.6e7870e9ff": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_a10696ad4dd607cdf2afef848d8e1ad1.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt__date.6e7870e9ff", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt__date"], "alias": "dbt_expectations_expect_column_a10696ad4dd607cdf2afef848d8e1ad1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a10696ad4dd607cdf2afef848d8e1ad1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a10696ad4dd607cdf2afef848d8e1ad1"}, "created_at": 1748168170.02997, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a10696ad4dd607cdf2afef848d8e1ad1\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_AirAndSea", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_a10696ad4dd607cdf2afef848d8e1ad1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ESTIMATEDUSSTARTSHIPAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSStartShipAt", "file_key_name": "models.stg_kns__FreightForwarder_AirAndSea", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "EstimatedUSStartShipAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_AirAndSea')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt.0cbd999917": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__Freight_0fdfb38eb22fd61391d6a37c5803a672.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt.0cbd999917", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt"], "alias": "no_1900_dates_stg_kns__Freight_0fdfb38eb22fd61391d6a37c5803a672", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "no_1900_dates_stg_kns__Freight_0fdfb38eb22fd61391d6a37c5803a672", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "no_1900_dates_stg_kns__Freight_0fdfb38eb22fd61391d6a37c5803a672"}, "created_at": 1748168170.045647, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}{{ config(alias=\"no_1900_dates_stg_kns__Freight_0fdfb38eb22fd61391d6a37c5803a672\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_AirAndSea", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__Freight_0fdfb38eb22fd61391d6a37c5803a672.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_AirAndSea\"\n    where EstimatedUSStartShipAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSStartShipAt", "file_key_name": "models.stg_kns__FreightForwarder_AirAndSea", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "EstimatedUSStartShipAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_AirAndSea')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt__date.0150e15b41": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_aab9affada17ea6708c5a2255521642a.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt__date.0150e15b41", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt__date"], "alias": "dbt_expectations_expect_column_aab9affada17ea6708c5a2255521642a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aab9affada17ea6708c5a2255521642a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_aab9affada17ea6708c5a2255521642a"}, "created_at": 1748168170.045647, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aab9affada17ea6708c5a2255521642a\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_AirAndSea", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_aab9affada17ea6708c5a2255521642a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ESTIMATEDARRIVALAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedArrivalAt", "file_key_name": "models.stg_kns__FreightForwarder_AirAndSea", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "EstimatedArrivalAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_AirAndSea')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt.8d0ff813d3": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__Freight_c1a3dfbe68108ec9dbb5188f06f601ae.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt.8d0ff813d3", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt"], "alias": "no_1900_dates_stg_kns__Freight_c1a3dfbe68108ec9dbb5188f06f601ae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "no_1900_dates_stg_kns__Freight_c1a3dfbe68108ec9dbb5188f06f601ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "no_1900_dates_stg_kns__Freight_c1a3dfbe68108ec9dbb5188f06f601ae"}, "created_at": 1748168170.045647, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}{{ config(alias=\"no_1900_dates_stg_kns__Freight_c1a3dfbe68108ec9dbb5188f06f601ae\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_AirAndSea", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__Freight_c1a3dfbe68108ec9dbb5188f06f601ae.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_AirAndSea\"\n    where EstimatedArrivalAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedArrivalAt", "file_key_name": "models.stg_kns__FreightForwarder_AirAndSea", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "EstimatedArrivalAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_AirAndSea')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_VesselLoadedAt__date.9583e14d05": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_VesselLoadedAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_95bfc7936549da89bc9ec30817cd0cc4.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_VesselLoadedAt__date.9583e14d05", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_VesselLoadedAt__date"], "alias": "dbt_expectations_expect_column_95bfc7936549da89bc9ec30817cd0cc4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_95bfc7936549da89bc9ec30817cd0cc4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_95bfc7936549da89bc9ec30817cd0cc4"}, "created_at": 1748168170.061267, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_95bfc7936549da89bc9ec30817cd0cc4\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_DSV", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_95bfc7936549da89bc9ec30817cd0cc4.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VESSELLOADEDAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "VesselLoadedAt", "file_key_name": "models.stg_kns__FreightForwarder_DSV", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_DSV", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "VesselLoadedAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_DSV')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt.0779769e89": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt.0779769e89", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt"], "alias": "no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168170.061267, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_DSV", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_DSV\"\n    where VesselLoadedAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "VesselLoadedAt", "file_key_name": "models.stg_kns__FreightForwarder_DSV", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_DSV", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "VesselLoadedAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_DSV')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt__date.b31b0631bd": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_c8a0973962646f6491970de70a7ccada.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt__date.b31b0631bd", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt__date"], "alias": "dbt_expectations_expect_column_c8a0973962646f6491970de70a7ccada", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c8a0973962646f6491970de70a7ccada", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_c8a0973962646f6491970de70a7ccada"}, "created_at": 1748168170.061267, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c8a0973962646f6491970de70a7ccada\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_DSV", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_c8a0973962646f6491970de70a7ccada.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ESTIMATEDUSPORTAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSPortAt", "file_key_name": "models.stg_kns__FreightForwarder_DSV", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_DSV", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "EstimatedUSPortAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_DSV')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt.e61cc59608": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt.e61cc59608", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt"], "alias": "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168170.076888, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_DSV", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_DSV\"\n    where EstimatedUSPortAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSPortAt", "file_key_name": "models.stg_kns__FreightForwarder_DSV", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_DSV", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "EstimatedUSPortAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_DSV')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt__date.e4ec7d834b": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_ef2fc06ccf78e33476aab825b35df6c1.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt__date.e4ec7d834b", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt__date"], "alias": "dbt_expectations_expect_column_ef2fc06ccf78e33476aab825b35df6c1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef2fc06ccf78e33476aab825b35df6c1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ef2fc06ccf78e33476aab825b35df6c1"}, "created_at": 1748168170.076888, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef2fc06ccf78e33476aab825b35df6c1\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_DSV", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_ef2fc06ccf78e33476aab825b35df6c1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ESTIMATEDUSSTARTSHIPAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSStartShipAt", "file_key_name": "models.stg_kns__FreightForwarder_DSV", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_DSV", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "EstimatedUSStartShipAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_DSV')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt.571295a306": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__Freight_269e995c5d34802ec0815b0c1308a1a3.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt.571295a306", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt"], "alias": "no_1900_dates_stg_kns__Freight_269e995c5d34802ec0815b0c1308a1a3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "no_1900_dates_stg_kns__Freight_269e995c5d34802ec0815b0c1308a1a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "no_1900_dates_stg_kns__Freight_269e995c5d34802ec0815b0c1308a1a3"}, "created_at": 1748168170.076888, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}{{ config(alias=\"no_1900_dates_stg_kns__Freight_269e995c5d34802ec0815b0c1308a1a3\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_DSV", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__Freight_269e995c5d34802ec0815b0c1308a1a3.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_DSV\"\n    where EstimatedUSStartShipAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSStartShipAt", "file_key_name": "models.stg_kns__FreightForwarder_DSV", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_DSV", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "EstimatedUSStartShipAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_DSV')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt__date.a7dd1a5bbf": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_58a3ce273d110231d41a935f42723db1.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt__date.a7dd1a5bbf", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt__date"], "alias": "dbt_expectations_expect_column_58a3ce273d110231d41a935f42723db1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_58a3ce273d110231d41a935f42723db1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_58a3ce273d110231d41a935f42723db1"}, "created_at": 1748168170.0925155, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_58a3ce273d110231d41a935f42723db1\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_DSV", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_58a3ce273d110231d41a935f42723db1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ESTIMATEDARRIVALAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedArrivalAt", "file_key_name": "models.stg_kns__FreightForwarder_DSV", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_DSV", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "EstimatedArrivalAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_DSV')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt.9f4faeb3fa": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt.9f4faeb3fa", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt"], "alias": "no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168170.0925155, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_DSV", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_DSV\"\n    where EstimatedArrivalAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedArrivalAt", "file_key_name": "models.stg_kns__FreightForwarder_DSV", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_DSV", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "EstimatedArrivalAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_DSV')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_VesselLoadedAt__date.420ac9db3b": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_VesselLoadedAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_0ade9a630aabcc6a0c9f80b4fb179145.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_VesselLoadedAt__date.420ac9db3b", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_VesselLoadedAt__date"], "alias": "dbt_expectations_expect_column_0ade9a630aabcc6a0c9f80b4fb179145", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0ade9a630aabcc6a0c9f80b4fb179145", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0ade9a630aabcc6a0c9f80b4fb179145"}, "created_at": 1748168170.1081374, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0ade9a630aabcc6a0c9f80b4fb179145\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_SFI", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_0ade9a630aabcc6a0c9f80b4fb179145.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VESSELLOADEDAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "VesselLoadedAt", "file_key_name": "models.stg_kns__FreightForwarder_SFI", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_SFI", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "VesselLoadedAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_SFI')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt.69753375e9": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt.69753375e9", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt"], "alias": "no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168170.1081374, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_SFI", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_SFI\"\n    where VesselLoadedAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "VesselLoadedAt", "file_key_name": "models.stg_kns__FreightForwarder_SFI", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_SFI", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "VesselLoadedAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_SFI')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt__date.e4cb327004": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_db7b2c32751d293a16838f87c57ffdff.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt__date.e4cb327004", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt__date"], "alias": "dbt_expectations_expect_column_db7b2c32751d293a16838f87c57ffdff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_db7b2c32751d293a16838f87c57ffdff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_db7b2c32751d293a16838f87c57ffdff"}, "created_at": 1748168170.1081374, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_db7b2c32751d293a16838f87c57ffdff\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_SFI", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_db7b2c32751d293a16838f87c57ffdff.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ESTIMATEDUSPORTAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSPortAt", "file_key_name": "models.stg_kns__FreightForwarder_SFI", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_SFI", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "EstimatedUSPortAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_SFI')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt.8ecfb2dd25": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt.8ecfb2dd25", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt"], "alias": "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168170.1237626, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_SFI", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_SFI\"\n    where EstimatedUSPortAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSPortAt", "file_key_name": "models.stg_kns__FreightForwarder_SFI", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_SFI", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "EstimatedUSPortAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_SFI')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt__date.96e1bf2941": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_8f2c1e15ad5d8956b03808fc9e803718.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt__date.96e1bf2941", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt__date"], "alias": "dbt_expectations_expect_column_8f2c1e15ad5d8956b03808fc9e803718", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8f2c1e15ad5d8956b03808fc9e803718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_8f2c1e15ad5d8956b03808fc9e803718"}, "created_at": 1748168170.1237626, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8f2c1e15ad5d8956b03808fc9e803718\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_SFI", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_8f2c1e15ad5d8956b03808fc9e803718.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ESTIMATEDUSSTARTSHIPAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSStartShipAt", "file_key_name": "models.stg_kns__FreightForwarder_SFI", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_SFI", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "EstimatedUSStartShipAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_SFI')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt.62e86b505a": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__Freight_5367a14b28484acd4875761db2534865.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt.62e86b505a", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt"], "alias": "no_1900_dates_stg_kns__Freight_5367a14b28484acd4875761db2534865", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "no_1900_dates_stg_kns__Freight_5367a14b28484acd4875761db2534865", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "no_1900_dates_stg_kns__Freight_5367a14b28484acd4875761db2534865"}, "created_at": 1748168170.1237626, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}{{ config(alias=\"no_1900_dates_stg_kns__Freight_5367a14b28484acd4875761db2534865\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_SFI", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__Freight_5367a14b28484acd4875761db2534865.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_SFI\"\n    where EstimatedUSStartShipAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedUSStartShipAt", "file_key_name": "models.stg_kns__FreightForwarder_SFI", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_SFI", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "EstimatedUSStartShipAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_SFI')) }}"}, "namespace": null}}, "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt__date.cce0b38b3e": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt__date", "resource_type": "test", "package_name": "kns_dbt", "path": "dbt_expectations_expect_column_e496579145ecce2e3d51aa5fc18e9d6d.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt__date.cce0b38b3e", "fqn": ["kns_dbt", "staging", "datalake", "kns", "dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt__date"], "alias": "dbt_expectations_expect_column_e496579145ecce2e3d51aa5fc18e9d6d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e496579145ecce2e3d51aa5fc18e9d6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_e496579145ecce2e3d51aa5fc18e9d6d"}, "created_at": 1748168170.139391, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e496579145ecce2e3d51aa5fc18e9d6d\") }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_SFI", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\dbt_expectations_expect_column_e496579145ecce2e3d51aa5fc18e9d6d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('NUMBER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('FREIGHTFORWARDER' as VARCHAR(8000)) as relation_column,\n            cast('VARCHAR' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('VESSELLOADEDAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSPORTAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDUSSTARTSHIPAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        union all\n        \n        select\n            cast('ESTIMATEDARRIVALAT' as VARCHAR(8000)) as relation_column,\n            cast('DATE' as VARCHAR(8000)) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ESTIMATEDARRIVALAT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedArrivalAt", "file_key_name": "models.stg_kns__FreightForwarder_SFI", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_SFI", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "date", "column_name": "EstimatedArrivalAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_SFI')) }}"}, "namespace": "dbt_expectations"}}, "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt.fcff9b26b5": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt", "resource_type": "test", "package_name": "kns_dbt", "path": "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt.sql", "original_file_path": "models\\staging\\datalake\\kns\\_kns__models.yml", "unique_id": "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt.fcff9b26b5", "fqn": ["kns_dbt", "staging", "datalake", "kns", "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt"], "alias": "no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168170.139391, "relation_name": null, "raw_code": "{{ test_no_1900_dates(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_kns__FreightForwarder_SFI", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.kns_dbt.test_no_1900_dates", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\kns\\_kns__models.yml\\no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt.sql", "compiled": true, "compiled_code": "\n    select *\n    from \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_kns__FreightForwarder_SFI\"\n    where EstimatedArrivalAt = '1900-01-01'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EstimatedArrivalAt", "file_key_name": "models.stg_kns__FreightForwarder_SFI", "attached_node": "model.kns_dbt.stg_kns__FreightForwarder_SFI", "test_metadata": {"name": "no_1900_dates", "kwargs": {"column_name": "EstimatedArrivalAt", "model": "{{ get_where_subquery(ref('stg_kns__FreightForwarder_SFI')) }}"}, "namespace": null}}, "test.kns_dbt.not_null_stg_marketing__Criteo_date.861ccae32e": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "not_null_stg_marketing__Criteo_date", "resource_type": "test", "package_name": "kns_dbt", "path": "not_null_stg_marketing__Criteo_date.sql", "original_file_path": "models\\staging\\datalake\\marketing\\_marketing__models.yml", "unique_id": "test.kns_dbt.not_null_stg_marketing__Criteo_date.861ccae32e", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "not_null_stg_marketing__Criteo_date"], "alias": "not_null_stg_marketing__Criteo_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168170.1550176, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_marketing__Criteo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.kns_dbt.stg_marketing__Criteo"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\marketing\\_marketing__models.yml\\not_null_stg_marketing__Criteo_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"KNSDevDbt\".\"dbt_prod_staging\".\"stg_marketing__Criteo\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "models.stg_marketing__Criteo", "attached_node": "model.kns_dbt.stg_marketing__Criteo", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_marketing__Criteo')) }}"}, "namespace": null}}, "test.kns_dbt.source_not_null_marketing_Criteo_date.3ff2cfd089": {"database": "KNSDevDbt", "schema": "dbt_test__audit", "name": "source_not_null_marketing_Criteo_date", "resource_type": "test", "package_name": "kns_dbt", "path": "source_not_null_marketing_Criteo_date.sql", "original_file_path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "unique_id": "test.kns_dbt.source_not_null_marketing_Criteo_date.3ff2cfd089", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "source_not_null_marketing_Criteo_date"], "alias": "source_not_null_marketing_Criteo_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748168170.2175148, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["marketing", "Criteo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.kns_dbt.marketing.Criteo"]}, "compiled_path": "target\\compiled\\kns_dbt\\models\\staging\\datalake\\marketing\\_marketing__sources.yml\\source_not_null_marketing_Criteo_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"KNSDataLake\".\"marketing\".\"Criteo\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "sources.marketing", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(source('marketing', 'Criteo')) }}"}, "namespace": null}}}, "sources": {"source.kns_dbt.dbo.calendar": {"database": "KNSDataLake", "schema": "dbo", "name": "calendar", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\dbo\\_dbo__sources.yml", "original_file_path": "models\\staging\\datalake\\dbo\\_dbo__sources.yml", "unique_id": "source.kns_dbt.dbo.calendar", "fqn": ["kns_dbt", "staging", "datalake", "dbo", "dbo", "calendar"], "source_name": "dbo", "source_description": "This is the dbo schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "calendar", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This table contains data from deposco about trading partners", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"dbo\".\"calendar\"", "created_at": 1748168170.1862674}, "source.kns_dbt.deposco.trading_partner": {"database": "KNSDataLake", "schema": "deposco", "name": "trading_partner", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.trading_partner", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "trading_partner"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "trading_partner", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This table contains data from deposco about trading partners", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"trading_partner\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.stock_unit": {"database": "KNSDataLake", "schema": "deposco", "name": "stock_unit", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.stock_unit", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "stock_unit"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "stock_unit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"stock_unit\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.STOCK_UNIT_AUDIT_HISTORY": {"database": "KNSDataLake", "schema": "deposco", "name": "STOCK_UNIT_AUDIT_HISTORY", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.STOCK_UNIT_AUDIT_HISTORY", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "STOCK_UNIT_AUDIT_HISTORY"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "STOCK_UNIT_AUDIT_HISTORY", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"STOCK_UNIT_AUDIT_HISTORY\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.item": {"database": "KNSDataLake", "schema": "deposco", "name": "item", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.item", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "item"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "item", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"item\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.order_line": {"database": "KNSDataLake", "schema": "deposco", "name": "order_line", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.order_line", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "order_line"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "order_line", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"order_line\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.pack": {"database": "KNSDataLake", "schema": "deposco", "name": "pack", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.pack", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "pack"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "pack", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"pack\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.order_header": {"database": "KNSDataLake", "schema": "deposco", "name": "order_header", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.order_header", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "order_header"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "order_header", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"order_header\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.receipt_line": {"database": "KNSDataLake", "schema": "deposco", "name": "receipt_line", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.receipt_line", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "receipt_line"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "receipt_line", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"receipt_line\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.co_line": {"database": "KNSDataLake", "schema": "deposco", "name": "co_line", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.co_line", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "co_line"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "co_line", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"co_line\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.location": {"database": "KNSDataLake", "schema": "deposco", "name": "location", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.location", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "location"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "location", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"location\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.shipment": {"database": "KNSDataLake", "schema": "deposco", "name": "shipment", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.shipment", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "shipment"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "shipment", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"shipment\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.shipment_line": {"database": "KNSDataLake", "schema": "deposco", "name": "shipment_line", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.shipment_line", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "shipment_line"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "shipment_line", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"shipment_line\"", "created_at": 1748168170.2018452}, "source.kns_dbt.deposco.shipment_order_header": {"database": "KNSDataLake", "schema": "deposco", "name": "shipment_order_header", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "original_file_path": "models\\staging\\datalake\\deposco\\_deposco__sources.yml", "unique_id": "source.kns_dbt.deposco.shipment_order_header", "fqn": ["kns_dbt", "staging", "datalake", "deposco", "deposco", "shipment_order_header"], "source_name": "deposco", "source_description": "This is the Deposco schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "shipment_order_header", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"deposco\".\"shipment_order_header\"", "created_at": 1748168170.2018452}, "source.kns_dbt.kns.FreightForwarder_AirAndSea": {"database": "KNSDataLake", "schema": "kns", "name": "FreightForwarder_AirAndSea", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "original_file_path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "unique_id": "source.kns_dbt.kns.FreightForwarder_AirAndSea", "fqn": ["kns_dbt", "staging", "datalake", "kns", "kns", "FreightForwarder_AirAndSea"], "source_name": "kns", "source_description": "This is the kns schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "FreightForwarder_AirAndSea", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"kns\".\"FreightForwarder_AirAndSea\"", "created_at": 1748168170.2018452}, "source.kns_dbt.kns.FreightForwarder_DSV": {"database": "KNSDataLake", "schema": "kns", "name": "FreightForwarder_DSV", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "original_file_path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "unique_id": "source.kns_dbt.kns.FreightForwarder_DSV", "fqn": ["kns_dbt", "staging", "datalake", "kns", "kns", "FreightForwarder_DSV"], "source_name": "kns", "source_description": "This is the kns schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "FreightForwarder_DSV", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"kns\".\"FreightForwarder_DSV\"", "created_at": 1748168170.2018452}, "source.kns_dbt.kns.FreightForwarder_SFI": {"database": "KNSDataLake", "schema": "kns", "name": "FreightForwarder_SFI", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "original_file_path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "unique_id": "source.kns_dbt.kns.FreightForwarder_SFI", "fqn": ["kns_dbt", "staging", "datalake", "kns", "kns", "FreightForwarder_SFI"], "source_name": "kns", "source_description": "This is the kns schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "FreightForwarder_SFI", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"kns\".\"FreightForwarder_SFI\"", "created_at": 1748168170.2018452}, "source.kns_dbt.kns.POMasterFile": {"database": "KNSDataLake", "schema": "kns", "name": "POMasterFile", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "original_file_path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "unique_id": "source.kns_dbt.kns.POMasterFile", "fqn": ["kns_dbt", "staging", "datalake", "kns", "kns", "POMasterFile"], "source_name": "kns", "source_description": "This is the kns schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "POMasterFile", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"kns\".\"POMasterFile\"", "created_at": 1748168170.2018452}, "source.kns_dbt.Dev.HistoricalDimItem": {"database": "KNSDevSandbox", "schema": "Dev", "name": "HistoricalDimItem", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "original_file_path": "models\\staging\\datalake\\kns\\_kns__sources.yml", "unique_id": "source.kns_dbt.Dev.HistoricalDimItem", "fqn": ["kns_dbt", "staging", "datalake", "kns", "Dev", "HistoricalDimItem"], "source_name": "Dev", "source_description": "This is where we are pulling historical FactSalesLine data from. We should move this table to the data lake", "loader": "", "identifier": "HistoricalDimItem", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDevSandbox\".\"Dev\".\"HistoricalDimItem\"", "created_at": 1748168170.2018452}, "source.kns_dbt.marketing.Criteo": {"database": "KNSDataLake", "schema": "marketing", "name": "Criteo", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "original_file_path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "unique_id": "source.kns_dbt.marketing.Criteo", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "marketing", "Criteo"], "source_name": "marketing", "source_description": "This is the marketing schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Criteo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This table contains data from Criteo", "columns": {"date": {"name": "date", "description": "This is the date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"marketing\".\"Criteo\"", "created_at": 1748168170.2175148}, "source.kns_dbt.marketing.Northbeam": {"database": "KNSDataLake", "schema": "marketing", "name": "Northbeam", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "original_file_path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "unique_id": "source.kns_dbt.marketing.Northbeam", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "marketing", "Northbeam"], "source_name": "marketing", "source_description": "This is the marketing schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Northbeam", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This table contains data from Northbeam", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"marketing\".\"Northbeam\"", "created_at": 1748168170.2175148}, "source.kns_dbt.marketing.PromoteIQ": {"database": "KNSDataLake", "schema": "marketing", "name": "PromoteIQ", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "original_file_path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "unique_id": "source.kns_dbt.marketing.PromoteIQ", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "marketing", "PromoteIQ"], "source_name": "marketing", "source_description": "This is the marketing schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "PromoteIQ", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This table contains data from PromoteIQ", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"marketing\".\"PromoteIQ\"", "created_at": 1748168170.2175148}, "source.kns_dbt.marketing.Symbiosys": {"database": "KNSDataLake", "schema": "marketing", "name": "Symbiosys", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "original_file_path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "unique_id": "source.kns_dbt.marketing.Symbiosys", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "marketing", "Symbiosys"], "source_name": "marketing", "source_description": "This is the marketing schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Symbiosys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This table contains data from Symbiosys", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"marketing\".\"Symbiosys\"", "created_at": 1748168170.2175148}, "source.kns_dbt.marketing.CoOpCampaign": {"database": "KNSDataLake", "schema": "marketing", "name": "CoOpCampaign", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "original_file_path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "unique_id": "source.kns_dbt.marketing.CoOpCampaign", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "marketing", "CoOpCampaign"], "source_name": "marketing", "source_description": "This is the marketing schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "CoOpCampaign", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This table contains data from CoOpCampaigns", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"marketing\".\"CoOpCampaign\"", "created_at": 1748168170.2175148}, "source.kns_dbt.marketing.Roundel": {"database": "KNSDataLake", "schema": "marketing", "name": "Roundel", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "original_file_path": "models\\staging\\datalake\\marketing\\_marketing__sources.yml", "unique_id": "source.kns_dbt.marketing.Roundel", "fqn": ["kns_dbt", "staging", "datalake", "marketing", "marketing", "Roundel"], "source_name": "marketing", "source_description": "This is the marketing schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Roundel", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This table contains data from Roundel", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"marketing\".\"Roundel\"", "created_at": 1748168170.2175148}, "source.kns_dbt.netsuite.entity": {"database": "KNSDataLake", "schema": "netsuite", "name": "entity", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\netsuite\\_netsuite__sources.yml", "original_file_path": "models\\staging\\datalake\\netsuite\\_netsuite__sources.yml", "unique_id": "source.kns_dbt.netsuite.entity", "fqn": ["kns_dbt", "staging", "datalake", "netsuite", "netsuite", "entity"], "source_name": "netsuite", "source_description": "This is the netsuite schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "entity", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"netsuite\".\"entity\"", "created_at": 1748168170.2175148}, "source.kns_dbt.netsuite.transaction": {"database": "KNSDataLake", "schema": "netsuite", "name": "transaction", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\netsuite\\_netsuite__sources.yml", "original_file_path": "models\\staging\\datalake\\netsuite\\_netsuite__sources.yml", "unique_id": "source.kns_dbt.netsuite.transaction", "fqn": ["kns_dbt", "staging", "datalake", "netsuite", "netsuite", "transaction"], "source_name": "netsuite", "source_description": "This is the netsuite schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "transaction", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"netsuite\".\"transaction\"", "created_at": 1748168170.2175148}, "source.kns_dbt.netsuite.transactionLine": {"database": "KNSDataLake", "schema": "netsuite", "name": "transactionLine", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\netsuite\\_netsuite__sources.yml", "original_file_path": "models\\staging\\datalake\\netsuite\\_netsuite__sources.yml", "unique_id": "source.kns_dbt.netsuite.transactionLine", "fqn": ["kns_dbt", "staging", "datalake", "netsuite", "netsuite", "transactionLine"], "source_name": "netsuite", "source_description": "This is the netsuite schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "transactionLine", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"netsuite\".\"transactionLine\"", "created_at": 1748168170.2175148}, "source.kns_dbt.netsuite.KNS_ItemCogs": {"database": "KNSDataLake", "schema": "netsuite", "name": "KNS_ItemCogs", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\netsuite\\_netsuite__sources.yml", "original_file_path": "models\\staging\\datalake\\netsuite\\_netsuite__sources.yml", "unique_id": "source.kns_dbt.netsuite.KNS_ItemCogs", "fqn": ["kns_dbt", "staging", "datalake", "netsuite", "netsuite", "KNS_ItemCogs"], "source_name": "netsuite", "source_description": "This is the netsuite schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "KNS_ItemCogs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"netsuite\".\"KNS_ItemCogs\"", "created_at": 1748168170.2175148}, "source.kns_dbt.salsify.Product": {"database": "KNSDataLake", "schema": "salsify", "name": "Product", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\datalake\\salsify\\_salsify__sources.yml", "original_file_path": "models\\staging\\datalake\\salsify\\_salsify__sources.yml", "unique_id": "source.kns_dbt.salsify.Product", "fqn": ["kns_dbt", "staging", "datalake", "salsify", "salsify", "Product"], "source_name": "salsify", "source_description": "This is the salsify schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Product", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSDataLake\".\"salsify\".\"Product\"", "created_at": 1748168170.2175148}, "source.kns_dbt.products.Brand": {"database": "KNSUnifiedMDM", "schema": "products", "name": "Brand", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\mdm\\products\\_products__sources.yml", "original_file_path": "models\\staging\\mdm\\products\\_products__sources.yml", "unique_id": "source.kns_dbt.products.Brand", "fqn": ["kns_dbt", "staging", "mdm", "products", "products", "Brand"], "source_name": "products", "source_description": "This is the dbo schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Brand", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSUnifiedMDM\".\"products\".\"Brand\"", "created_at": 1748168170.2175148}, "source.kns_dbt.products.Catalog": {"database": "KNSUnifiedMDM", "schema": "products", "name": "Catalog", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\mdm\\products\\_products__sources.yml", "original_file_path": "models\\staging\\mdm\\products\\_products__sources.yml", "unique_id": "source.kns_dbt.products.Catalog", "fqn": ["kns_dbt", "staging", "mdm", "products", "products", "Catalog"], "source_name": "products", "source_description": "This is the dbo schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Catalog", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSUnifiedMDM\".\"products\".\"Catalog\"", "created_at": 1748168170.2175148}, "source.kns_dbt.products.Style": {"database": "KNSUnifiedMDM", "schema": "products", "name": "Style", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\mdm\\products\\_products__sources.yml", "original_file_path": "models\\staging\\mdm\\products\\_products__sources.yml", "unique_id": "source.kns_dbt.products.Style", "fqn": ["kns_dbt", "staging", "mdm", "products", "products", "Style"], "source_name": "products", "source_description": "This is the dbo schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Style", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSUnifiedMDM\".\"products\".\"Style\"", "created_at": 1748168170.2175148}, "source.kns_dbt.products.Subclass": {"database": "KNSUnifiedMDM", "schema": "products", "name": "Subclass", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\mdm\\products\\_products__sources.yml", "original_file_path": "models\\staging\\mdm\\products\\_products__sources.yml", "unique_id": "source.kns_dbt.products.Subclass", "fqn": ["kns_dbt", "staging", "mdm", "products", "products", "Subclass"], "source_name": "products", "source_description": "This is the dbo schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Subclass", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSUnifiedMDM\".\"products\".\"Subclass\"", "created_at": 1748168170.2175148}, "source.kns_dbt.products.Variant": {"database": "KNSUnifiedMDM", "schema": "products", "name": "Variant", "resource_type": "source", "package_name": "kns_dbt", "path": "models\\staging\\mdm\\products\\_products__sources.yml", "original_file_path": "models\\staging\\mdm\\products\\_products__sources.yml", "unique_id": "source.kns_dbt.products.Variant", "fqn": ["kns_dbt", "staging", "mdm", "products", "products", "Variant"], "source_name": "products", "source_description": "This is the dbo schema from our KNSDataLake database found on the on premise SQL Server", "loader": "", "identifier": "Variant", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"KNSUnifiedMDM\".\"products\".\"Variant\"", "created_at": 1748168170.2175148}}, "macros": {"macro.kns_dbt.years_back_filter": {"name": "years_back_filter", "resource_type": "macro", "package_name": "kns_dbt", "path": "macros\\date_filter.sql", "original_file_path": "macros\\date_filter.sql", "unique_id": "macro.kns_dbt.years_back_filter", "macro_sql": "{% macro years_back_filter(column_name='date', years=2) %}\r\n    {{ column_name }} >= dateadd(year, -{{ var('years_back', years) }}, getdate())\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.9519541, "supported_languages": null}, "macro.kns_dbt.test_no_1900_dates": {"name": "test_no_1900_dates", "resource_type": "macro", "package_name": "kns_dbt", "path": "tests\\generic\\date_tests.sql", "original_file_path": "tests\\generic\\date_tests.sql", "unique_id": "macro.kns_dbt.test_no_1900_dates", "macro_sql": "{% test no_1900_dates(model, column_name) %}\r\n    select *\r\n    from {{ model }}\r\n    where {{ column_name }} = '1900-01-01'\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.9519541, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_catalog": {"name": "sqlserver__get_catalog", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\catalog.sql", "original_file_path": "macros\\adapter\\catalog.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_catalog", "macro_sql": "{% macro sqlserver__get_catalog(information_schemas, schemas) -%}\n    {% set query_label = apply_label() %}\n    {%- call statement('catalog', fetch_result=True) -%}\n\n        with\n        principals as (\n            select\n                name as principal_name,\n                principal_id as principal_id\n            from\n                sys.database_principals {{ information_schema_hints() }}\n        ),\n\n        schemas as (\n            select\n                name as schema_name,\n                schema_id as schema_id,\n                principal_id as principal_id\n            from\n                sys.schemas {{ information_schema_hints() }}\n        ),\n\n        tables as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'BASE TABLE' as table_type\n            from\n                sys.tables {{ information_schema_hints() }}\n        ),\n\n        tables_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                tables\n            join schemas on tables.schema_id = schemas.schema_id\n        ),\n\n        views as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'VIEW' as table_type\n            from\n                sys.views {{ information_schema_hints() }}\n        ),\n\n        views_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                views\n            join schemas on views.schema_id = schemas.schema_id\n        ),\n\n        tables_and_views as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                tables_with_metadata\n            join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n            union all\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                views_with_metadata\n            join principals on views_with_metadata.owner_principal_id = principals.principal_id\n        ),\n\n        cols as (\n\n            select\n                c.object_id,\n                c.name as column_name,\n                c.column_id as column_index,\n                t.name as column_type\n            from sys.columns as c {{ information_schema_hints() }}\n            left join sys.types as t {{ information_schema_hints() }} on c.system_type_id = t.system_type_id\n        )\n\n        select\n            DB_NAME() as table_database,\n            tv.schema_name as table_schema,\n            tv.table_name,\n            tv.table_type,\n            null as table_comment,\n            tv.principal_name as table_owner,\n            cols.column_name,\n            cols.column_index,\n            cols.column_type,\n            null as column_comment\n        from tables_and_views tv\n        join cols on tv.object_id = cols.object_id\n        where ({%- for schema in schemas -%}\n            upper(tv.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%})\n\n        order by column_index\n        {{ query_label }}\n\n        {%- endcall -%}\n\n    {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.apply_label", "macro.dbt.statement", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.9519541, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_catalog_relations": {"name": "sqlserver__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\catalog.sql", "original_file_path": "macros\\adapter\\catalog.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_catalog_relations", "macro_sql": "{% macro sqlserver__get_catalog_relations(information_schema, relations) -%}\n    {% set query_label = apply_label() %}\n    {%- call statement('catalog', fetch_result=True) -%}\n\n    with\n    principals as (\n        select\n            name as principal_name,\n            principal_id as principal_id\n        from\n            sys.database_principals {{ information_schema_hints() }}\n    ),\n\n    schemas as (\n        select\n            name as schema_name,\n            schema_id as schema_id,\n            principal_id as principal_id\n        from\n            sys.schemas {{ information_schema_hints() }}\n    ),\n\n    tables as (\n        select\n            object_id,\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'BASE TABLE' as table_type\n        from\n            sys.tables {{ information_schema_hints() }}\n    ),\n\n    tables_with_metadata as (\n        select\n            object_id,\n            table_name,\n            schema_name,\n            coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            tables\n        join schemas on tables.schema_id = schemas.schema_id\n    ),\n\n    views as (\n        select\n            object_id,\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'VIEW' as table_type\n        from\n            sys.views {{ information_schema_hints() }}\n    ),\n\n    views_with_metadata as (\n        select\n            object_id,\n            table_name,\n            schema_name,\n            coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            views\n        join schemas on views.schema_id = schemas.schema_id\n    ),\n\n    tables_and_views as (\n        select\n            object_id,\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            tables_with_metadata\n        join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n        union all\n        select\n            object_id,\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            views_with_metadata\n        join principals on views_with_metadata.owner_principal_id = principals.principal_id\n    ),\n\n    cols as (\n\n        select\n            c.object_id,\n            c.name as column_name,\n            c.column_id as column_index,\n            t.name as column_type\n        from sys.columns as c {{ information_schema_hints() }}\n        left join sys.types as t on c.system_type_id = t.system_type_id\n    )\n\n    select\n        DB_NAME() as table_database,\n        tv.schema_name as table_schema,\n        tv.table_name,\n        tv.table_type,\n        null as table_comment,\n        tv.principal_name as table_owner,\n        cols.column_name,\n        cols.column_index,\n        cols.column_type,\n        null as column_comment\n    from tables_and_views tv\n    join cols on tv.object_id = cols.object_id\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    upper(tv.schema_name) = upper('{{ relation.schema }}')\n                    and upper(tv.table_name) = upper('{{ relation.identifier }}')\n                )\n            {% elif relation.schema %}\n                (\n                    upper(tv.schema_name) = upper('{{ relation.schema }}')\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n    order by column_index\n    {{ query_label }}\n    {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.apply_label", "macro.dbt.statement", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__alter_column_type": {"name": "sqlserver__alter_column_type", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\columns.sql", "original_file_path": "macros\\adapter\\columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__alter_column_type", "macro_sql": "{% macro sqlserver__alter_column_type(relation, column_name, new_column_type) %}\n\n    {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n    {% set alter_column_type %}\n        alter {{ relation.type }} {{ relation }} add \"{{ tmp_column }}\" {{ new_column_type }};\n    {%- endset %}\n\n    {% set update_column %}\n        update {{ relation }} set \"{{ tmp_column }}\" = \"{{ column_name }}\";\n    {%- endset %}\n\n    {% set drop_column %}\n        alter {{ relation.type }} {{ relation }} drop column \"{{ column_name }}\";\n    {%- endset %}\n\n    {% set rename_column %}\n        exec sp_rename '{{ relation | replace('\"', '') }}.{{ tmp_column }}', '{{ column_name }}', 'column'\n    {%- endset %}\n\n    {% do run_query(alter_column_type) %}\n    {% do run_query(update_column) %}\n    {% do run_query(drop_column) %}\n    {% do run_query(rename_column) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index": {"name": "sqlserver__create_clustered_columnstore_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\indexes.sql", "original_file_path": "macros\\adapter\\indexes.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index", "macro_sql": "{% macro sqlserver__create_clustered_columnstore_index(relation) -%}\n    {%- set cci_name = (relation.schema ~ '_' ~ relation.identifier ~ '_cci') | replace(\".\", \"\") | replace(\" \", \"\") -%}\n    {%- set relation_name = relation.schema ~ '_' ~ relation.identifier -%}\n    {%- set full_relation = '\"' ~ relation.schema ~ '\".\"' ~ relation.identifier ~ '\"' -%}\n    use [{{ relation.database }}];\n    if EXISTS (\n        SELECT *\n        FROM sys.indexes {{ information_schema_hints() }}\n        WHERE name = '{{cci_name}}'\n        AND object_id=object_id('{{relation_name}}')\n    )\n    DROP index {{full_relation}}.{{cci_name}}\n    CREATE CLUSTERED COLUMNSTORE INDEX {{cci_name}}\n    ON {{full_relation}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.drop_xml_indexes": {"name": "drop_xml_indexes", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\indexes.sql", "original_file_path": "macros\\adapter\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n    {{ log(\"Running drop_xml_indexes() macro...\") }}\n\n    declare @drop_xml_indexes nvarchar(max);\n    select @drop_xml_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes {{ information_schema_hints() }}\n    inner join sys.tables {{ information_schema_hints() }}\n    on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n        and sys.indexes.type_desc = 'XML'\n        and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n    ); exec sp_executesql @drop_xml_indexes;\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.drop_spatial_indexes": {"name": "drop_spatial_indexes", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\indexes.sql", "original_file_path": "macros\\adapter\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n    {# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n    {# and https://stackoverflow.com/a/33785833/10415173         #}\n\n    {{ log(\"Running drop_spatial_indexes() macro...\") }}\n\n    declare @drop_spatial_indexes nvarchar(max);\n    select @drop_spatial_indexes = (\n        select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n        from sys.indexes {{ information_schema_hints() }}\n        inner join sys.tables {{ information_schema_hints() }}\n        on sys.indexes.object_id = sys.tables.object_id\n        where sys.indexes.[name] is not null\n        and sys.indexes.type_desc = 'Spatial'\n        and sys.tables.[name] = '{{ this.table }}'\n        for xml path('')\n    ); exec sp_executesql @drop_spatial_indexes;\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.drop_fk_constraints": {"name": "drop_fk_constraints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\indexes.sql", "original_file_path": "macros\\adapter\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n    {# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n\n    {{ log(\"Running drop_fk_constraints() macro...\") }}\n\n    declare @drop_fk_constraints nvarchar(max);\n    select @drop_fk_constraints = (\n        select 'IF OBJECT_ID(''' + SCHEMA_NAME(CONVERT(VARCHAR(MAX), sys.foreign_keys.[schema_id])) + '.' + sys.foreign_keys.[name] + ''', ''F'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.foreign_keys.[schema_id]) + '].[' + OBJECT_NAME(sys.foreign_keys.[parent_object_id]) + '] DROP CONSTRAINT [' + sys.foreign_keys.[name]+ '];'\n        from sys.foreign_keys\n        inner join sys.tables on sys.foreign_keys.[referenced_object_id] = sys.tables.[object_id]\n        where sys.tables.[name] = '{{ this.table }}'\n        for xml path('')\n    ); exec sp_executesql @drop_fk_constraints;\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.drop_pk_constraints": {"name": "drop_pk_constraints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\indexes.sql", "original_file_path": "macros\\adapter\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n    {# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n    {# and https://stackoverflow.com/a/33785833/10415173         #}\n\n    {{ drop_xml_indexes() }}\n\n    {{ drop_spatial_indexes() }}\n\n    {{ drop_fk_constraints() }}\n\n    {{ log(\"Running drop_pk_constraints() macro...\") }}\n\n    declare @drop_pk_constraints nvarchar(max);\n    select @drop_pk_constraints = (\n        select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + sys.tables.[name] + '] DROP CONSTRAINT [' + sys.indexes.[name]+ '];'\n        from sys.indexes\n        inner join sys.tables on sys.indexes.[object_id] = sys.tables.[object_id]\n        where sys.indexes.is_primary_key = 1\n        and sys.tables.[name] = '{{ this.table }}'\n        for xml path('')\n    ); exec sp_executesql @drop_pk_constraints;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.drop_xml_indexes", "macro.dbt_sqlserver.drop_spatial_indexes", "macro.dbt_sqlserver.drop_fk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.drop_all_indexes_on_table": {"name": "drop_all_indexes_on_table", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\indexes.sql", "original_file_path": "macros\\adapter\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_all_indexes_on_table", "macro_sql": "{% macro drop_all_indexes_on_table() -%}\n    {# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n    {# and https://stackoverflow.com/a/33785833/10415173         #}\n\n    {{ drop_pk_constraints() }}\n\n    {{ log(\"Dropping remaining indexes...\") }}\n\n    declare @drop_remaining_indexes_last nvarchar(max);\n    select @drop_remaining_indexes_last = (\n        select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n        from sys.indexes {{ information_schema_hints() }}\n        inner join sys.tables {{ information_schema_hints() }}\n        on sys.indexes.object_id = sys.tables.object_id\n        where sys.indexes.[name] is not null\n        and SCHEMA_NAME(sys.tables.schema_id) = '{{ this.schema }}'\n        and sys.tables.[name] = '{{ this.table }}'\n        for xml path('')\n    ); exec sp_executesql @drop_remaining_indexes_last;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.drop_pk_constraints", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.create_clustered_index": {"name": "create_clustered_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\indexes.sql", "original_file_path": "macros\\adapter\\indexes.sql", "unique_id": "macro.dbt_sqlserver.create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n    {{ log(\"Creating clustered index...\") }}\n\n    {% set idx_name = \"clustered_\" + local_md5(columns | join(\"_\")) %}\n\n    if not exists(select *\n                    from sys.indexes {{ information_schema_hints() }}\n                    where name = '{{ idx_name }}'\n                    and object_id = OBJECT_ID('{{ this }}')\n    )\n    begin\n\n    create\n    {% if unique -%}\n    unique\n    {% endif %}\n    clustered index\n        {{ idx_name }}\n        on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\n    end\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.create_nonclustered_index": {"name": "create_nonclustered_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\indexes.sql", "original_file_path": "macros\\adapter\\indexes.sql", "unique_id": "macro.dbt_sqlserver.create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n\n    {{ log(\"Creating nonclustered index...\") }}\n\n    {% if includes -%}\n        {% set idx_name = (\n            \"nonclustered_\"\n            + local_md5(columns | join(\"_\"))\n            + \"_incl_\"\n            + local_md5(includes | join(\"_\"))\n        ) %}\n    {% else -%}\n        {% set idx_name = \"nonclustered_\" + local_md5(columns | join(\"_\")) %}\n    {% endif %}\n\n    if not exists(select *\n                    from sys.indexes {{ information_schema_hints() }}\n                    where name = '{{ idx_name }}'\n                    and object_id = OBJECT_ID('{{ this }}')\n    )\n    begin\n    create nonclustered index\n        {{ idx_name }}\n        on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\n        {% if includes -%}\n            include ({{ '[' + includes|join(\"], [\") + ']' }})\n        {% endif %}\n    end\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.967579, "supported_languages": null}, "macro.dbt_sqlserver.apply_label": {"name": "apply_label", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\metadata.sql", "original_file_path": "macros\\adapter\\metadata.sql", "unique_id": "macro.dbt_sqlserver.apply_label", "macro_sql": "{% macro apply_label() %}\n    {{ log (config.get('query_tag','dbt-sqlserver'))}}\n    {%- set query_label = config.get('query_tag','dbt-sqlserver') -%}\n    OPTION (LABEL = '{{query_label}}');\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.983157, "supported_languages": null}, "macro.dbt_sqlserver.default__information_schema_hints": {"name": "default__information_schema_hints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\metadata.sql", "original_file_path": "macros\\adapter\\metadata.sql", "unique_id": "macro.dbt_sqlserver.default__information_schema_hints", "macro_sql": "{% macro default__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.983157, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__information_schema_hints": {"name": "sqlserver__information_schema_hints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\metadata.sql", "original_file_path": "macros\\adapter\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__information_schema_hints", "macro_sql": "{% macro sqlserver__information_schema_hints() %}with (nolock){% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.983157, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__truncate_relation": {"name": "sqlserver__truncate_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\relation.sql", "original_file_path": "macros\\adapter\\relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__truncate_relation", "macro_sql": "{% macro sqlserver__truncate_relation(relation) %}\n    {% call statement('truncate_relation') -%}\n        truncate table {{ relation }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.983157, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_schema_named": {"name": "sqlserver__drop_schema_named", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\schemas.sql", "original_file_path": "macros\\adapter\\schemas.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__drop_schema_named", "macro_sql": "{% macro sqlserver__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.983157, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__validate_sql": {"name": "sqlserver__validate_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapter\\validate_sql.sql", "original_file_path": "macros\\adapter\\validate_sql.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__validate_sql", "macro_sql": "{% macro sqlserver__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.983157, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_test_sql": {"name": "sqlserver__get_test_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\tests.sql", "original_file_path": "macros\\materializations\\tests.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_test_sql", "macro_sql": "{% macro sqlserver__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n\n  -- Create target schema if it does not\n  USE [{{ target.database }}];\n  IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ target.schema }}')\n  BEGIN\n    EXEC('CREATE SCHEMA [{{ target.schema }}]')\n  END\n\n  {% set testview %}\n    [{{ target.schema }}].[testview_{{ local_md5(main_sql) }}_{{ range(1300, 19000) | random }}]\n  {% endset %}\n\n  {% set sql = main_sql.replace(\"'\", \"''\")%}\n  EXEC('create view {{testview}} as {{ sql }};')\n  select\n    {{ \"top (\" ~ limit ~ ')' if limit != none }}\n    {{ fail_calc }} as failures,\n    case when {{ fail_calc }} {{ warn_if }}\n      then 'true' else 'false' end as should_warn,\n    case when {{ fail_calc }} {{ error_if }}\n      then 'true' else 'false' end as should_error\n  from (\n    select * from {{testview}}\n  ) dbt_internal_test;\n\n  EXEC('drop view {{testview}};')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.983157, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_unit_test_sql": {"name": "sqlserver__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\unit_tests.sql", "original_file_path": "macros\\materializations\\unit_tests.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_unit_test_sql", "macro_sql": "{% macro sqlserver__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n\nUSE [{{ target.database }}];\nIF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ target.schema }}')\nBEGIN\nEXEC('CREATE SCHEMA [{{ target.schema }}]')\nEND\n\n{% set test_view %}\n    [{{ target.schema }}].[testview_{{ local_md5(main_sql) }}_{{ range(1300, 19000) | random }}]\n{% endset %}\n{% set test_sql = main_sql.replace(\"'\", \"''\")%}\nEXEC('create view {{test_view}} as {{ test_sql }};')\n\n{% set expected_view %}\n    [{{ target.schema }}].[expectedview_{{ local_md5(expected_fixture_sql) }}_{{ range(1300, 19000) | random }}]\n{% endset %}\n{% set expected_sql = expected_fixture_sql.replace(\"'\", \"''\")%}\nEXEC('create view {{expected_view}} as {{ expected_sql }};')\n\n-- Build actual result given inputs\n{% set unittest_sql %}\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from\n    {{ test_view }}\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from\n    {{ expected_view }}\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{% endset %}\n\nEXEC('{{- escape_single_quotes(unittest_sql) -}}')\n\nEXEC('drop view {{test_view}};')\nEXEC('drop view {{expected_view}};')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.string_literal", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.983157, "supported_languages": null}, "macro.dbt_sqlserver.materialization_incremental_sqlserver": {"name": "materialization_incremental_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt_sqlserver.materialization_incremental_sqlserver", "macro_sql": "{% materialization incremental, adapter='sqlserver' -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n    {% do to_drop.append(temp_relation) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.998828, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.materialization_table_sqlserver": {"name": "materialization_table_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt_sqlserver.materialization_table_sqlserver", "macro_sql": "{% materialization table, adapter='sqlserver' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.998828, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.materialization_view_sqlserver": {"name": "materialization_view_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt_sqlserver.materialization_view_sqlserver", "macro_sql": "{%- materialization view, adapter='sqlserver' -%}\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168166.998828, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.sqlserver__create_columns": {"name": "sqlserver__create_columns", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshot\\helpers.sql", "original_file_path": "macros\\materializations\\snapshot\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_columns", "macro_sql": "{% macro sqlserver__create_columns(relation, columns) %}\n  {% set column_list %}\n    {% for column_entry in columns %}\n      {{column_entry.name}} {{column_entry.data_type}}{{ \", \" if not loop.last }}\n    {% endfor %}\n  {% endset %}\n\n  {% set alter_sql %}\n    ALTER TABLE {{ relation }}\n    ADD {{ column_list }}\n  {% endset %}\n\n  {% set results = run_query(alter_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0144534, "supported_languages": null}, "macro.dbt_sqlserver.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshot\\helpers.sql", "original_file_path": "macros\\materializations\\snapshot\\helpers.sql", "unique_id": "macro.dbt_sqlserver.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n    {{ adapter.drop_relation(temp_relation) }}\n\n    {% set select = snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n\n    {% set tmp_tble_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ get_create_table_as_sql(True, temp_relation, select) }}\n    {% endcall %}\n\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0144534, "supported_languages": null}, "macro.dbt_sqlserver.materialization_snapshot_sqlserver": {"name": "materialization_snapshot_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "unique_id": "macro.dbt_sqlserver.materialization_snapshot_sqlserver", "macro_sql": "{% materialization snapshot, adapter='sqlserver' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% set temp_snapshot_relation_exists, temp_snapshot_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table+\"_snapshot_staging_temp_view\",\n          type='view')\n  -%}\n\n  {% set temp_snapshot_relation_sql = model['compiled_code'].replace(\"'\", \"''\") %}\n  {% call statement('create temp_snapshot_relation') %}\n    USE [{{ model.database}}];\n    EXEC('DROP VIEW IF EXISTS {{ temp_snapshot_relation.include(database=False) }};');\n    EXEC('create view {{ temp_snapshot_relation.include(database=False) }} as {{ temp_snapshot_relation_sql }};');\n  {% endcall %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, temp_snapshot_relation) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n     {% if missing_columns|length > 0 %}\n        {{log(\"Missing columns length is: \"~ missing_columns|length)}}\n        {% do create_columns(target_relation, missing_columns) %}\n      {% endif %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {{ adapter.drop_relation(temp_snapshot_relation) }}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.statement", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_sqlserver.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0144534, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql": {"name": "sqlserver__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql", "macro_sql": "{% macro sqlserver__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0144534, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_binding_char": {"name": "sqlserver__get_binding_char", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\relations\\seeds\\helpers.sql", "original_file_path": "macros\\relations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_binding_char", "macro_sql": "{% macro sqlserver__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0300772, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_batch_size": {"name": "sqlserver__get_batch_size", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\relations\\seeds\\helpers.sql", "original_file_path": "macros\\relations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_batch_size", "macro_sql": "{% macro sqlserver__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0300772, "supported_languages": null}, "macro.dbt_sqlserver.calc_batch_size": {"name": "calc_batch_size", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\relations\\seeds\\helpers.sql", "original_file_path": "macros\\relations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns) %}\n    {#\n        SQL Server allows for a max of 2098 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% set max_batch_size = get_batch_size() %}\n    {% set calculated_batch = (2098 / num_columns)|int %}\n    {% set batch_size = [max_batch_size, calculated_batch] | min %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0300772, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__load_csv_rows": {"name": "sqlserver__load_csv_rows", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\relations\\seeds\\helpers.sql", "original_file_path": "macros\\relations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__load_csv_rows", "macro_sql": "{% macro sqlserver__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(agate_table.column_names|length) %}\n  {% set bindings = [] %}\n  {% set statements = [] %}\n\n  {{ log(\"Inserting batches of \" ~ batch_size ~ \" records\") }}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt_sqlserver.calc_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0300772, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__can_clone_table": {"name": "sqlserver__can_clone_table", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\relations\\table\\clone.sql", "original_file_path": "macros\\relations\\table\\clone.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__can_clone_table", "macro_sql": "{% macro sqlserver__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0300772, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_table_as": {"name": "sqlserver__create_table_as", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_table_as", "macro_sql": "{% macro sqlserver__create_table_as(temporary, relation, sql) -%}\n    {%- set query_label = apply_label() -%}\n    {%- set tmp_relation = relation.incorporate(path={\"identifier\": relation.identifier ~ '__dbt_tmp_vw'}, type='view') -%}\n\n    {%- do adapter.drop_relation(tmp_relation) -%}\n    USE [{{ relation.database }}];\n    {{ get_create_view_as_sql(tmp_relation, sql) }}\n\n    {%- set table_name -%}\n        {{ relation }}\n    {%- endset -%}\n\n\n    {%- set contract_config = config.get('contract') -%}\n    {%- set query -%}\n        {% if contract_config.enforced and (not temporary) %}\n            CREATE TABLE {{table_name}}\n            {{ get_assert_columns_equivalent(sql)  }}\n            {{ build_columns_constraints(relation) }}\n            {% set listColumns %}\n                {% for column in model['columns'] %}\n                    {{ \"[\"~column~\"]\" }}{{ \", \" if not loop.last }}\n                {% endfor %}\n            {%endset%}\n            INSERT INTO {{relation}} ({{listColumns}})\n            SELECT {{listColumns}} FROM {{tmp_relation}} {{ query_label }}\n\n        {% else %}\n            SELECT * INTO {{ table_name }} FROM {{ tmp_relation }} {{ query_label }}\n        {% endif %}\n    {%- endset -%}\n\n    EXEC('{{- escape_single_quotes(query) -}}')\n\n    {# For some reason drop_relation is not firing. This solves the issue for now. #}\n    EXEC('DROP VIEW IF EXISTS {{tmp_relation.schema}}.{{tmp_relation.identifier}}')\n\n\n\n    {% set as_columnstore = config.get('as_columnstore', default=true) %}\n    {% if not temporary and as_columnstore -%}\n        {#-\n        add columnstore index\n        this creates with dbt_temp as its coming from a temporary relation before renaming\n        could alter relation to drop the dbt_temp portion if needed\n        -#}\n        {{ sqlserver__create_clustered_columnstore_index(relation) }}\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.apply_label", "macro.dbt.get_create_view_as_sql", "macro.dbt.get_assert_columns_equivalent", "macro.dbt_fabric.build_columns_constraints", "macro.dbt.escape_single_quotes", "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0300772, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_as": {"name": "sqlserver__create_view_as", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\relations\\views\\create.sql", "original_file_path": "macros\\relations\\views\\create.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_view_as", "macro_sql": "{% macro sqlserver__create_view_as(relation, sql) -%}\n\n    {{ get_use_database_sql(relation.database) }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n        {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n\n    {% set query %}\n        create view {{ relation.include(database=False) }} as {{ sql }};\n    {% endset %}\n\n    {% set tst %}\n    SELECT '1' as col\n    {% endset %}\n    USE [{{ relation.database }}];\n    EXEC('{{- escape_single_quotes(query) -}}')\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.get_use_database_sql", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0300772, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__split_part": {"name": "sqlserver__split_part", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__split_part", "macro_sql": "{% macro sqlserver__split_part(string_text, delimiter_text, part_number) %}\n    {% if part_number >= 0 %}\n        LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[{{ part_number }}]', 'VARCHAR(128)'))\n    {% else %}\n        LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[position() = last(){{ part_number }}+1][1]', 'VARCHAR(128)'))\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0300772, "supported_languages": null}, "macro.dbt_fabric.fabric__get_show_grant_sql": {"name": "fabric__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_show_grant_sql", "macro_sql": "{% macro fabric__get_show_grant_sql(relation) %}\n    select\n        GRANTEE as grantee,\n        PRIVILEGE_TYPE as privilege_type\n    from INFORMATION_SCHEMA.TABLE_PRIVILEGES {{ information_schema_hints() }}\n    where TABLE_CATALOG = '{{ relation.database }}'\n      and TABLE_SCHEMA = '{{ relation.schema }}'\n      and TABLE_NAME = '{{ relation.identifier }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0300772, "supported_languages": null}, "macro.dbt_fabric.fabric__get_grant_sql": {"name": "fabric__get_grant_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_grant_sql", "macro_sql": "\n\n\n{%- macro fabric__get_grant_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0457025, "supported_languages": null}, "macro.dbt_fabric.fabric__get_revoke_sql": {"name": "fabric__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_revoke_sql", "macro_sql": "{%- macro fabric__get_revoke_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0457025, "supported_languages": null}, "macro.dbt_fabric.get_provision_sql": {"name": "get_provision_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.get_provision_sql", "macro_sql": "{% macro get_provision_sql(relation, privilege, grantees) %}\n    {% for grantee in grantees %}\n        if not exists(select name from sys.database_principals where name = '{{ grantee }}')\n        create user [{{ grantee }}] from external provider;\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0457025, "supported_languages": null}, "macro.dbt_fabric.fabric__apply_grants": {"name": "fabric__apply_grants", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__apply_grants", "macro_sql": "{% macro fabric__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n\n            {% if config.get('auto_provision_aad_principals', False) %}\n                {% set provision_statement_list = get_dcl_statement_list(relation, needs_granting, get_provision_sql) %}\n            {% else %}\n                {% set provision_statement_list = [] %}\n            {% endif %}\n\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + provision_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0457025, "supported_languages": null}, "macro.dbt_fabric.fabric__get_catalog": {"name": "fabric__get_catalog", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\catalog.sql", "original_file_path": "macros\\adapters\\catalog.sql", "unique_id": "macro.dbt_fabric.fabric__get_catalog", "macro_sql": "{% macro fabric__get_catalog(information_schemas, schemas) -%}\n\n    {% set query_label = apply_label() %}\n    {%- call statement('catalog', fetch_result=True) -%}\n\n        with\n        principals as (\n            select\n                name as principal_name,\n                principal_id as principal_id\n            from\n                sys.database_principals {{ information_schema_hints() }}\n        ),\n\n        schemas as (\n            select\n                name as schema_name,\n                schema_id as schema_id,\n                principal_id as principal_id\n            from\n                sys.schemas {{ information_schema_hints() }}\n        ),\n\n        tables as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'BASE TABLE' as table_type\n            from\n                sys.tables {{ information_schema_hints() }}\n        ),\n\n        tables_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                tables\n            join schemas on tables.schema_id = schemas.schema_id\n        ),\n\n        views as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'VIEW' as table_type\n            from\n                sys.views {{ information_schema_hints() }}\n        ),\n\n        views_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                views\n            join schemas on views.schema_id = schemas.schema_id\n        ),\n\n        tables_and_views as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                tables_with_metadata\n            join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n            union all\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                views_with_metadata\n            join principals on views_with_metadata.owner_principal_id = principals.principal_id\n        ),\n\n        cols as (\n\n            select\n                c.object_id,\n                c.name as column_name,\n                c.column_id as column_index,\n                t.name as column_type\n            from sys.columns as c {{ information_schema_hints() }}\n            left join sys.types as t on c.system_type_id = t.system_type_id\n        )\n\n        select\n            DB_NAME() as table_database,\n            tv.schema_name as table_schema,\n            tv.table_name,\n            tv.table_type,\n            null as table_comment,\n            tv.principal_name as table_owner,\n            cols.column_name,\n            cols.column_index,\n            cols.column_type,\n            null as column_comment\n        from tables_and_views tv\n        join cols on tv.object_id = cols.object_id\n        where ({%- for schema in schemas -%}\n            upper(tv.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%})\n\n        order by column_index\n        {{ query_label }}\n\n        {%- endcall -%}\n\n    {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0457025, "supported_languages": null}, "macro.dbt_fabric.fabric__get_catalog_relations": {"name": "fabric__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\catalog.sql", "original_file_path": "macros\\adapters\\catalog.sql", "unique_id": "macro.dbt_fabric.fabric__get_catalog_relations", "macro_sql": "{% macro fabric__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query_label = apply_label() %}\n    {%- set distinct_databases = relations | map(attribute='database') | unique | list -%}\n\n    {%- if distinct_databases | length == 1 -%}\n        {%- call statement('catalog', fetch_result=True) -%}\n            {{ get_use_database_sql(distinct_databases[0]) }}\n            with\n            principals as (\n                select\n                    name as principal_name,\n                    principal_id as principal_id\n                from\n                    sys.database_principals {{ information_schema_hints() }}\n            ),\n\n            schemas as (\n                select\n                    name as schema_name,\n                    schema_id as schema_id,\n                    principal_id as principal_id\n                from\n                    sys.schemas {{ information_schema_hints() }}\n            ),\n\n            tables as (\n                select\n                    object_id,\n                    name as table_name,\n                    schema_id as schema_id,\n                    principal_id as principal_id,\n                    'BASE TABLE' as table_type\n                from\n                    sys.tables {{ information_schema_hints() }}\n            ),\n\n            tables_with_metadata as (\n                select\n                    object_id,\n                    table_name,\n                    schema_name,\n                    coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n                    table_type\n                from\n                    tables\n                join schemas on tables.schema_id = schemas.schema_id\n            ),\n\n            views as (\n                select\n                    object_id,\n                    name as table_name,\n                    schema_id as schema_id,\n                    principal_id as principal_id,\n                    'VIEW' as table_type\n                from\n                    sys.views {{ information_schema_hints() }}\n            ),\n\n            views_with_metadata as (\n                select\n                    object_id,\n                    table_name,\n                    schema_name,\n                    coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n                    table_type\n                from\n                    views\n                join schemas on views.schema_id = schemas.schema_id\n            ),\n\n            tables_and_views as (\n                select\n                    object_id,\n                    table_name,\n                    schema_name,\n                    principal_name,\n                    table_type\n                from\n                    tables_with_metadata\n                join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n                union all\n                select\n                    object_id,\n                    table_name,\n                    schema_name,\n                    principal_name,\n                    table_type\n                from\n                    views_with_metadata\n                join principals on views_with_metadata.owner_principal_id = principals.principal_id\n            ),\n\n            cols as (\n\n                select\n                    c.object_id,\n                    c.name as column_name,\n                    c.column_id as column_index,\n                    t.name as column_type\n                from sys.columns as c {{ information_schema_hints() }}\n                left join sys.types as t on c.system_type_id = t.system_type_id\n            )\n\n            select\n                DB_NAME() as table_database,\n                tv.schema_name as table_schema,\n                tv.table_name,\n                tv.table_type,\n                null as table_comment,\n                tv.principal_name as table_owner,\n                cols.column_name,\n                cols.column_index,\n                cols.column_type,\n                null as column_comment\n            from tables_and_views tv\n            join cols on tv.object_id = cols.object_id\n            where (\n                {%- for relation in relations -%}\n                    {% if relation.schema and relation.identifier %}\n                        (\n                            upper(tv.schema_name) = upper('{{ relation.schema }}')\n                            and upper(tv.table_name) = upper('{{ relation.identifier }}')\n                        )\n                    {% elif relation.schema %}\n                        (\n                            upper(tv.schema_name) = upper('{{ relation.schema }}')\n                        )\n                    {% else %}\n                        {% do exceptions.raise_compiler_error(\n                            '`get_catalog_relations` requires a list of relations, each with a schema'\n                        ) %}\n                    {% endif %}\n\n                    {%- if not loop.last %} or {% endif -%}\n                {%- endfor -%}\n            )\n\n            order by column_index\n            {{ query_label }}\n\n        {%- endcall -%}\n        {{ return(load_result('catalog').table) }}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\n            '`get_catalog_relations` can catalog one database at a time'\n        ) %}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0457025, "supported_languages": null}, "macro.dbt_fabric.fabric__get_empty_subquery_sql": {"name": "fabric__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_empty_subquery_sql", "macro_sql": "{% macro fabric__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {% if sql.strip().lower().startswith('with') %}\n        {{ select_sql }}\n    {% else -%}\n        select * from (\n        {{ select_sql }}\n    ) dbt_sbq_tmp\n    where 1 = 0\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.fabric__get_columns_in_relation": {"name": "fabric__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_columns_in_relation", "macro_sql": "{% macro fabric__get_columns_in_relation(relation) -%}\n    {% set query_label = apply_label() %}\n    {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n        with mapping as (\n            select\n                row_number() over (partition by object_name(c.object_id) order by c.column_id) as ordinal_position,\n                c.name collate database_default as column_name,\n                t.name as data_type,\n                c.max_length as character_maximum_length,\n                c.precision as numeric_precision,\n                c.scale as numeric_scale\n            from [{{ 'tempdb' if '#' in relation.identifier else relation.database }}].sys.columns c {{ information_schema_hints() }}\n            inner join sys.types t {{ information_schema_hints() }}\n            on c.user_type_id = t.user_type_id\n            where c.object_id = object_id('{{ 'tempdb..' ~ relation.include(database=false, schema=false) if '#' in relation.identifier else relation }}')\n        )\n\n        select\n            column_name,\n            data_type,\n            character_maximum_length,\n            numeric_precision,\n            numeric_scale\n        from mapping\n        order by ordinal_position\n        {{ query_label }}\n\n    {% endcall %}\n    {% set table = load_result('get_columns_in_relation').table %}\n    {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement", "macro.dbt_fabric.information_schema_hints", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.fabric__get_columns_in_query": {"name": "fabric__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_columns_in_query", "macro_sql": "{% macro fabric__get_columns_in_query(select_sql) %}\n    {% set query_label = apply_label() %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select TOP 0 * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where 0 = 1\n        {{ query_label }}\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.fabric__alter_column_type": {"name": "fabric__alter_column_type", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__alter_column_type", "macro_sql": "{% macro fabric__alter_column_type(relation, column_name, new_column_type) %}\n\n    {%- set table_name= relation.identifier -%}\n    {%- set schema_name = relation.schema -%}\n\n    {% set generate_tmp_relation_script %}\n        SELECT TRIM(REPLACE(STRING_AGG(ColumnName + ' ', ',-'), '-', CHAR(10)))  AS ColumnDef\n        FROM\n        (\n            SELECT\n            CAST(c.COLUMN_NAME AS VARCHAR) AS ColumnName\n            FROM INFORMATION_SCHEMA.TABLES t\n            JOIN INFORMATION_SCHEMA.COLUMNS c\n                ON t.TABLE_SCHEMA = c.TABLE_SCHEMA\n                AND t.TABLE_NAME = c.TABLE_NAME\n                WHERE t.TABLE_NAME = REPLACE('{{table_name}}','\"','')\n                AND t.TABLE_SCHEMA = REPLACE('{{schema_name}}','\"','')\n                AND c.COLUMN_NAME <> REPLACE('{{column_name}}','\"','')\n        ) T\n    {% endset %}\n\n    {%- set query_result = run_query(generate_tmp_relation_script) -%}\n    {%- set query_result_text = query_result.rows[0][0] -%}\n\n    {% set tempTableName %}\n        {{ relation.schema }}.{{ relation.identifier }}_{{ range(1300, 19000) | random }}\n    {% endset %}\n    {{ log(\"Cannot Alter table type, as it is not supported. Using random table as a temp table. - \" ~ tempTableName) }}\n\n    {% set tempTable %}\n        CREATE TABLE {{tempTableName}}\n        AS SELECT {{query_result_text}}, CAST({{ column_name }} AS {{new_column_type}}) AS {{column_name}} FROM {{ relation.schema }}.{{ relation.identifier }}\n        {{ apply_label() }}\n    {% endset %}\n\n    {% call statement('create_temp_table') -%}\n        {{ tempTable }}\n    {%- endcall %}\n\n    {% set dropTable %}\n        DROP TABLE {{ relation.schema }}.{{ relation.identifier }}\n    {% endset %}\n\n    {% call statement('drop_table') -%}\n        {{ dropTable }}\n    {%- endcall %}\n\n    {% set createTable %}\n        CREATE TABLE {{ relation.schema }}.{{ relation.identifier }}\n        AS SELECT * FROM {{tempTableName}} {{ apply_label() }}\n    {% endset %}\n\n    {% call statement('create_Table') -%}\n        {{ createTable }}\n    {%- endcall %}\n\n    {% set dropTempTable %}\n        DROP TABLE {{tempTableName}}\n    {% endset %}\n\n    {% call statement('drop_temp_table') -%}\n        {{ dropTempTable }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_fabric.apply_label", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.fabric__alter_relation_add_remove_columns": {"name": "fabric__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__alter_relation_add_remove_columns", "macro_sql": "{% macro fabric__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  {% call statement('add_drop_columns') -%}\n    {% if add_columns %}\n        alter {{ relation.type }} {{ relation }}\n        add {% for column in add_columns %}\"{{ column.name }}\" {{ column.data_type }}{{ ', ' if not loop.last }}{% endfor %};\n    {% endif %}\n\n    {% if remove_columns %}\n        alter {{ relation.type }} {{ relation }}\n        drop column {% for column in remove_columns %}\"{{ column.name }}\"{{ ',' if not loop.last }}{% endfor %};\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.fabric__create_clustered_columnstore_index": {"name": "fabric__create_clustered_columnstore_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.fabric__create_clustered_columnstore_index", "macro_sql": "{% macro fabric__create_clustered_columnstore_index(relation) -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.drop_xml_indexes": {"name": "drop_xml_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.drop_spatial_indexes": {"name": "drop_spatial_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.drop_fk_constraints": {"name": "drop_fk_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.drop_pk_constraints": {"name": "drop_pk_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.drop_fk_indexes_on_table": {"name": "drop_fk_indexes_on_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_fk_indexes_on_table", "macro_sql": "{% macro drop_fk_indexes_on_table(relation) -%}\n  {% call statement('find_references', fetch_result=true) %}\n      USE [{{ relation.database }}];\n      SELECT  obj.name AS FK_NAME,\n      sch.name AS [schema_name],\n      tab1.name AS [table],\n      col1.name AS [column],\n      tab2.name AS [referenced_table],\n      col2.name AS [referenced_column]\n      FROM sys.foreign_key_columns fkc\n      INNER JOIN sys.objects obj\n          ON obj.object_id = fkc.constraint_object_id\n      INNER JOIN sys.tables tab1\n          ON tab1.object_id = fkc.parent_object_id\n      INNER JOIN sys.schemas sch\n          ON tab1.schema_id = sch.schema_id\n      INNER JOIN sys.columns col1\n          ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id\n      INNER JOIN sys.tables tab2\n          ON tab2.object_id = fkc.referenced_object_id\n      INNER JOIN sys.columns col2\n          ON col2.column_id = referenced_column_id AND col2.object_id = tab2.object_id\n      WHERE sch.name = '{{ relation.schema }}' and tab2.name = '{{ relation.identifier }}'\n  {% endcall %}\n      {% set references = load_result('find_references')['data'] %}\n      {% for reference in references -%}\n        {% call statement('main') -%}\n           alter table [{{reference[1]}}].[{{reference[2]}}] drop constraint [{{reference[0]}}]\n        {%- endcall %}\n      {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.create_clustered_index": {"name": "create_clustered_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.create_nonclustered_index": {"name": "create_nonclustered_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.fabric__list_nonclustered_rowstore_indexes": {"name": "fabric__list_nonclustered_rowstore_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.fabric__list_nonclustered_rowstore_indexes", "macro_sql": "{% macro fabric__list_nonclustered_rowstore_indexes(relation) -%}\n  {% call statement('list_nonclustered_rowstore_indexes', fetch_result=True) -%}\n\n    SELECT i.name AS index_name\n    , i.name + '__dbt_backup' as index_new_name\n    , COL_NAME(ic.object_id,ic.column_id) AS column_name\n    FROM sys.indexes AS i\n    INNER JOIN sys.index_columns AS ic\n        ON i.object_id = ic.object_id AND i.index_id = ic.index_id and i.type <> 5\n    WHERE i.object_id = OBJECT_ID('{{ relation.schema }}.{{ relation.identifier }}')\n\n    UNION ALL\n\n    SELECT  obj.name AS index_name\n    , obj.name + '__dbt_backup' as index_new_name\n    , col1.name AS column_name\n    FROM sys.foreign_key_columns fkc\n    INNER JOIN sys.objects obj\n        ON obj.object_id = fkc.constraint_object_id\n    INNER JOIN sys.tables tab1\n        ON tab1.object_id = fkc.parent_object_id\n    INNER JOIN sys.schemas sch\n        ON tab1.schema_id = sch.schema_id\n    INNER JOIN sys.columns col1\n        ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id\n    INNER JOIN sys.tables tab2\n        ON tab2.object_id = fkc.referenced_object_id\n    INNER JOIN sys.columns col2\n        ON col2.column_id = referenced_column_id AND col2.object_id = tab2.object_id\n    WHERE sch.name = '{{ relation.schema }}' and tab1.name = '{{ relation.identifier }}'\n\n  {% endcall %}\n  {{ return(load_result('list_nonclustered_rowstore_indexes').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.061331, "supported_languages": null}, "macro.dbt_fabric.apply_label": {"name": "apply_label", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.apply_label", "macro_sql": "{% macro apply_label() %}\n    {{ log (config.get('query_tag','dbt-fabric'))}}\n    {%- set query_label = config.get('query_tag','dbt-fabric-dw') -%}\n    OPTION (LABEL = '{{query_label}}');\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.information_schema_hints": {"name": "information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.information_schema_hints", "macro_sql": "{% macro information_schema_hints() %}\n    {{ return(adapter.dispatch('information_schema_hints')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.default__information_schema_hints": {"name": "default__information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.default__information_schema_hints", "macro_sql": "{% macro default__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__information_schema_hints": {"name": "fabric__information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__information_schema_hints", "macro_sql": "{% macro fabric__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__information_schema_name": {"name": "fabric__information_schema_name", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__information_schema_name", "macro_sql": "{% macro fabric__information_schema_name(database) -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.get_use_database_sql": {"name": "get_use_database_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.get_use_database_sql", "macro_sql": "{% macro get_use_database_sql(database) %}\n    {{ return(adapter.dispatch('get_use_database_sql', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__get_use_database_sql": {"name": "fabric__get_use_database_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_use_database_sql", "macro_sql": "\n\n{%- macro fabric__get_use_database_sql(database) -%}\n  USE [{{database | replace('\"', '')}}];\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__list_schemas": {"name": "fabric__list_schemas", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__list_schemas", "macro_sql": "{% macro fabric__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    {{ get_use_database_sql(database) }}\n    select  name as [schema]\n    from sys.schemas {{ information_schema_hints() }} {{ apply_label() }}\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__check_schema_exists": {"name": "fabric__check_schema_exists", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__check_schema_exists", "macro_sql": "{% macro fabric__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    SELECT count(*) as schema_exist FROM sys.schemas WHERE name = '{{ schema }}' {{ apply_label() }}\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__list_relations_without_caching": {"name": "fabric__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__list_relations_without_caching", "macro_sql": "{% macro fabric__list_relations_without_caching(schema_relation) -%}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    {{ get_use_database_sql(schema_relation.database) }}\n    with base as (\n      select\n        DB_NAME() as [database],\n        t.name as [name],\n        SCHEMA_NAME(t.schema_id) as [schema],\n        'table' as table_type\n      from sys.tables as t {{ information_schema_hints() }}\n      union all\n      select\n        DB_NAME() as [database],\n        v.name as [name],\n        SCHEMA_NAME(v.schema_id) as [schema],\n        'view' as table_type\n      from sys.views as v {{ information_schema_hints() }}\n    )\n    select * from base\n    where [schema] like '{{ schema_relation.schema }}'\n    {{ apply_label() }}\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__get_relation_without_caching": {"name": "fabric__get_relation_without_caching", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_relation_without_caching", "macro_sql": "{% macro fabric__get_relation_without_caching(schema_relation) -%}\n  {% call statement('get_relation_without_caching', fetch_result=True) -%}\n    {{ get_use_database_sql(schema_relation.database) }}\n    with base as (\n      select\n        DB_NAME() as [database],\n        t.name as [name],\n        SCHEMA_NAME(t.schema_id) as [schema],\n        'table' as table_type\n      from sys.tables as t {{ information_schema_hints() }}\n      union all\n      select\n        DB_NAME() as [database],\n        v.name as [name],\n        SCHEMA_NAME(v.schema_id) as [schema],\n        'view' as table_type\n      from sys.views as v {{ information_schema_hints() }}\n    )\n    select * from base\n    where [schema] like '{{ schema_relation.schema }}'\n    and [name] like '{{ schema_relation.identifier }}'\n    {{ apply_label() }}\n  {% endcall %}\n  {{ return(load_result('get_relation_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__get_relation_last_modified": {"name": "fabric__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_relation_last_modified", "macro_sql": "{% macro fabric__get_relation_last_modified(information_schema, relations) -%}\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select\n            o.name as [identifier]\n            , s.name as [schema]\n            , o.modify_date as last_modified\n            , current_timestamp as snapshotted_at\n        from sys.objects o\n        inner join sys.schemas s on o.schema_id = s.schema_id and [type] = 'U'\n        where (\n            {%- for relation in relations -%}\n            (upper(s.name) = upper('{{ relation.schema }}') and\n                upper(o.name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n        )\n        {{ apply_label() }}\n  {%- endcall -%}\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__make_temp_relation": {"name": "fabric__make_temp_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__make_temp_relation", "macro_sql": "{% macro fabric__make_temp_relation(base_relation, suffix='__dbt_temp') %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__get_drop_sql": {"name": "fabric__get_drop_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__get_drop_sql", "macro_sql": "{% macro fabric__get_drop_sql(relation) -%}\n  {% if relation.type == 'view' -%}\n      {% call statement('find_references', fetch_result=true) %}\n        {{ get_use_database_sql(relation.database) }}\n        select\n            sch.name as schema_name,\n            obj.name as view_name\n        from sys.sql_expression_dependencies refs\n        inner join sys.objects obj\n        on refs.referencing_id = obj.object_id\n        inner join sys.schemas sch\n        on obj.schema_id = sch.schema_id\n        where refs.referenced_database_name = '{{ relation.database }}'\n        and refs.referenced_schema_name = '{{ relation.schema }}'\n        and refs.referenced_entity_name = '{{ relation.identifier }}'\n        and refs.referencing_class = 1\n        and obj.type = 'V'\n        {{ apply_label() }}\n      {% endcall %}\n      {% set references = load_result('find_references')['data'] %}\n      {% for reference in references -%}\n        -- dropping referenced view {{ reference[0] }}.{{ reference[1] }}\n        {% do adapter.drop_relation\n          (api.Relation.create(\n            identifier = reference[1], schema = reference[0], database = relation.database, type='view'\n          ))%}\n      {% endfor %}\n    {% elif relation.type == 'table'%}\n      {% set object_id_type = 'U' %}\n    {%- else -%}\n        {{ exceptions.raise_not_implemented('Invalid relation being dropped: ' ~ relation) }}\n    {% endif %}\n    {{ get_use_database_sql(relation.database) }}\n    EXEC('DROP {{ relation.type }} IF EXISTS {{ relation.include(database=False) }};');\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__rename_relation": {"name": "fabric__rename_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__rename_relation", "macro_sql": "{% macro fabric__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n     {{ get_use_database_sql(from_relation.database) }}\n      EXEC sp_rename '{{ from_relation.schema }}.{{ from_relation.identifier }}', '{{ to_relation.identifier }}'\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__truncate_relation": {"name": "fabric__truncate_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__truncate_relation", "macro_sql": "{% macro fabric__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n        truncate table {{ relation }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__create_schema": {"name": "fabric__create_schema", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_fabric.fabric__create_schema", "macro_sql": "{% macro fabric__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    USE [{{ relation.database }}];\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__create_schema_with_authorization": {"name": "fabric__create_schema_with_authorization", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_fabric.fabric__create_schema_with_authorization", "macro_sql": "{% macro fabric__create_schema_with_authorization(relation, schema_authorization) -%}\n  {% call statement('create_schema') -%}\n    {{ get_use_database_sql(relation.database) }}\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}] AUTHORIZATION [{{ schema_authorization }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0769503, "supported_languages": null}, "macro.dbt_fabric.fabric__drop_schema": {"name": "fabric__drop_schema", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_fabric.fabric__drop_schema", "macro_sql": "{% macro fabric__drop_schema(relation) -%}\n  {%- set relations_in_schema = list_relations_without_caching(relation) %}\n\n  {% for row in relations_in_schema %}\n    {%- set schema_relation = api.Relation.create(database=relation.database,\n                                               schema=relation.schema,\n                                               identifier=row[1],\n                                               type=row[3]\n                                               ) -%}\n    {% do adapter.drop_relation(schema_relation) %}\n  {%- endfor %}\n\n  {% call statement('drop_schema') -%}\n    {{ get_use_database_sql(relation.database) }}\n    EXEC('DROP SCHEMA IF EXISTS {{ relation.schema }}')\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.list_relations_without_caching", "macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0925798, "supported_languages": null}, "macro.dbt_fabric.fabric__get_limit_sql": {"name": "fabric__get_limit_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt_fabric.fabric__get_limit_sql", "macro_sql": "{% macro fabric__get_limit_sql(sql, limit) %}\n    {%- if limit == -1 or limit is none -%}\n        {{ sql }}\n    {#- Special processing if the last non-blank line starts with order by -#}\n    {%- elif sql.strip().splitlines()[-1].strip().lower().startswith('order by') -%}\n        {{ sql }}\n        offset 0 rows  fetch first {{ limit }} rows only\n    {%- else -%}\n        {{ sql }}\n        order by (select null) offset 0 rows fetch first {{ limit }} rows only\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0925798, "supported_languages": null}, "macro.dbt_fabric.materialization_incremental_fabric": {"name": "materialization_incremental_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt_fabric.materialization_incremental_fabric", "macro_sql": "{% materialization incremental, adapter='fabric' -%}\n\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {% set target_relation = this.incorporate(type='table') %}\n  {%- set relation = load_cached_relation(this) -%}\n  {%- set existing_relation = none %}\n  {% if relation.type ==  'table' %}\n    {% set existing_relation = target_relation %}\n  {% elif relation.type ==  'view' %}\n    {% set existing_relation = get_or_create_relation(relation.database, relation.schema, relation.identifier, relation.type)[1] %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is a view and target is a table.\") }}\n    {{ adapter.drop_relation(existing_relation) }}\n  {% endif %}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n\n  {% set grant_config = config.get('grants') %}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if existing_relation is none or full_refresh_mode or existing_relation.is_view %}\n\n    {% set tmp_vw_relation = target_relation.incorporate(path={\"identifier\": target_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_vw_relation) }}\n    -- Dropping target relation if exists\n    {{ adapter.drop_relation(target_relation) }}\n\n    {%- call statement('main') -%}\n      {{ get_create_table_as_sql(False, target_relation, sql)}}\n    {%- endcall -%}\n\n    -- Dropping temp view relation\n    {{ adapter.drop_relation(tmp_vw_relation) }}\n\n  {% else %}\n\n    {%- set temp_relation = make_temp_relation(target_relation)-%}\n    {{ adapter.drop_relation(temp_relation) }}\n    {% set tmp_tble_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {%- call statement('create_tmp_relation') -%}\n      {{ get_create_table_as_sql(True, temp_relation, sql)}}\n    {%- endcall -%}\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n    {% do adapter.expand_target_column_types(\n              from_relation=temp_relation,\n              to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n\n    {{ adapter.drop_relation(temp_relation) }}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  {% do persist_docs(target_relation, model) %}\n  {% do adapter.commit() %}\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_cached_relation", "macro.dbt.get_or_create_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.make_temp_relation", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0925798, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__get_incremental_default_sql": {"name": "fabric__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "unique_id": "macro.dbt_fabric.fabric__get_incremental_default_sql", "macro_sql": "{% macro fabric__get_incremental_default_sql(arg_dict) %}\n\n    {% if arg_dict[\"unique_key\"] %}\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n    {% else %}\n        -- Incremental Append will insert data into target table.\n        {% do return(get_incremental_append_sql(arg_dict)) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0925798, "supported_languages": null}, "macro.dbt_fabric.fabric__get_merge_sql": {"name": "fabric__get_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_merge_sql", "macro_sql": "{% macro fabric__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n  {{ default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0925798, "supported_languages": null}, "macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql": {"name": "fabric__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql", "macro_sql": "{% macro fabric__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n  {{ default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.0925798, "supported_languages": null}, "macro.dbt_fabric.fabric__get_delete_insert_merge_sql": {"name": "fabric__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_delete_insert_merge_sql", "macro_sql": "{% macro fabric__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n\n    {% set query_label = apply_label() %}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{ target }}\n            where exists (\n                select null\n                from {{ source }}\n                where\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            )\n            {% if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {% endif %}\n            {{ query_label }}\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%}\n            {{ query_label }}\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    ){{ query_label }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1082027, "supported_languages": null}, "macro.dbt_fabric.fabric__can_clone_table": {"name": "fabric__can_clone_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\clone.sql", "original_file_path": "macros\\materializations\\models\\table\\clone.sql", "unique_id": "macro.dbt_fabric.fabric__can_clone_table", "macro_sql": "{% macro fabric__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1082027, "supported_languages": null}, "macro.dbt_fabric.fabric__create_or_replace_clone": {"name": "fabric__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\clone.sql", "original_file_path": "macros\\materializations\\models\\table\\clone.sql", "unique_id": "macro.dbt_fabric.fabric__create_or_replace_clone", "macro_sql": "{% macro fabric__create_or_replace_clone(target_relation, defer_relation) %}\n    CREATE TABLE {{target_relation}}\n    AS CLONE OF {{defer_relation}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1082027, "supported_languages": null}, "macro.dbt_fabric.materialization_clone_fabric": {"name": "materialization_clone_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\clone.sql", "original_file_path": "macros\\materializations\\models\\table\\clone.sql", "unique_id": "macro.dbt_fabric.materialization_clone_fabric", "macro_sql": "\n\n\n{%- materialization clone, adapter='fabric' -%}\n\n    {%- set relations = {'relations': []} -%}\n    {%- if not defer_relation -%}\n        -- nothing to do\n        {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n        {{ return(relations) }}\n    {%- endif -%}\n\n    {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n    {% set can_clone_table = can_clone_table() %}\n\n    {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n        {%- set target_relation = this.incorporate(type='table') -%}\n\n        {% call statement('main') %}\n            {% do adapter.drop_relation(target_relation) %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n        {{ return({'relations': [target_relation]}) }}\n    {%- else -%}\n\n        {%- set target_relation = this.incorporate(type='view') -%}\n\n        -- reuse the view materialization\n        -- TODO: support actual dispatch for materialization macros\n        -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n        {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n        {% if not search_name in context %}\n            {% set search_name = \"materialization_view_default\" %}\n        {% endif %}\n        {% set materialization_macro = context[search_name] %}\n        {% set relations = materialization_macro() %}\n        {{ return(relations) }}\n    {%- endif -%}\n\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.statement", "macro.dbt.create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1082027, "supported_languages": ["sql"]}, "macro.dbt_fabric.build_columns_constraints": {"name": "build_columns_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.build_columns_constraints", "macro_sql": "{% macro build_columns_constraints(relation) %}\n    {{ return(adapter.dispatch('build_columns_constraints', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__build_columns_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1082027, "supported_languages": null}, "macro.dbt_fabric.fabric__build_columns_constraints": {"name": "fabric__build_columns_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.fabric__build_columns_constraints", "macro_sql": "{% macro fabric__build_columns_constraints(relation) %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    (\n      {% for c in raw_column_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n      {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1082027, "supported_languages": null}, "macro.dbt_fabric.build_model_constraints": {"name": "build_model_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.build_model_constraints", "macro_sql": "{% macro build_model_constraints(relation) %}\n    {{ return(adapter.dispatch('build_model_constraints', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__build_model_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1082027, "supported_languages": null}, "macro.dbt_fabric.fabric__build_model_constraints": {"name": "fabric__build_model_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.fabric__build_model_constraints", "macro_sql": "{% macro fabric__build_model_constraints(relation) %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    {% for c in raw_model_constraints -%}\n      {% set alter_table_script %}\n        alter table {{ relation.include(database=False) }} {{c}};\n      {%endset%}\n      {% call statement('alter_table_add_constraint') -%}\n        {{alter_table_script}}\n      {%- endcall %}\n    {% endfor -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1082027, "supported_languages": null}, "macro.dbt_fabric.fabric__create_table_as": {"name": "fabric__create_table_as", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_table_as", "macro_sql": "{% macro fabric__create_table_as(temporary, relation, sql) -%}\n    {% set query_label = apply_label() %}\n    {% set tmp_vw_relation = relation.incorporate(path={\"identifier\": relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    {% do adapter.drop_relation(tmp_vw_relation) %}\n    {{ get_create_view_as_sql(tmp_vw_relation, sql) }}\n\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n\n        CREATE TABLE {{relation}}\n        {{ build_columns_constraints(relation) }}\n        {{ get_assert_columns_equivalent(sql)  }}\n        {% set listColumns %}\n            {% for column in model['columns'] %}\n                {{ \"[\"~column~\"]\" }}{{ \", \" if not loop.last }}\n            {% endfor %}\n        {%endset%}\n\n        INSERT INTO {{relation}} ({{listColumns}})\n        SELECT {{listColumns}} FROM {{tmp_vw_relation}} {{ query_label }}\n\n    {%- else %}\n        {%- set query_label_option = query_label.replace(\"'\", \"''\") -%}\n        EXEC('CREATE TABLE {{relation}} AS SELECT * FROM {{tmp_vw_relation}} {{ query_label_option }}');\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.get_create_view_as_sql", "macro.dbt_fabric.build_columns_constraints", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1082027, "supported_languages": null}, "macro.dbt_fabric.materialization_table_fabric": {"name": "materialization_table_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt_fabric.materialization_table_fabric", "macro_sql": "{% materialization table, adapter='fabric' %}\n\n  -- Load target relation\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set existing_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) -%}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if existing_relation is not none and not existing_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n    {{ adapter.drop_relation(existing_relation) }}\n  {% endif %}\n\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- Making a temp relation\n  {% set temp_relation = make_temp_relation(target_relation, '__dbt_temp') %}\n\n  -- Drop temp relation if it exists before materializing temp relation\n  {{ adapter.drop_relation(temp_relation) }}\n\n  {% set tmp_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n\n  {{ adapter.drop_relation(tmp_vw_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, temp_relation, sql) }}\n  {% endcall %}\n\n  {% if existing_relation is not none and existing_relation.is_table %}\n\n    -- making a backup relation, this will come in use when contract is enforced or not\n    {%- set set_backup_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) -%}\n    {% if (set_backup_relation != none and set_backup_relation.type == \"table\") %}\n      {%- set backup_relation = make_backup_relation(target_relation, 'table') -%}\n    {% elif (set_backup_relation != none and set_backup_relation.type == \"view\") %}\n        {%- set backup_relation = make_backup_relation(target_relation, 'view') -%}\n    {% endif %}\n\n    -- Dropping a temp relation if it exists\n    {{ adapter.drop_relation(backup_relation) }}\n\n    -- Rename existing relation to back up relation\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n\n    -- Renaming temp relation as main relation\n    {{ adapter.rename_relation(temp_relation, target_relation) }}\n\n    -- Drop backup relation\n    {{ adapter.drop_relation(backup_relation) }}\n\n  {%- else %}\n\n      -- Renaming temp relation as main relation\n      {{ adapter.rename_relation(temp_relation, target_relation) }}\n\n  {% endif %}\n\n  {{ adapter.drop_relation(tmp_vw_relation) }}\n\n  -- cleanup\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  {% do persist_docs(target_relation, model) %}\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- Add constraints including FK relation.\n  {{ build_model_constraints(target_relation) }}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.make_backup_relation", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_fabric.build_model_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1238244, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__create_view_as": {"name": "fabric__create_view_as", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_view_as", "macro_sql": "{% macro fabric__create_view_as(relation, sql) -%}\n    {{ fabric__create_view_exec(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_view_exec"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1238244, "supported_languages": null}, "macro.dbt_fabric.fabric__create_view_exec": {"name": "fabric__create_view_exec", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_view_exec", "macro_sql": "{% macro fabric__create_view_exec(relation, sql) -%}\n\n    {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n    {{ get_use_database_sql(relation.database) }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n        {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n\n    EXEC('create view {{ relation.include(database=False) }} as {{ temp_view_sql }};');\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_fabric.get_use_database_sql", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1238244, "supported_languages": null}, "macro.dbt_fabric.materialization_view_fabric": {"name": "materialization_view_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt_fabric.materialization_view_fabric", "macro_sql": "{% materialization view, adapter='fabric' -%}\n\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set existing_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) -%}\n\n  {%- set backup_relation = none %}\n  {% if (existing_relation != none and existing_relation.type == \"table\") %}\n      {%- set backup_relation = make_backup_relation(target_relation, 'table') -%}\n  {% elif (existing_relation != none and existing_relation.type == \"view\") %}\n      {%- set backup_relation = make_backup_relation(target_relation, 'view') -%}\n  {% endif %}\n\n  {% if (existing_relation != none) %}\n    -- drop the temp relations if they exist already in the database\n    {% do adapter.drop_relation(backup_relation) %}\n    -- Rename target relation as backup relation\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n  {% if (backup_relation != none) %}\n    {% do adapter.drop_relation(backup_relation) %}\n  {% endif %}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1238244, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__get_binding_char": {"name": "fabric__get_binding_char", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_binding_char", "macro_sql": "{% macro fabric__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1238244, "supported_languages": null}, "macro.dbt_fabric.fabric__get_batch_size": {"name": "fabric__get_batch_size", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_batch_size", "macro_sql": "{% macro fabric__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1238244, "supported_languages": null}, "macro.dbt_fabric.calc_batch_size": {"name": "calc_batch_size", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns) %}\n    {#\n        SQL Server allows for a max of 2100 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% set max_batch_size = get_batch_size() %}\n    {% set calculated_batch = (2100 / num_columns)-1|int %}\n    {% set calculated_batch = ((2100 / num_columns)-1)|int %}\n    {% set batch_size = [max_batch_size, calculated_batch] | min %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1238244, "supported_languages": null}, "macro.dbt_fabric.fabric__load_csv_rows": {"name": "fabric__load_csv_rows", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__load_csv_rows", "macro_sql": "{% macro fabric__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(agate_table.column_names|length) %}\n  {% set bindings = [] %}\n  {% set statements = [] %}\n\n  {{ log(\"Inserting batches of \" ~ batch_size ~ \" records\") }}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n          {{ apply_label()}}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt_fabric.calc_batch_size", "macro.dbt.get_binding_char", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.13945, "supported_languages": null}, "macro.dbt_fabric.fabric__post_snapshot": {"name": "fabric__post_snapshot", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__post_snapshot", "macro_sql": "{% macro fabric__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation_if_exists(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.13945, "supported_languages": null}, "macro.dbt_fabric.fabric__create_columns": {"name": "fabric__create_columns", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__create_columns", "macro_sql": "{% macro fabric__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add \"{{ column.name }}\" {{ column.data_type }} NULL;\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.13945, "supported_languages": null}, "macro.dbt_fabric.fabric__get_true_sql": {"name": "fabric__get_true_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_true_sql", "macro_sql": "{% macro fabric__get_true_sql() %}\n  {{ return('1=1') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.13945, "supported_languages": null}, "macro.dbt_fabric.fabric__build_snapshot_table": {"name": "fabric__build_snapshot_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__build_snapshot_table", "macro_sql": "{% macro fabric__build_snapshot_table(strategy, relation) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        select * from {{ relation }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.13945, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_staging_table": {"name": "fabric__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_staging_table", "macro_sql": "{% macro fabric__snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) -%}\n\n    with snapshot_query as (\n\n        select * from {{ temp_snapshot_relation }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.13945, "supported_languages": null}, "macro.dbt_fabric.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n    {{ adapter.drop_relation(temp_relation) }}\n\n    {% set select = snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n\n    {% set tmp_tble_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ get_create_table_as_sql(True, temp_relation, select) }}\n    {% endcall %}\n\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.13945, "supported_languages": null}, "macro.dbt_fabric.materialization_snapshot_fabric": {"name": "materialization_snapshot_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_fabric.materialization_snapshot_fabric", "macro_sql": "{% materialization snapshot, adapter='fabric' %}\n\n  {%- set config = model['config'] -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% set temp_snapshot_relation_exists, temp_snapshot_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table+\"_snapshot_staging_temp_view\",\n          type='view') -%}\n\n  -- Create a temporary view to manage if user SQl uses CTE\n  {% set temp_snapshot_relation_sql = model['compiled_code'].replace(\"'\", \"''\") %}\n  {{ adapter.drop_relation(temp_snapshot_relation) }}\n\n  {% call statement('create temp_snapshot_relation') -%}\n    {{ get_create_view_as_sql(temp_snapshot_relation, temp_snapshot_relation_sql) }}\n  {%- endcall %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, temp_snapshot_relation) %}\n\n      -- naming a temp relation\n      {% set tmp_relation_view = target_relation.incorporate(path={\"identifier\": target_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n      -- Fabric & Synapse adapters use temp relation because of lack of CTE support for CTE in CTAS, Insert\n      -- drop temp relation if exists\n      {{ adapter.drop_relation(tmp_relation_view) }}\n      {% set final_sql = get_create_table_as_sql(False, target_relation, build_sql) %}\n      {{ adapter.drop_relation(tmp_relation_view) }}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n      {% set staging_table = build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n      {% if missing_columns|length > 0 %}\n        {{log(\"Missing columns length is: \"~ missing_columns|length)}}\n        {% do create_columns(target_relation, missing_columns) %}\n      {% endif %}\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {{ adapter.drop_relation(temp_snapshot_relation) }}\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.build_snapshot_table", "macro.dbt.get_create_table_as_sql", "macro.dbt_fabric.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1550763, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__snapshot_merge_sql": {"name": "fabric__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_merge_sql", "macro_sql": "{% macro fabric__snapshot_merge_sql(target, source, insert_cols) %}\n\n  {%- set insert_cols_csv = insert_cols | join(', ') -%}\n  {%- set target_table = target.include(database=False) -%}\n  {%- set source_table = source.include(database=False) -%}\n  {% set target_columns_list = [] %}\n  {% for column in insert_cols %}\n    {% set target_columns_list = target_columns_list.append(\"DBT_INTERNAL_SOURCE.\"+column)  %}\n  {% endfor %}\n  {%- set target_columns = target_columns_list | join(', ') -%}\n\n  UPDATE DBT_INTERNAL_DEST\n  SET dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n  FROM {{ target_table }} as DBT_INTERNAL_DEST\n  INNER JOIN {{ source_table }} as DBT_INTERNAL_SOURCE\n  on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n  WHERE DBT_INTERNAL_DEST.dbt_valid_to is null\n  AND DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n  {{ apply_label() }}\n\n  INSERT INTO {{ target_table }} ({{ insert_cols_csv }})\n  SELECT {{target_columns}} FROM {{ source_table }} as DBT_INTERNAL_SOURCE\n  WHERE  DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n  {{ apply_label() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1550763, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_hash_arguments": {"name": "fabric__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_hash_arguments", "macro_sql": "{% macro fabric__snapshot_hash_arguments(args) %}\n    CONVERT(VARCHAR(32), HashBytes('MD5', {% for arg in args %}\n        coalesce(cast({{ arg }} as varchar(8000)), '') {% if not loop.last %} + '|' + {% endif %}\n    {% endfor %}), 2)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1550763, "supported_languages": null}, "macro.dbt_fabric.get_fabric_test_sql": {"name": "get_fabric_test_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt_fabric.get_fabric_test_sql", "macro_sql": "{% macro get_fabric_test_sql(database, schema, main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ log (\"local_md5(model.name): \"~ local_md5(model.name))}}\n  {{ log (\"local_md5(invocation_id): \"~ local_md5(invocation_id))}}\n  {% set testview %}\n\n    [{{ schema }}.testview_{{ local_md5(model.name ~ invocation_id) }}]\n  {% endset %}\n\n  {% set sql = main_sql.replace(\"'\", \"''\")%}\n  {{ get_use_database_sql(database) }}\n  EXEC('create view {{testview}} as {{ sql }};')\n  select\n    {{ fail_calc }} as failures,\n    case when {{ fail_calc }} {{ warn_if }}\n      then 'true' else 'false' end as should_warn,\n    case when {{ fail_calc }} {{ error_if }}\n      then 'true' else 'false' end as should_error\n  from (\n    select {{ \"top (\" ~ limit ~ ')' if limit != none }} * from {{testview}}\n  ) dbt_internal_test;\n\n  {{ get_use_database_sql(database) }}\n  EXEC('drop view {{testview}};')\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_fabric.get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1550763, "supported_languages": null}, "macro.dbt_fabric.fabric__generate_schema_name": {"name": "fabric__generate_schema_name", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__generate_schema_name", "macro_sql": "{% macro fabric__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n        {{ default_schema }}\n    {%- else -%}\n        {{ custom_schema_name | trim }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1550763, "supported_languages": null}, "macro.dbt_fabric.materialization_test_fabric": {"name": "materialization_test_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt_fabric.materialization_test_fabric", "macro_sql": "{%- materialization test, adapter='fabric' -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n  {% set number_of_errors = 0 %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set store_failures_as = config.get('store_failures_as') %}\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    -- create an error count view because data tests can be CTE's\n    {% set error_vw_relation = api.Relation.create(identifier=identifier ~ '__dbt_err_count_vw', schema=schema, database=database, type='view') -%}\n    {% do adapter.drop_relation(error_vw_relation) %}\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(error_vw_relation, sql) }}\n    {% endcall %}\n\n    -- Get errors for the data test\n    {% call statement('find_if_errors_exists', fetch_result=true) %}\n        {{ get_use_database_sql(database) }}\n        select count(*) as num_of_errors from {{ error_vw_relation }}\n        {{ apply_label() }}\n    {% endcall %}\n\n    -- Count errors & drop error view relation\n    {% set number_of_errors = load_result('find_if_errors_exists')['data'][0][0] %}\n    {% do adapter.drop_relation(error_vw_relation) %}\n\n    {% set target_relation = api.Relation.create(\n    identifier=identifier, schema=schema, database=database, type=store_failures_as) -%}\n\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n    -- Dropping temp view created during table creation to persist store failures\n    {% if target_relation.type == 'table' %}\n        {% set tmp_vw_relation = target_relation.incorporate(path={\"identifier\": target_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n        {% do adapter.drop_relation(tmp_vw_relation) %}\n    {% endif %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select * from {{ target_relation }}\n    {% endset %}\n    {{ adapter.commit() }}\n  {% else %}\n    {% set main_sql = sql %}\n  {% endif %}\n\n  {% call statement('main', fetch_result=True) -%}\n    {{ get_fabric_test_sql(database, schema, main_sql, fail_calc, warn_if, error_if, limit)}}\n  {%- endcall %}\n\n  {% if number_of_errors == 0 and should_store_failures() %}\n    -- Dropping target relation if no errors found in data test.\n    {% set identifier = model['alias'] %}\n    {% set target_relation = api.Relation.create(\n    identifier=identifier, schema=schema, database=database, type=store_failures_as) -%}\n    {% do adapter.drop_relation(target_relation) %}\n  {% endif %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.apply_label", "macro.dbt_fabric.get_fabric_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__any_value": {"name": "fabric__any_value", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_fabric.fabric__any_value", "macro_sql": "{% macro fabric__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__array_construct": {"name": "fabric__array_construct", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_fabric.fabric__array_construct", "macro_sql": "{% macro fabric__array_construct(inputs, data_type) -%}\n    JSON_ARRAY({{ inputs|join(' , ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__cast_bool_to_text": {"name": "fabric__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt_fabric.fabric__cast_bool_to_text", "macro_sql": "{% macro fabric__cast_bool_to_text(field) %}\n    case {{ field }}\n        when 1 then 'true'\n        when 0 then 'false'\n        else null\n    end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__concat": {"name": "fabric__concat", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt_fabric.fabric__concat", "macro_sql": "{% macro fabric__concat(fields) -%}\n    {%- if fields|length < 2 -%}\n        {{ fields[0] }}\n    {%- else -%}\n        concat({{ fields|join(', ') }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__dateadd": {"name": "fabric__dateadd", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_fabric.fabric__dateadd", "macro_sql": "{% macro fabric__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        cast({{ from_date_or_timestamp }} as datetime2(6))\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__date_trunc": {"name": "fabric__date_trunc", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_fabric.fabric__date_trunc", "macro_sql": "{% macro fabric__date_trunc(datepart, date) %}\n    CAST(DATEADD({{datepart}}, DATEDIFF({{datepart}}, 0, {{date}}), 0) AS DATE)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__get_tables_by_pattern_sql": {"name": "fabric__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\get_tables_by_pattern.sql", "original_file_path": "macros\\utils\\get_tables_by_pattern.sql", "unique_id": "macro.dbt_fabric.fabric__get_tables_by_pattern_sql", "macro_sql": "{% macro fabric__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    select distinct\n        table_schema as {{ adapter.quote('table_schema') }},\n        table_name as {{ adapter.quote('table_name') }},\n        {{ dbt_utils.get_table_types_sql() }}\n    from {{ database }}.INFORMATION_SCHEMA.TABLES\n    where table_schema like '{{ schema_pattern }}'\n    and table_name like '{{ table_pattern }}'\n    and table_name not like '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__hash": {"name": "fabric__hash", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_fabric.fabric__hash", "macro_sql": "{% macro fabric__hash(field) %}\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), {{field}}), '')), 2))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__last_day": {"name": "fabric__last_day", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt_fabric.fabric__last_day", "macro_sql": "{% macro fabric__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    \tCAST(DATEADD(QUARTER, DATEDIFF(QUARTER, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- elif datepart == 'month' -%}\n        EOMONTH ( {{ date }})\n    {%- elif datepart == 'year' -%}\n        CAST(DATEADD(YEAR, DATEDIFF(year, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- else -%}\n        {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__length": {"name": "fabric__length", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt_fabric.fabric__length", "macro_sql": "{% macro fabric__length(expression) %}\n\n    len( {{ expression }} )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__listagg": {"name": "fabric__listagg", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_fabric.fabric__listagg", "macro_sql": "{% macro fabric__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg({{ measure }}, {{ delimiter_text }})\n        {%- if order_by_clause != None %}\n            within group ({{ order_by_clause }})\n        {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__position": {"name": "fabric__position", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt_fabric.fabric__position", "macro_sql": "{% macro fabric__position(substring_text, string_text) %}\n\n    CHARINDEX(\n        {{ substring_text }},\n        {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__safe_cast": {"name": "fabric__safe_cast", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_fabric.fabric__safe_cast", "macro_sql": "{% macro fabric__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__current_timestamp": {"name": "fabric__current_timestamp", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_fabric.fabric__current_timestamp", "macro_sql": "{% macro fabric__current_timestamp() -%}\n  CAST(SYSDATETIME() AS DATETIME2(6))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_string_as_time": {"name": "fabric__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_string_as_time", "macro_sql": "{% macro fabric__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"CONVERT(DATETIME2(6), '\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1707041, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.1863246, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.201949, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2175744, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2331994, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_fabric.fabric__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.2488213, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.264449, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.280074, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.295697, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.295697, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.295697, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.295697, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.295697, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.295697, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.295697, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.311322, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.311322, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.311322, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.311322, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.311322, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.311322, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.311322, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.311322, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.326946, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.326946, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.326946, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3425746, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3425746, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }}\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }}\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3425746, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3425746, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3425746, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3425746, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3425746, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3581975, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3738215, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.3894436, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4050689, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4050689, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4050689, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4050689, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4050689, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4050689, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4050689, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4050689, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4050689, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4206922, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4206922, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4206922, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4206922, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4206922, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4206922, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4206922, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4206922, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4206922, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.43632, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.43632, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.43632, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.43632, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.43632, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.43632, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')).render() -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4519455, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4675698, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4831932, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.4988062, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.514446, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.530066, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5456932, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.561323, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5769398, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5925636, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5925636, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5925636, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5925636, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.5925636, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6081955, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.623807, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.duckdb__from_unixtimestamp": {"name": "duckdb__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.duckdb__from_unixtimestamp", "macro_sql": "\n\n\n{%- macro duckdb__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6394427, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'MMM' if short else 'MMMM' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6550648, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\round_timestamp.sql", "original_file_path": "macros\\calendar_date\\round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6706886, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\modules_datetime.sql", "original_file_path": "macros\\_utils\\modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\modules_datetime.sql", "original_file_path": "macros\\_utils\\modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_expectations.spark__log_natural": {"name": "spark__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.spark__log_natural", "macro_sql": "{% macro spark__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.6863122, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.spark__quantile": {"name": "spark__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.spark__quantile", "macro_sql": "{% macro spark__quantile(field, quantile, partition) -%}\n    percentile({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.duckdb__rand": {"name": "duckdb__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.duckdb__rand", "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.duckdb__regexp_instr": {"name": "duckdb__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.duckdb__regexp_instr", "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"name": "spark__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nlength(regexp_extract({{ source_value }}, '{{ regexp }}', 0))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.701939, "supported_languages": null}, "macro.dbt_expectations.trino__regexp_instr": {"name": "trino__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.trino__regexp_instr", "macro_sql": "{% macro trino__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n    {% if flags %}\n        {{ dbt_expectations._validate_re2_flags(flags) }}\n        {# Trino prepends \"(?flags)\" to set flags for current group #}\n        {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n    {% endif %}\n    {% if is_raw %}\n        {{ exceptions.warn(\n                \"is_raw option is not supported for this adapter \"\n                ~ \"and is being ignored.\"\n        ) }}\n    {% endif %}\n    {%- set regexp_query = \"regexp_position(\" ~ source_value ~ \", '\" ~ regexp ~ \"', \" ~ position ~ \", \" ~ occurrence ~ \")\" -%}\n    {# Trino regexp_position returns -1 if not found. Change it to 0, to be consistent with other adapters #}\n    if({{ regexp_query}} = -1, 0, {{ regexp_query}})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7175634, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7331886, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7331886, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7331886, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7331886, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7331886, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncast(count(distinct {{ column_name }}) as {{ dbt.type_float() }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7331886, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7331886, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7331886, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7331886, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7488117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7488117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7488117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None,\n                                                   step=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (\n            (value_field {{ operator }} value_field_lag)\n            {%- if step %}\n            and ((value_field_lag - value_field) = {{ step }})\n            {%- endif %}\n        )\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7488117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None,\n                                                   step=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (\n            (value_field {{ operator }} value_field_lag)\n            {%- if step %}\n            and ((value_field - value_field_lag) = {{ step }})\n            {%- endif %}\n        )\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7488117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7488117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7488117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7488117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7488117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.764437, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.764437, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.764437, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.764437, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.764437, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.764437, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.764437, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.764437, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.764437, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min(cast({{ date_col }} as date)) as start_{{ date_part }},\n            max(cast({{ date_col }} as date)) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n\n    {%- set db_start_date = dr.columns[0].values()[0] -%}\n    {%- set db_end_date = dr.columns[1].values()[0] -%}\n\n    {% if db_start_date is not string %}\n        {%- set db_start_date = db_start_date.strftime('%Y-%m-%d') -%}\n        {%- set db_end_date = db_end_date.strftime('%Y-%m-%d') -%}\n    {% endif %}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\n\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.78007, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.78007, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.78007, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.78007, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7956867, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{# the if just allows for column names or literal numbers #}\n{% endfor %} = {% if sum_total is number %}{{sum_total}}{% else %}sum({{ sum_total }}){% endif %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7956867, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7956867, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by {{ columns|join(', ') }}) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ dbt_expectations.md5(column) }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression", "macro.dbt_expectations.md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7956867, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7956867, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7956867, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.7956867, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8113172, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8269365, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8269365, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8269365, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8269365, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8269365, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8269365, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8269365, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.842518, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8581889, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8581889, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8581889, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8581889, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8581889, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8581889, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8581889, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8581889, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8581889, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.trino__type_timestamp": {"name": "trino__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_timestamp", "macro_sql": "{% macro trino__type_timestamp() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.duckdb__type_datetime": {"name": "duckdb__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.duckdb__type_datetime", "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.spark__type_datetime": {"name": "spark__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.spark__type_datetime", "macro_sql": "{% macro spark__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.trino__type_datetime": {"name": "trino__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_datetime", "macro_sql": "{% macro trino__type_datetime() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.md5": {"name": "md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.md5", "macro_sql": "{%- macro md5(string_value) -%}\n    {{ return(adapter.dispatch('md5', 'dbt_expectations')(string_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.default__md5": {"name": "default__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.default__md5", "macro_sql": "\n\n{%- macro default__md5(string_value) -%}\n\n  {{ dbt.hash(string_value) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}, "macro.dbt_expectations.trino__md5": {"name": "trino__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.trino__md5", "macro_sql": "{%- macro trino__md5(string_value) -%}\n\n  md5(cast({{ string_value }} as varbinary))\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748168167.8738124, "supported_languages": null}}, "docs": {"doc.kns_dbt.objectives": {"name": "objectives", "resource_type": "doc", "package_name": "kns_dbt", "path": "marts\\__docs.md", "original_file_path": "models\\marts\\__docs.md", "unique_id": "doc.kns_dbt.objectives", "block_contents": "One of the following values: \r\n\r\n| status                         | definition                      |\r\n|--------------------------------|---------------------------------|\r\n| Top Funnel / Awareness         | Example def                     | \r\n| Mid Funnel                     |                                 |\r\n| Bottom Funnel / Conversions    |                                 | \r\n| Retargeting                    |                                 |\r\n| Prospecting                    |                                 |\r\n| Retention                      |                                 |\r\n| NBSearch                       |                                 |\r\n| BrandSearch                    |                                 |\r\n| PMax                           |                                 |\r\n| BrandShopping                  |                                 |\r\n| NBShopping                     |                                 |\r\n| Null                           |                                 |"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.kns_dbt.int_marketing__SourcesMapped": ["model.kns_dbt.int_marketing__SourcesUnioned"], "model.kns_dbt.int_marketing__SourcesUnioned": ["model.kns_dbt.stg_dbo__Calendar", "model.kns_dbt.stg_deposco__TradingPartner", "model.kns_dbt.stg_marketing__CoOpCampaign", "model.kns_dbt.stg_marketing__Criteo", "model.kns_dbt.stg_marketing__Northbeam", "model.kns_dbt.stg_marketing__PromoteIq", "model.kns_dbt.stg_marketing__Roundel", "model.kns_dbt.stg_marketing__Symbiosys"], "model.kns_dbt.int_sales__CurrentStock": ["model.kns_dbt.stg_deposco__Item", "model.kns_dbt.stg_deposco__OrderHeader", "model.kns_dbt.stg_deposco__OrderLine", "model.kns_dbt.stg_deposco__Pack", "model.kns_dbt.stg_deposco__StockUnit", "model.kns_dbt.stg_deposco__StockUnitAuditHistory"], "model.kns_dbt.int_sales__DimItemPrep": ["model.kns_dbt.stg_deposco__Item", "model.kns_dbt.stg_kns__HistoricalDimItem", "model.kns_dbt.stg_netsuite__KnsItemCogs", "model.kns_dbt.stg_products__Brand", "model.kns_dbt.stg_products__Catalog", "model.kns_dbt.stg_products__Style", "model.kns_dbt.stg_products__Subclass", "model.kns_dbt.stg_products__Variant"], "model.kns_dbt.int_sales__FactSalesLine_Deposco": ["model.kns_dbt.DimItem", "model.kns_dbt.stg_deposco__CoLine", "model.kns_dbt.stg_deposco__Item", "model.kns_dbt.stg_deposco__OrderHeader", "model.kns_dbt.stg_deposco__OrderLine", "model.kns_dbt.stg_deposco__TradingPartner"], "model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals": ["model.kns_dbt.stg_deposco__TradingPartner", "model.kns_dbt.stg_netsuite__Entity", "model.kns_dbt.stg_netsuite__Transaction", "model.kns_dbt.stg_netsuite__TransactionLine"], "model.kns_dbt.int_sales__ReturnRatePrep": ["model.kns_dbt.stg_deposco__Item", "model.kns_dbt.stg_deposco__OrderHeader", "model.kns_dbt.stg_deposco__OrderLine", "model.kns_dbt.stg_deposco__ReceiptLine", "model.kns_dbt.stg_deposco__TradingPartner"], "model.kns_dbt.DimItem": ["model.kns_dbt.int_sales__CurrentStock", "model.kns_dbt.int_sales__DimItemPrep", "seed.kns_dbt.seed_SizeRun"], "model.kns_dbt.DimTradingPartner": ["model.kns_dbt.stg_deposco__TradingPartner"], "model.kns_dbt.FactCurrentStock": ["model.kns_dbt.int_sales__CurrentStock"], "model.kns_dbt.FactMarketingAd": ["model.kns_dbt.int_marketing__SourcesMapped", "seed.kns_dbt.seed_Brands"], "model.kns_dbt.FactReturnRate": ["model.kns_dbt.int_sales__ReturnRatePrep"], "model.kns_dbt.FactSalesLine": ["model.kns_dbt.int_sales__FactSalesLine_Deposco", "model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals", "model.kns_dbt.stg_deposco__OrderHeader", "model.kns_dbt.stg_deposco__OrderLine", "model.kns_dbt.stg_deposco__Shipment", "model.kns_dbt.stg_deposco__ShipmentLine", "model.kns_dbt.stg_deposco__ShipmentOrderHeader", "model.kns_dbt.stg_deposco__TradingPartner"], "model.kns_dbt.FreightForwarders": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea", "model.kns_dbt.stg_kns__FreightForwarder_DSV", "model.kns_dbt.stg_kns__FreightForwarder_POMasterFile", "model.kns_dbt.stg_kns__FreightForwarder_SFI"], "model.kns_dbt.stg_dbo__Calendar": ["source.kns_dbt.dbo.calendar"], "model.kns_dbt.stg_deposco__CoLine": ["source.kns_dbt.deposco.co_line"], "model.kns_dbt.stg_deposco__Item": ["source.kns_dbt.deposco.item"], "model.kns_dbt.stg_deposco__Location": ["source.kns_dbt.deposco.location"], "model.kns_dbt.stg_deposco__OrderHeader": ["source.kns_dbt.deposco.order_header"], "model.kns_dbt.stg_deposco__OrderLine": ["source.kns_dbt.deposco.order_line"], "model.kns_dbt.stg_deposco__Pack": ["source.kns_dbt.deposco.pack"], "model.kns_dbt.stg_deposco__ReceiptLine": ["source.kns_dbt.deposco.receipt_line"], "model.kns_dbt.stg_deposco__Shipment": ["source.kns_dbt.deposco.shipment"], "model.kns_dbt.stg_deposco__ShipmentLine": ["source.kns_dbt.deposco.shipment_line"], "model.kns_dbt.stg_deposco__ShipmentOrderHeader": ["source.kns_dbt.deposco.shipment_order_header"], "model.kns_dbt.stg_deposco__StockUnit": ["source.kns_dbt.deposco.stock_unit"], "model.kns_dbt.stg_deposco__StockUnitAuditHistory": ["source.kns_dbt.deposco.STOCK_UNIT_AUDIT_HISTORY"], "model.kns_dbt.stg_deposco__TradingPartner": ["source.kns_dbt.deposco.trading_partner"], "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea": ["source.kns_dbt.kns.FreightForwarder_AirAndSea"], "model.kns_dbt.stg_kns__FreightForwarder_DSV": ["source.kns_dbt.kns.FreightForwarder_DSV"], "model.kns_dbt.stg_kns__FreightForwarder_POMasterFile": ["source.kns_dbt.kns.POMasterFile"], "model.kns_dbt.stg_kns__FreightForwarder_SFI": ["source.kns_dbt.kns.FreightForwarder_SFI"], "model.kns_dbt.stg_kns__HistoricalDimItem": ["source.kns_dbt.Dev.HistoricalDimItem"], "model.kns_dbt.stg_marketing__CoOpCampaign": ["source.kns_dbt.marketing.CoOpCampaign"], "model.kns_dbt.stg_marketing__Criteo": ["source.kns_dbt.marketing.Criteo"], "model.kns_dbt.stg_marketing__Northbeam": ["source.kns_dbt.marketing.Northbeam"], "model.kns_dbt.stg_marketing__PromoteIq": ["source.kns_dbt.marketing.PromoteIQ"], "model.kns_dbt.stg_marketing__Roundel": ["source.kns_dbt.marketing.Roundel"], "model.kns_dbt.stg_marketing__Symbiosys": ["source.kns_dbt.marketing.Symbiosys"], "model.kns_dbt.stg_netsuite__Entity": ["source.kns_dbt.netsuite.entity"], "model.kns_dbt.stg_netsuite__KnsItemCogs": ["source.kns_dbt.netsuite.KNS_ItemCogs"], "model.kns_dbt.stg_netsuite__Transaction": ["source.kns_dbt.netsuite.transaction"], "model.kns_dbt.stg_netsuite__TransactionLine": ["source.kns_dbt.netsuite.transactionLine"], "model.kns_dbt.stg_salsify__Product": ["source.kns_dbt.salsify.Product"], "model.kns_dbt.stg_products__Brand": ["source.kns_dbt.products.Brand"], "model.kns_dbt.stg_products__Catalog": ["source.kns_dbt.products.Catalog"], "model.kns_dbt.stg_products__Style": ["source.kns_dbt.products.Style"], "model.kns_dbt.stg_products__Subclass": ["source.kns_dbt.products.Subclass"], "model.kns_dbt.stg_products__Variant": ["source.kns_dbt.products.Variant"], "seed.kns_dbt.seed_Brands": [], "seed.kns_dbt.seed_SizeRun": [], "test.kns_dbt.unique_DimTradingPartner_TradingPartnerId.3848ac0272": ["model.kns_dbt.DimTradingPartner"], "test.kns_dbt.not_null_DimTradingPartner_TradingPartnerId.1681276484": ["model.kns_dbt.DimTradingPartner"], "test.kns_dbt.not_null_FactMarketingAd_TradingPartnerId.54a6c4f487": ["model.kns_dbt.FactMarketingAd"], "test.kns_dbt.accepted_values_FactMarketingAd_Objective__Top_Funnel_Awareness__Mid_Funnel__Bottom_Funnel_Conversions__Retargeting__Prospecting__Retention__NBSearch__BrandSearch__PMax__BrandShopping__NBShopping__Null.96cf12787a": ["model.kns_dbt.FactMarketingAd"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt__date.cff0f287eb": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt.aa52fbe071": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt__date.b8bfa69e4d": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt.97dc63685d": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt__date.6e7870e9ff": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt.0cbd999917": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt__date.0150e15b41": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt.8d0ff813d3": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_VesselLoadedAt__date.9583e14d05": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt.0779769e89": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt__date.b31b0631bd": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt.e61cc59608": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt__date.e4ec7d834b": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt.571295a306": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt__date.a7dd1a5bbf": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt.9f4faeb3fa": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_VesselLoadedAt__date.420ac9db3b": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt.69753375e9": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt__date.e4cb327004": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt.8ecfb2dd25": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt__date.96e1bf2941": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt.62e86b505a": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt__date.cce0b38b3e": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt.fcff9b26b5": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"], "test.kns_dbt.not_null_stg_marketing__Criteo_date.861ccae32e": ["model.kns_dbt.stg_marketing__Criteo"], "test.kns_dbt.source_not_null_marketing_Criteo_date.3ff2cfd089": ["source.kns_dbt.marketing.Criteo"], "source.kns_dbt.dbo.calendar": [], "source.kns_dbt.deposco.trading_partner": [], "source.kns_dbt.deposco.stock_unit": [], "source.kns_dbt.deposco.STOCK_UNIT_AUDIT_HISTORY": [], "source.kns_dbt.deposco.item": [], "source.kns_dbt.deposco.order_line": [], "source.kns_dbt.deposco.pack": [], "source.kns_dbt.deposco.order_header": [], "source.kns_dbt.deposco.receipt_line": [], "source.kns_dbt.deposco.co_line": [], "source.kns_dbt.deposco.location": [], "source.kns_dbt.deposco.shipment": [], "source.kns_dbt.deposco.shipment_line": [], "source.kns_dbt.deposco.shipment_order_header": [], "source.kns_dbt.kns.FreightForwarder_AirAndSea": [], "source.kns_dbt.kns.FreightForwarder_DSV": [], "source.kns_dbt.kns.FreightForwarder_SFI": [], "source.kns_dbt.kns.POMasterFile": [], "source.kns_dbt.Dev.HistoricalDimItem": [], "source.kns_dbt.marketing.Criteo": [], "source.kns_dbt.marketing.Northbeam": [], "source.kns_dbt.marketing.PromoteIQ": [], "source.kns_dbt.marketing.Symbiosys": [], "source.kns_dbt.marketing.CoOpCampaign": [], "source.kns_dbt.marketing.Roundel": [], "source.kns_dbt.netsuite.entity": [], "source.kns_dbt.netsuite.transaction": [], "source.kns_dbt.netsuite.transactionLine": [], "source.kns_dbt.netsuite.KNS_ItemCogs": [], "source.kns_dbt.salsify.Product": [], "source.kns_dbt.products.Brand": [], "source.kns_dbt.products.Catalog": [], "source.kns_dbt.products.Style": [], "source.kns_dbt.products.Subclass": [], "source.kns_dbt.products.Variant": []}, "child_map": {"model.kns_dbt.int_marketing__SourcesMapped": ["model.kns_dbt.FactMarketingAd"], "model.kns_dbt.int_marketing__SourcesUnioned": ["model.kns_dbt.int_marketing__SourcesMapped"], "model.kns_dbt.int_sales__CurrentStock": ["model.kns_dbt.DimItem", "model.kns_dbt.FactCurrentStock"], "model.kns_dbt.int_sales__DimItemPrep": ["model.kns_dbt.DimItem"], "model.kns_dbt.int_sales__FactSalesLine_Deposco": ["model.kns_dbt.FactSalesLine"], "model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals": ["model.kns_dbt.FactSalesLine"], "model.kns_dbt.int_sales__ReturnRatePrep": ["model.kns_dbt.FactReturnRate"], "model.kns_dbt.DimItem": ["model.kns_dbt.int_sales__FactSalesLine_Deposco"], "model.kns_dbt.DimTradingPartner": ["test.kns_dbt.not_null_DimTradingPartner_TradingPartnerId.1681276484", "test.kns_dbt.unique_DimTradingPartner_TradingPartnerId.3848ac0272"], "model.kns_dbt.FactCurrentStock": [], "model.kns_dbt.FactMarketingAd": ["test.kns_dbt.accepted_values_FactMarketingAd_Objective__Top_Funnel_Awareness__Mid_Funnel__Bottom_Funnel_Conversions__Retargeting__Prospecting__Retention__NBSearch__BrandSearch__PMax__BrandShopping__NBShopping__Null.96cf12787a", "test.kns_dbt.not_null_FactMarketingAd_TradingPartnerId.54a6c4f487"], "model.kns_dbt.FactReturnRate": [], "model.kns_dbt.FactSalesLine": [], "model.kns_dbt.FreightForwarders": [], "model.kns_dbt.stg_dbo__Calendar": ["model.kns_dbt.int_marketing__SourcesUnioned"], "model.kns_dbt.stg_deposco__CoLine": ["model.kns_dbt.int_sales__FactSalesLine_Deposco"], "model.kns_dbt.stg_deposco__Item": ["model.kns_dbt.int_sales__CurrentStock", "model.kns_dbt.int_sales__DimItemPrep", "model.kns_dbt.int_sales__FactSalesLine_Deposco", "model.kns_dbt.int_sales__ReturnRatePrep"], "model.kns_dbt.stg_deposco__Location": [], "model.kns_dbt.stg_deposco__OrderHeader": ["model.kns_dbt.FactSalesLine", "model.kns_dbt.int_sales__CurrentStock", "model.kns_dbt.int_sales__FactSalesLine_Deposco", "model.kns_dbt.int_sales__ReturnRatePrep"], "model.kns_dbt.stg_deposco__OrderLine": ["model.kns_dbt.FactSalesLine", "model.kns_dbt.int_sales__CurrentStock", "model.kns_dbt.int_sales__FactSalesLine_Deposco", "model.kns_dbt.int_sales__ReturnRatePrep"], "model.kns_dbt.stg_deposco__Pack": ["model.kns_dbt.int_sales__CurrentStock"], "model.kns_dbt.stg_deposco__ReceiptLine": ["model.kns_dbt.int_sales__ReturnRatePrep"], "model.kns_dbt.stg_deposco__Shipment": ["model.kns_dbt.FactSalesLine"], "model.kns_dbt.stg_deposco__ShipmentLine": ["model.kns_dbt.FactSalesLine"], "model.kns_dbt.stg_deposco__ShipmentOrderHeader": ["model.kns_dbt.FactSalesLine"], "model.kns_dbt.stg_deposco__StockUnit": ["model.kns_dbt.int_sales__CurrentStock"], "model.kns_dbt.stg_deposco__StockUnitAuditHistory": ["model.kns_dbt.int_sales__CurrentStock"], "model.kns_dbt.stg_deposco__TradingPartner": ["model.kns_dbt.DimTradingPartner", "model.kns_dbt.FactSalesLine", "model.kns_dbt.int_marketing__SourcesUnioned", "model.kns_dbt.int_sales__FactSalesLine_Deposco", "model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals", "model.kns_dbt.int_sales__ReturnRatePrep"], "model.kns_dbt.stg_kns__FreightForwarder_AirAndSea": ["model.kns_dbt.FreightForwarders", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt__date.0150e15b41", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt__date.b8bfa69e4d", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt__date.6e7870e9ff", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt__date.cff0f287eb", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt.8d0ff813d3", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt.97dc63685d", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt.0cbd999917", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt.aa52fbe071"], "model.kns_dbt.stg_kns__FreightForwarder_DSV": ["model.kns_dbt.FreightForwarders", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt__date.a7dd1a5bbf", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt__date.b31b0631bd", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt__date.e4ec7d834b", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_VesselLoadedAt__date.9583e14d05", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt.9f4faeb3fa", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt.e61cc59608", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt.571295a306", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt.0779769e89"], "model.kns_dbt.stg_kns__FreightForwarder_POMasterFile": ["model.kns_dbt.FreightForwarders"], "model.kns_dbt.stg_kns__FreightForwarder_SFI": ["model.kns_dbt.FreightForwarders", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt__date.cce0b38b3e", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt__date.e4cb327004", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt__date.96e1bf2941", "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_VesselLoadedAt__date.420ac9db3b", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt.fcff9b26b5", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt.8ecfb2dd25", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt.62e86b505a", "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt.69753375e9"], "model.kns_dbt.stg_kns__HistoricalDimItem": ["model.kns_dbt.int_sales__DimItemPrep"], "model.kns_dbt.stg_marketing__CoOpCampaign": ["model.kns_dbt.int_marketing__SourcesUnioned"], "model.kns_dbt.stg_marketing__Criteo": ["model.kns_dbt.int_marketing__SourcesUnioned", "test.kns_dbt.not_null_stg_marketing__Criteo_date.861ccae32e"], "model.kns_dbt.stg_marketing__Northbeam": ["model.kns_dbt.int_marketing__SourcesUnioned"], "model.kns_dbt.stg_marketing__PromoteIq": ["model.kns_dbt.int_marketing__SourcesUnioned"], "model.kns_dbt.stg_marketing__Roundel": ["model.kns_dbt.int_marketing__SourcesUnioned"], "model.kns_dbt.stg_marketing__Symbiosys": ["model.kns_dbt.int_marketing__SourcesUnioned"], "model.kns_dbt.stg_netsuite__Entity": ["model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals"], "model.kns_dbt.stg_netsuite__KnsItemCogs": ["model.kns_dbt.int_sales__DimItemPrep"], "model.kns_dbt.stg_netsuite__Transaction": ["model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals"], "model.kns_dbt.stg_netsuite__TransactionLine": ["model.kns_dbt.int_sales__FactSalesLine_ReturnsAccruals"], "model.kns_dbt.stg_salsify__Product": [], "model.kns_dbt.stg_products__Brand": ["model.kns_dbt.int_sales__DimItemPrep"], "model.kns_dbt.stg_products__Catalog": ["model.kns_dbt.int_sales__DimItemPrep"], "model.kns_dbt.stg_products__Style": ["model.kns_dbt.int_sales__DimItemPrep"], "model.kns_dbt.stg_products__Subclass": ["model.kns_dbt.int_sales__DimItemPrep"], "model.kns_dbt.stg_products__Variant": ["model.kns_dbt.int_sales__DimItemPrep"], "seed.kns_dbt.seed_Brands": ["model.kns_dbt.FactMarketingAd"], "seed.kns_dbt.seed_SizeRun": ["model.kns_dbt.DimItem"], "test.kns_dbt.unique_DimTradingPartner_TradingPartnerId.3848ac0272": [], "test.kns_dbt.not_null_DimTradingPartner_TradingPartnerId.1681276484": [], "test.kns_dbt.not_null_FactMarketingAd_TradingPartnerId.54a6c4f487": [], "test.kns_dbt.accepted_values_FactMarketingAd_Objective__Top_Funnel_Awareness__Mid_Funnel__Bottom_Funnel_Conversions__Retargeting__Prospecting__Retention__NBSearch__BrandSearch__PMax__BrandShopping__NBShopping__Null.96cf12787a": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt__date.cff0f287eb": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_VesselLoadedAt.aa52fbe071": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt__date.b8bfa69e4d": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSPortAt.97dc63685d": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt__date.6e7870e9ff": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedUSStartShipAt.0cbd999917": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt__date.0150e15b41": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_AirAndSea_EstimatedArrivalAt.8d0ff813d3": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_VesselLoadedAt__date.9583e14d05": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_VesselLoadedAt.0779769e89": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt__date.b31b0631bd": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSPortAt.e61cc59608": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt__date.e4ec7d834b": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedUSStartShipAt.571295a306": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt__date.a7dd1a5bbf": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_DSV_EstimatedArrivalAt.9f4faeb3fa": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_VesselLoadedAt__date.420ac9db3b": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_VesselLoadedAt.69753375e9": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt__date.e4cb327004": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSPortAt.8ecfb2dd25": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt__date.96e1bf2941": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedUSStartShipAt.62e86b505a": [], "test.kns_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt__date.cce0b38b3e": [], "test.kns_dbt.no_1900_dates_stg_kns__FreightForwarder_SFI_EstimatedArrivalAt.fcff9b26b5": [], "test.kns_dbt.not_null_stg_marketing__Criteo_date.861ccae32e": [], "test.kns_dbt.source_not_null_marketing_Criteo_date.3ff2cfd089": [], "source.kns_dbt.dbo.calendar": ["model.kns_dbt.stg_dbo__Calendar"], "source.kns_dbt.deposco.trading_partner": ["model.kns_dbt.stg_deposco__TradingPartner"], "source.kns_dbt.deposco.stock_unit": ["model.kns_dbt.stg_deposco__StockUnit"], "source.kns_dbt.deposco.STOCK_UNIT_AUDIT_HISTORY": ["model.kns_dbt.stg_deposco__StockUnitAuditHistory"], "source.kns_dbt.deposco.item": ["model.kns_dbt.stg_deposco__Item"], "source.kns_dbt.deposco.order_line": ["model.kns_dbt.stg_deposco__OrderLine"], "source.kns_dbt.deposco.pack": ["model.kns_dbt.stg_deposco__Pack"], "source.kns_dbt.deposco.order_header": ["model.kns_dbt.stg_deposco__OrderHeader"], "source.kns_dbt.deposco.receipt_line": ["model.kns_dbt.stg_deposco__ReceiptLine"], "source.kns_dbt.deposco.co_line": ["model.kns_dbt.stg_deposco__CoLine"], "source.kns_dbt.deposco.location": ["model.kns_dbt.stg_deposco__Location"], "source.kns_dbt.deposco.shipment": ["model.kns_dbt.stg_deposco__Shipment"], "source.kns_dbt.deposco.shipment_line": ["model.kns_dbt.stg_deposco__ShipmentLine"], "source.kns_dbt.deposco.shipment_order_header": ["model.kns_dbt.stg_deposco__ShipmentOrderHeader"], "source.kns_dbt.kns.FreightForwarder_AirAndSea": ["model.kns_dbt.stg_kns__FreightForwarder_AirAndSea"], "source.kns_dbt.kns.FreightForwarder_DSV": ["model.kns_dbt.stg_kns__FreightForwarder_DSV"], "source.kns_dbt.kns.FreightForwarder_SFI": ["model.kns_dbt.stg_kns__FreightForwarder_SFI"], "source.kns_dbt.kns.POMasterFile": ["model.kns_dbt.stg_kns__FreightForwarder_POMasterFile"], "source.kns_dbt.Dev.HistoricalDimItem": ["model.kns_dbt.stg_kns__HistoricalDimItem"], "source.kns_dbt.marketing.Criteo": ["model.kns_dbt.stg_marketing__Criteo", "test.kns_dbt.source_not_null_marketing_Criteo_date.3ff2cfd089"], "source.kns_dbt.marketing.Northbeam": ["model.kns_dbt.stg_marketing__Northbeam"], "source.kns_dbt.marketing.PromoteIQ": ["model.kns_dbt.stg_marketing__PromoteIq"], "source.kns_dbt.marketing.Symbiosys": ["model.kns_dbt.stg_marketing__Symbiosys"], "source.kns_dbt.marketing.CoOpCampaign": ["model.kns_dbt.stg_marketing__CoOpCampaign"], "source.kns_dbt.marketing.Roundel": ["model.kns_dbt.stg_marketing__Roundel"], "source.kns_dbt.netsuite.entity": ["model.kns_dbt.stg_netsuite__Entity"], "source.kns_dbt.netsuite.transaction": ["model.kns_dbt.stg_netsuite__Transaction"], "source.kns_dbt.netsuite.transactionLine": ["model.kns_dbt.stg_netsuite__TransactionLine"], "source.kns_dbt.netsuite.KNS_ItemCogs": ["model.kns_dbt.stg_netsuite__KnsItemCogs"], "source.kns_dbt.salsify.Product": ["model.kns_dbt.stg_salsify__Product"], "source.kns_dbt.products.Brand": ["model.kns_dbt.stg_products__Brand"], "source.kns_dbt.products.Catalog": ["model.kns_dbt.stg_products__Catalog"], "source.kns_dbt.products.Style": ["model.kns_dbt.stg_products__Style"], "source.kns_dbt.products.Subclass": ["model.kns_dbt.stg_products__Subclass"], "source.kns_dbt.products.Variant": ["model.kns_dbt.stg_products__Variant"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}